#nullable enable

using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using StudioDrydock.AppStoreConnect.Core;

namespace StudioDrydock.AppStoreConnect.Api;

public partial class AppStoreClient
{
    public class Actor
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ActorType
            {
                USER,
                API_KEY,
                XCODE_CLOUD,
                APPLE,
            }
            public ActorType? @actorType { get; set; }
            public string? @userFirstName { get; set; }
            public string? @userLastName { get; set; }
            public string? @userEmail { get; set; }
            public string? @apiKeyId { get; set; }
        }

        public string @type { get; set; } = "actors";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class ActorResponse
    {
        public Actor @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class ActorsResponse
        : IHasNextLink
    {
        public Actor[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AgeRatingDeclaration
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AlcoholTobaccoOrDrugUseOrReferences
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public AlcoholTobaccoOrDrugUseOrReferences? @alcoholTobaccoOrDrugUseOrReferences { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Contests
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public Contests? @contests { get; set; }
            public bool? @gamblingAndContests { get; set; }
            public bool? @gambling { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum GamblingSimulated
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public GamblingSimulated? @gamblingSimulated { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum KidsAgeBand
            {
                FIVE_AND_UNDER,
                SIX_TO_EIGHT,
                NINE_TO_ELEVEN,
            }
            public KidsAgeBand? @kidsAgeBand { get; set; }
            public bool? @lootBox { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum MedicalOrTreatmentInformation
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public MedicalOrTreatmentInformation? @medicalOrTreatmentInformation { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ProfanityOrCrudeHumor
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public ProfanityOrCrudeHumor? @profanityOrCrudeHumor { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum SexualContentGraphicAndNudity
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public SexualContentGraphicAndNudity? @sexualContentGraphicAndNudity { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum SexualContentOrNudity
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public SexualContentOrNudity? @sexualContentOrNudity { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum HorrorOrFearThemes
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public HorrorOrFearThemes? @horrorOrFearThemes { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum MatureOrSuggestiveThemes
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public MatureOrSuggestiveThemes? @matureOrSuggestiveThemes { get; set; }
            public bool? @unrestrictedWebAccess { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ViolenceCartoonOrFantasy
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public ViolenceCartoonOrFantasy? @violenceCartoonOrFantasy { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ViolenceRealisticProlongedGraphicOrSadistic
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public ViolenceRealisticProlongedGraphicOrSadistic? @violenceRealisticProlongedGraphicOrSadistic { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ViolenceRealistic
            {
                NONE,
                INFREQUENT_OR_MILD,
                FREQUENT_OR_INTENSE,
            }
            public ViolenceRealistic? @violenceRealistic { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AgeRatingOverride
            {
                NONE,
                SEVENTEEN_PLUS,
                UNRATED,
            }
            public AgeRatingOverride? @ageRatingOverride { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum KoreaAgeRatingOverride
            {
                NONE,
                FIFTEEN_PLUS,
                NINETEEN_PLUS,
            }
            public KoreaAgeRatingOverride? @koreaAgeRatingOverride { get; set; }
            public bool? @seventeenPlus { get; set; }
        }

        public string @type { get; set; } = "ageRatingDeclarations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AgeRatingDeclarationResponse
    {
        public AgeRatingDeclaration @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AgeRatingDeclarationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum AlcoholTobaccoOrDrugUseOrReferences
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public AlcoholTobaccoOrDrugUseOrReferences? @alcoholTobaccoOrDrugUseOrReferences { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Contests
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public Contests? @contests { get; set; }
                public bool? @gamblingAndContests { get; set; }
                public bool? @gambling { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum GamblingSimulated
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public GamblingSimulated? @gamblingSimulated { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum KidsAgeBand
                {
                    FIVE_AND_UNDER,
                    SIX_TO_EIGHT,
                    NINE_TO_ELEVEN,
                }
                public KidsAgeBand? @kidsAgeBand { get; set; }
                public bool? @lootBox { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum MedicalOrTreatmentInformation
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public MedicalOrTreatmentInformation? @medicalOrTreatmentInformation { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ProfanityOrCrudeHumor
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public ProfanityOrCrudeHumor? @profanityOrCrudeHumor { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum SexualContentGraphicAndNudity
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public SexualContentGraphicAndNudity? @sexualContentGraphicAndNudity { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum SexualContentOrNudity
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public SexualContentOrNudity? @sexualContentOrNudity { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum HorrorOrFearThemes
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public HorrorOrFearThemes? @horrorOrFearThemes { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum MatureOrSuggestiveThemes
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public MatureOrSuggestiveThemes? @matureOrSuggestiveThemes { get; set; }
                public bool? @unrestrictedWebAccess { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ViolenceCartoonOrFantasy
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public ViolenceCartoonOrFantasy? @violenceCartoonOrFantasy { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ViolenceRealisticProlongedGraphicOrSadistic
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public ViolenceRealisticProlongedGraphicOrSadistic? @violenceRealisticProlongedGraphicOrSadistic { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ViolenceRealistic
                {
                    NONE,
                    INFREQUENT_OR_MILD,
                    FREQUENT_OR_INTENSE,
                }
                public ViolenceRealistic? @violenceRealistic { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum AgeRatingOverride
                {
                    NONE,
                    SEVENTEEN_PLUS,
                    UNRATED,
                }
                public AgeRatingOverride? @ageRatingOverride { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum KoreaAgeRatingOverride
                {
                    NONE,
                    FIFTEEN_PLUS,
                    NINETEEN_PLUS,
                }
                public KoreaAgeRatingOverride? @koreaAgeRatingOverride { get; set; }
                public bool? @seventeenPlus { get; set; }
            }

            public string @type { get; set; } = "ageRatingDeclarations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AgeRatingDeclarationWithoutIncludesResponse
    {
        public AgeRatingDeclaration @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AlternativeDistributionDomain
    {
        public class Attributes
        {
            public string? @domain { get; set; }
            public string? @referenceName { get; set; }
            public string? @createdDate { get; set; }
        }

        public string @type { get; set; } = "alternativeDistributionDomains";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AlternativeDistributionDomainCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @domain { get; set; } = "";
                public string @referenceName { get; set; } = "";
            }

            public string @type { get; set; } = "alternativeDistributionDomains";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AlternativeDistributionDomainResponse
    {
        public AlternativeDistributionDomain @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AlternativeDistributionDomainsResponse
        : IHasNextLink
    {
        public AlternativeDistributionDomain[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AlternativeDistributionKey
    {
        public class Attributes
        {
            public string? @publicKey { get; set; }
        }

        public string @type { get; set; } = "alternativeDistributionKeys";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AlternativeDistributionKeyCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @publicKey { get; set; } = "";
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public App? @app { get; set; }
            }

            public string @type { get; set; } = "alternativeDistributionKeys";
            public Attributes @attributes { get; set; } = new ();
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AlternativeDistributionKeyResponse
    {
        public AlternativeDistributionKey @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AlternativeDistributionKeysResponse
        : IHasNextLink
    {
        public AlternativeDistributionKey[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AlternativeDistributionPackage
    {
        public class Relationships
        {
            public class Versions
            {
                public class Data
                {
                    public string @type { get; set; } = "alternativeDistributionPackageVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Versions? @versions { get; set; }
        }

        public string @type { get; set; } = "alternativeDistributionPackages";
        public string @id { get; set; } = "";
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AlternativeDistributionPackageCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "alternativeDistributionPackages";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AlternativeDistributionPackageDelta
    {
        public class Attributes
        {
            public string? @url { get; set; }
            public string? @urlExpirationDate { get; set; }
            public string? @alternativeDistributionKeyBlob { get; set; }
            public string? @fileChecksum { get; set; }
        }

        public string @type { get; set; } = "alternativeDistributionPackageDeltas";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AlternativeDistributionPackageDeltaResponse
    {
        public AlternativeDistributionPackageDelta @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AlternativeDistributionPackageDeltasResponse
        : IHasNextLink
    {
        public AlternativeDistributionPackageDelta[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AlternativeDistributionPackageResponse
    {
        public AlternativeDistributionPackage @data { get; set; } = new ();
        public AlternativeDistributionPackageVersion[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AlternativeDistributionPackageVariant
    {
        public class Attributes
        {
            public string? @url { get; set; }
            public string? @urlExpirationDate { get; set; }
            public string? @alternativeDistributionKeyBlob { get; set; }
            public string? @fileChecksum { get; set; }
        }

        public string @type { get; set; } = "alternativeDistributionPackageVariants";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AlternativeDistributionPackageVariantResponse
    {
        public AlternativeDistributionPackageVariant @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AlternativeDistributionPackageVariantsResponse
        : IHasNextLink
    {
        public AlternativeDistributionPackageVariant[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AlternativeDistributionPackageVersion
    {
        public class Attributes
        {
            public string? @url { get; set; }
            public string? @urlExpirationDate { get; set; }
            public string? @version { get; set; }
            public string? @fileChecksum { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                COMPLETED,
                REPLACED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class Variants
            {
                public class Data
                {
                    public string @type { get; set; } = "alternativeDistributionPackageVariants";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Deltas
            {
                public class Data
                {
                    public string @type { get; set; } = "alternativeDistributionPackageDeltas";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AlternativeDistributionPackage
            {
                public class Data
                {
                    public string @type { get; set; } = "alternativeDistributionPackages";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Variants? @variants { get; set; }
            public Deltas? @deltas { get; set; }
            public AlternativeDistributionPackage? @alternativeDistributionPackage { get; set; }
        }

        public string @type { get; set; } = "alternativeDistributionPackageVersions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AlternativeDistributionPackageVersionResponse
    {
        public AlternativeDistributionPackageVersion @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AlternativeDistributionPackageVersionsResponse
        : IHasNextLink
    {
        public AlternativeDistributionPackageVersion[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AnalyticsReport
    {
        public class Attributes
        {
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Category
            {
                APP_USAGE,
                APP_STORE_ENGAGEMENT,
                COMMERCE,
                FRAMEWORK_USAGE,
                PERFORMANCE,
            }
            public Category? @category { get; set; }
        }

        public class Relationships
        {
            public class Instances
            {
                public RelationshipLinks? @links { get; set; }
            }

            public Instances? @instances { get; set; }
        }

        public string @type { get; set; } = "analyticsReports";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AnalyticsReportInstance
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Granularity
            {
                DAILY,
                WEEKLY,
                MONTHLY,
            }
            public Granularity? @granularity { get; set; }
            public string? @processingDate { get; set; }
        }

        public class Relationships
        {
            public class Segments
            {
                public RelationshipLinks? @links { get; set; }
            }

            public Segments? @segments { get; set; }
        }

        public string @type { get; set; } = "analyticsReportInstances";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AnalyticsReportInstanceResponse
    {
        public AnalyticsReportInstance @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AnalyticsReportInstancesResponse
        : IHasNextLink
    {
        public AnalyticsReportInstance[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AnalyticsReportRequest
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AccessType
            {
                ONE_TIME_SNAPSHOT,
                ONGOING,
            }
            public AccessType? @accessType { get; set; }
            public bool? @stoppedDueToInactivity { get; set; }
        }

        public class Relationships
        {
            public class Reports
            {
                public class Data
                {
                    public string @type { get; set; } = "analyticsReports";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Reports? @reports { get; set; }
        }

        public string @type { get; set; } = "analyticsReportRequests";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AnalyticsReportRequestCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum AccessType
                {
                    ONE_TIME_SNAPSHOT,
                    ONGOING,
                }
                public AccessType @accessType { get; set; } = default;
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "analyticsReportRequests";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AnalyticsReportRequestResponse
    {
        public AnalyticsReportRequest @data { get; set; } = new ();
        public AnalyticsReport[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AnalyticsReportRequestsResponse
        : IHasNextLink
    {
        public AnalyticsReportRequest[] @data { get; set; } = { };
        public AnalyticsReport[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AnalyticsReportResponse
    {
        public AnalyticsReport @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AnalyticsReportSegment
    {
        public class Attributes
        {
            public string? @checksum { get; set; }
            public int? @sizeInBytes { get; set; }
            public string? @url { get; set; }
        }

        public string @type { get; set; } = "analyticsReportSegments";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AnalyticsReportSegmentResponse
    {
        public AnalyticsReportSegment @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AnalyticsReportSegmentsResponse
        : IHasNextLink
    {
        public AnalyticsReportSegment[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AnalyticsReportsResponse
        : IHasNextLink
    {
        public AnalyticsReport[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class App
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @bundleId { get; set; }
            public string? @sku { get; set; }
            public string? @primaryLocale { get; set; }
            public bool? @isOrEverWasMadeForKids { get; set; }
            public string? @subscriptionStatusUrl { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum SubscriptionStatusUrlVersion
            {
                V1,
                V2,
            }
            public SubscriptionStatusUrlVersion? @subscriptionStatusUrlVersion { get; set; }
            public string? @subscriptionStatusUrlForSandbox { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum SubscriptionStatusUrlVersionForSandbox
            {
                V1,
                V2,
            }
            public SubscriptionStatusUrlVersionForSandbox? @subscriptionStatusUrlVersionForSandbox { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ContentRightsDeclaration
            {
                DOES_NOT_USE_THIRD_PARTY_CONTENT,
                USES_THIRD_PARTY_CONTENT,
            }
            public ContentRightsDeclaration? @contentRightsDeclaration { get; set; }
            public bool? @streamlinedPurchasingEnabled { get; set; }
        }

        public class Relationships
        {
            public class AppEncryptionDeclarations
            {
                public class Data
                {
                    public string @type { get; set; } = "appEncryptionDeclarations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class CiProduct
            {
                public class Data
                {
                    public string @type { get; set; } = "ciProducts";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class BetaTesters
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class BetaGroups
            {
                public class Data
                {
                    public string @type { get; set; } = "betaGroups";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppStoreVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class PreReleaseVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "preReleaseVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class BetaAppLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "betaAppLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Builds
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class BetaLicenseAgreement
            {
                public class Data
                {
                    public string @type { get; set; } = "betaLicenseAgreements";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class BetaAppReviewDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "betaAppReviewDetails";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppInfos
            {
                public class Data
                {
                    public string @type { get; set; } = "appInfos";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppClips
            {
                public class Data
                {
                    public string @type { get; set; } = "appClips";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppPricePoints
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class EndUserLicenseAgreement
            {
                public class Data
                {
                    public string @type { get; set; } = "endUserLicenseAgreements";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppPriceSchedule
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class AppAvailabilityV2
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class InAppPurchases
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class SubscriptionGroups
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionGroups";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class GameCenterEnabledVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterEnabledVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class PerfPowerMetrics
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class AppCustomProductPages
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class InAppPurchasesV2
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class PromotedPurchases
            {
                public class Data
                {
                    public string @type { get; set; } = "promotedPurchases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppEvents
            {
                public class Data
                {
                    public string @type { get; set; } = "appEvents";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class ReviewSubmissions
            {
                public class Data
                {
                    public string @type { get; set; } = "reviewSubmissions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class SubscriptionGracePeriod
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionGracePeriods";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class CustomerReviews
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class GameCenterDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterDetails";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppStoreVersionExperimentsV2
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperiments";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AlternativeDistributionKey
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class AnalyticsReportRequests
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class MarketplaceSearchDetail
            {
                public RelationshipLinks? @links { get; set; }
            }

            public AppEncryptionDeclarations? @appEncryptionDeclarations { get; set; }
            public CiProduct? @ciProduct { get; set; }
            public BetaTesters? @betaTesters { get; set; }
            public BetaGroups? @betaGroups { get; set; }
            public AppStoreVersions? @appStoreVersions { get; set; }
            public PreReleaseVersions? @preReleaseVersions { get; set; }
            public BetaAppLocalizations? @betaAppLocalizations { get; set; }
            public Builds? @builds { get; set; }
            public BetaLicenseAgreement? @betaLicenseAgreement { get; set; }
            public BetaAppReviewDetail? @betaAppReviewDetail { get; set; }
            public AppInfos? @appInfos { get; set; }
            public AppClips? @appClips { get; set; }
            public AppPricePoints? @appPricePoints { get; set; }
            public EndUserLicenseAgreement? @endUserLicenseAgreement { get; set; }
            public AppPriceSchedule? @appPriceSchedule { get; set; }
            public AppAvailabilityV2? @appAvailabilityV2 { get; set; }
            public InAppPurchases? @inAppPurchases { get; set; }
            public SubscriptionGroups? @subscriptionGroups { get; set; }
            public GameCenterEnabledVersions? @gameCenterEnabledVersions { get; set; }
            public PerfPowerMetrics? @perfPowerMetrics { get; set; }
            public AppCustomProductPages? @appCustomProductPages { get; set; }
            public InAppPurchasesV2? @inAppPurchasesV2 { get; set; }
            public PromotedPurchases? @promotedPurchases { get; set; }
            public AppEvents? @appEvents { get; set; }
            public ReviewSubmissions? @reviewSubmissions { get; set; }
            public SubscriptionGracePeriod? @subscriptionGracePeriod { get; set; }
            public CustomerReviews? @customerReviews { get; set; }
            public GameCenterDetail? @gameCenterDetail { get; set; }
            public AppStoreVersionExperimentsV2? @appStoreVersionExperimentsV2 { get; set; }
            public AlternativeDistributionKey? @alternativeDistributionKey { get; set; }
            public AnalyticsReportRequests? @analyticsReportRequests { get; set; }
            public MarketplaceSearchDetail? @marketplaceSearchDetail { get; set; }
        }

        public string @type { get; set; } = "apps";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppAvailabilityV2
    {
        public class Attributes
        {
            public bool? @availableInNewTerritories { get; set; }
        }

        public class Relationships
        {
            public class TerritoryAvailabilities
            {
                public class Data
                {
                    public string @type { get; set; } = "territoryAvailabilities";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public TerritoryAvailabilities? @territoryAvailabilities { get; set; }
        }

        public string @type { get; set; } = "appAvailabilities";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppAvailabilityV2CreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool @availableInNewTerritories { get; set; } = false;
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class TerritoryAvailabilities
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territoryAvailabilities";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public App @app { get; set; } = new ();
                public TerritoryAvailabilities @territoryAvailabilities { get; set; } = new ();
            }

            public string @type { get; set; } = "appAvailabilities";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public TerritoryAvailabilityInlineCreate[]? @included { get; set; }
    }

    public class AppAvailabilityV2Response
    {
        public AppAvailabilityV2 @data { get; set; } = new ();
        public TerritoryAvailability[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppBetaTestersLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class AppCategoriesResponse
        : IHasNextLink
    {
        public AppCategory[] @data { get; set; } = { };
        public AppCategory[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppCategoriesWithoutIncludesResponse
        : IHasNextLink
    {
        public AppCategory[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppCategory
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platforms
            {
                IOS,
                MAC_OS,
                TV_OS,
                VISION_OS,
            }

            public Platforms[]? @platforms { get; set; }
        }

        public class Relationships
        {
            public class Subcategories
            {
                public class Data
                {
                    public string @type { get; set; } = "appCategories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Parent
            {
                public class Data
                {
                    public string @type { get; set; } = "appCategories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public Subcategories? @subcategories { get; set; }
            public Parent? @parent { get; set; }
        }

        public string @type { get; set; } = "appCategories";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppCategoryResponse
    {
        public AppCategory @data { get; set; } = new ();
        public AppCategory[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppCategoryWithoutIncludesResponse
    {
        public AppCategory @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClip
    {
        public class Attributes
        {
            public string? @bundleId { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppClipDefaultExperiences
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipDefaultExperiences";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppClipAdvancedExperiences
            {
                public RelationshipLinks? @links { get; set; }
            }

            public App? @app { get; set; }
            public AppClipDefaultExperiences? @appClipDefaultExperiences { get; set; }
            public AppClipAdvancedExperiences? @appClipAdvancedExperiences { get; set; }
        }

        public string @type { get; set; } = "appClips";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipAction
    {
        OPEN,
        VIEW,
        PLAY,
    }

    public class AppClipAdvancedExperience
    {
        public class Attributes
        {
            public class Place
            {
                public class MainAddress
                {
                    public class StructuredAddress
                    {
                        public string[]? @streetAddress { get; set; }
                        public string? @floor { get; set; }
                        public string? @neighborhood { get; set; }
                        public string? @locality { get; set; }
                        public string? @stateProvince { get; set; }
                        public string? @postalCode { get; set; }
                        public string? @countryCode { get; set; }
                    }

                    public string? @fullAddress { get; set; }
                    public StructuredAddress? @structuredAddress { get; set; }
                }

                public class DisplayPoint
                {
                    public class Coordinates
                    {
                        public double? @latitude { get; set; }
                        public double? @longitude { get; set; }
                    }

                    public Coordinates? @coordinates { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Source
                    {
                        CALCULATED,
                        MANUALLY_PLACED,
                    }
                    public Source? @source { get; set; }
                }

                public class PhoneNumber
                {
                    public string? @number { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Type
                    {
                        FAX,
                        LANDLINE,
                        MOBILE,
                        TOLLFREE,
                    }
                    public Type? @type { get; set; }
                    public string? @intent { get; set; }
                }

                public string? @placeId { get; set; }
                public string[]? @names { get; set; }
                public MainAddress? @mainAddress { get; set; }
                public DisplayPoint? @displayPoint { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum MapAction
                {
                    BUY_TICKETS,
                    VIEW_AVAILABILITY,
                    VIEW_PRICING,
                    HOTEL_BOOK_ROOM,
                    PARKING_RESERVE_PARKING,
                    RESTAURANT_JOIN_WAITLIST,
                    RESTAURANT_ORDER_DELIVERY,
                    RESTAURANT_ORDER_FOOD,
                    RESTAURANT_ORDER_TAKEOUT,
                    RESTAURANT_RESERVATION,
                    SCHEDULE_APPOINTMENT,
                    RESTAURANT_VIEW_MENU,
                    THEATER_NOW_PLAYING,
                }
                public MapAction? @mapAction { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Relationship
                {
                    OWNER,
                    AUTHORIZED,
                    OTHER,
                }
                public Relationship? @relationship { get; set; }
                public PhoneNumber? @phoneNumber { get; set; }
                public string? @homePage { get; set; }
                public string[]? @categories { get; set; }
            }

            public string? @link { get; set; }
            public int? @version { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Status
            {
                RECEIVED,
                DEACTIVATED,
                APP_TRANSFER_IN_PROGRESS,
            }
            public Status? @status { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Action
            {
                OPEN,
                VIEW,
                PLAY,
            }
            public Action? @action { get; set; }
            public bool? @isPoweredBy { get; set; }
            public Place? @place { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum PlaceStatus
            {
                PENDING,
                MATCHED,
                NO_MATCH,
            }
            public PlaceStatus? @placeStatus { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum BusinessCategory
            {
                AUTOMOTIVE,
                BEAUTY,
                BIKES,
                BOOKS,
                CASINO,
                EDUCATION,
                EDUCATION_JAPAN,
                ENTERTAINMENT,
                EV_CHARGER,
                FINANCIAL_USD,
                FINANCIAL_CNY,
                FINANCIAL_GBP,
                FINANCIAL_JPY,
                FINANCIAL_EUR,
                FITNESS,
                FOOD_AND_DRINK,
                GAS,
                GROCERY,
                HEALTH_AND_MEDICAL,
                HOTEL_AND_TRAVEL,
                MUSIC,
                PARKING,
                PET_SERVICES,
                PROFESSIONAL_SERVICES,
                SHOPPING,
                TICKETING,
                TRANSIT,
            }
            public BusinessCategory? @businessCategory { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum DefaultLanguage
            {
                AR,
                CA,
                CS,
                DA,
                DE,
                EL,
                EN,
                ES,
                FI,
                FR,
                HE,
                HI,
                HR,
                HU,
                ID,
                IT,
                JA,
                KO,
                MS,
                NL,
                NO,
                PL,
                PT,
                RO,
                RU,
                SK,
                SV,
                TH,
                TR,
                UK,
                VI,
                ZH,
            }
            public DefaultLanguage? @defaultLanguage { get; set; }
        }

        public class Relationships
        {
            public class AppClip
            {
                public class Data
                {
                    public string @type { get; set; } = "appClips";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class HeaderImage
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipAdvancedExperienceImages";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Localizations
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipAdvancedExperienceLocalizations";
                    public string @id { get; set; } = "";
                }

                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppClip? @appClip { get; set; }
            public HeaderImage? @headerImage { get; set; }
            public Localizations? @localizations { get; set; }
        }

        public string @type { get; set; } = "appClipAdvancedExperiences";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppClipAdvancedExperienceCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public class Place
                {
                    public class MainAddress
                    {
                        public class StructuredAddress
                        {
                            public string[]? @streetAddress { get; set; }
                            public string? @floor { get; set; }
                            public string? @neighborhood { get; set; }
                            public string? @locality { get; set; }
                            public string? @stateProvince { get; set; }
                            public string? @postalCode { get; set; }
                            public string? @countryCode { get; set; }
                        }

                        public string? @fullAddress { get; set; }
                        public StructuredAddress? @structuredAddress { get; set; }
                    }

                    public class DisplayPoint
                    {
                        public class Coordinates
                        {
                            public double? @latitude { get; set; }
                            public double? @longitude { get; set; }
                        }

                        public Coordinates? @coordinates { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Source
                        {
                            CALCULATED,
                            MANUALLY_PLACED,
                        }
                        public Source? @source { get; set; }
                    }

                    public class PhoneNumber
                    {
                        public string? @number { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Type
                        {
                            FAX,
                            LANDLINE,
                            MOBILE,
                            TOLLFREE,
                        }
                        public Type? @type { get; set; }
                        public string? @intent { get; set; }
                    }

                    public string? @placeId { get; set; }
                    public string[]? @names { get; set; }
                    public MainAddress? @mainAddress { get; set; }
                    public DisplayPoint? @displayPoint { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum MapAction
                    {
                        BUY_TICKETS,
                        VIEW_AVAILABILITY,
                        VIEW_PRICING,
                        HOTEL_BOOK_ROOM,
                        PARKING_RESERVE_PARKING,
                        RESTAURANT_JOIN_WAITLIST,
                        RESTAURANT_ORDER_DELIVERY,
                        RESTAURANT_ORDER_FOOD,
                        RESTAURANT_ORDER_TAKEOUT,
                        RESTAURANT_RESERVATION,
                        SCHEDULE_APPOINTMENT,
                        RESTAURANT_VIEW_MENU,
                        THEATER_NOW_PLAYING,
                    }
                    public MapAction? @mapAction { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Relationship
                    {
                        OWNER,
                        AUTHORIZED,
                        OTHER,
                    }
                    public Relationship? @relationship { get; set; }
                    public PhoneNumber? @phoneNumber { get; set; }
                    public string? @homePage { get; set; }
                    public string[]? @categories { get; set; }
                }

                public string @link { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Action
                {
                    OPEN,
                    VIEW,
                    PLAY,
                }
                public Action? @action { get; set; }
                public bool @isPoweredBy { get; set; } = false;
                public Place? @place { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum BusinessCategory
                {
                    AUTOMOTIVE,
                    BEAUTY,
                    BIKES,
                    BOOKS,
                    CASINO,
                    EDUCATION,
                    EDUCATION_JAPAN,
                    ENTERTAINMENT,
                    EV_CHARGER,
                    FINANCIAL_USD,
                    FINANCIAL_CNY,
                    FINANCIAL_GBP,
                    FINANCIAL_JPY,
                    FINANCIAL_EUR,
                    FITNESS,
                    FOOD_AND_DRINK,
                    GAS,
                    GROCERY,
                    HEALTH_AND_MEDICAL,
                    HOTEL_AND_TRAVEL,
                    MUSIC,
                    PARKING,
                    PET_SERVICES,
                    PROFESSIONAL_SERVICES,
                    SHOPPING,
                    TICKETING,
                    TRANSIT,
                }
                public BusinessCategory? @businessCategory { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum DefaultLanguage
                {
                    AR,
                    CA,
                    CS,
                    DA,
                    DE,
                    EL,
                    EN,
                    ES,
                    FI,
                    FR,
                    HE,
                    HI,
                    HR,
                    HU,
                    ID,
                    IT,
                    JA,
                    KO,
                    MS,
                    NL,
                    NO,
                    PL,
                    PT,
                    RO,
                    RU,
                    SK,
                    SV,
                    TH,
                    TR,
                    UK,
                    VI,
                    ZH,
                }
                public DefaultLanguage @defaultLanguage { get; set; } = default;
            }

            public class Relationships
            {
                public class AppClip
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClips";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class HeaderImage
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClipAdvancedExperienceImages";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Localizations
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClipAdvancedExperienceLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public AppClip @appClip { get; set; } = new ();
                public HeaderImage @headerImage { get; set; } = new ();
                public Localizations @localizations { get; set; } = new ();
            }

            public string @type { get; set; } = "appClipAdvancedExperiences";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public AppClipAdvancedExperienceLocalizationInlineCreate[]? @included { get; set; }
    }

    public class AppClipAdvancedExperienceImage
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public string @type { get; set; } = "appClipAdvancedExperienceImages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppClipAdvancedExperienceImageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public string @type { get; set; } = "appClipAdvancedExperienceImages";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipAdvancedExperienceImageResponse
    {
        public AppClipAdvancedExperienceImage @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClipAdvancedExperienceImageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "appClipAdvancedExperienceImages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipAdvancedExperienceLanguage
    {
        AR,
        CA,
        CS,
        DA,
        DE,
        EL,
        EN,
        ES,
        FI,
        FR,
        HE,
        HI,
        HR,
        HU,
        ID,
        IT,
        JA,
        KO,
        MS,
        NL,
        NO,
        PL,
        PT,
        RO,
        RU,
        SK,
        SV,
        TH,
        TR,
        UK,
        VI,
        ZH,
    }

    public class AppClipAdvancedExperienceLocalization
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Language
            {
                AR,
                CA,
                CS,
                DA,
                DE,
                EL,
                EN,
                ES,
                FI,
                FR,
                HE,
                HI,
                HR,
                HU,
                ID,
                IT,
                JA,
                KO,
                MS,
                NL,
                NO,
                PL,
                PT,
                RO,
                RU,
                SK,
                SV,
                TH,
                TR,
                UK,
                VI,
                ZH,
            }
            public Language? @language { get; set; }
            public string? @title { get; set; }
            public string? @subtitle { get; set; }
        }

        public string @type { get; set; } = "appClipAdvancedExperienceLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppClipAdvancedExperienceLocalizationInlineCreate
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Language
            {
                AR,
                CA,
                CS,
                DA,
                DE,
                EL,
                EN,
                ES,
                FI,
                FR,
                HE,
                HI,
                HR,
                HU,
                ID,
                IT,
                JA,
                KO,
                MS,
                NL,
                NO,
                PL,
                PT,
                RO,
                RU,
                SK,
                SV,
                TH,
                TR,
                UK,
                VI,
                ZH,
            }
            public Language? @language { get; set; }
            public string? @title { get; set; }
            public string? @subtitle { get; set; }
        }

        public string @type { get; set; } = "appClipAdvancedExperienceLocalizations";
        public string? @id { get; set; }
        public Attributes? @attributes { get; set; }
    }

    public class AppClipAdvancedExperienceResponse
    {
        public AppClipAdvancedExperience @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClipAdvancedExperiencesResponse
        : IHasNextLink
    {
        public AppClipAdvancedExperience[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppClipAdvancedExperienceUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public class Place
                {
                    public class MainAddress
                    {
                        public class StructuredAddress
                        {
                            public string[]? @streetAddress { get; set; }
                            public string? @floor { get; set; }
                            public string? @neighborhood { get; set; }
                            public string? @locality { get; set; }
                            public string? @stateProvince { get; set; }
                            public string? @postalCode { get; set; }
                            public string? @countryCode { get; set; }
                        }

                        public string? @fullAddress { get; set; }
                        public StructuredAddress? @structuredAddress { get; set; }
                    }

                    public class DisplayPoint
                    {
                        public class Coordinates
                        {
                            public double? @latitude { get; set; }
                            public double? @longitude { get; set; }
                        }

                        public Coordinates? @coordinates { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Source
                        {
                            CALCULATED,
                            MANUALLY_PLACED,
                        }
                        public Source? @source { get; set; }
                    }

                    public class PhoneNumber
                    {
                        public string? @number { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Type
                        {
                            FAX,
                            LANDLINE,
                            MOBILE,
                            TOLLFREE,
                        }
                        public Type? @type { get; set; }
                        public string? @intent { get; set; }
                    }

                    public string? @placeId { get; set; }
                    public string[]? @names { get; set; }
                    public MainAddress? @mainAddress { get; set; }
                    public DisplayPoint? @displayPoint { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum MapAction
                    {
                        BUY_TICKETS,
                        VIEW_AVAILABILITY,
                        VIEW_PRICING,
                        HOTEL_BOOK_ROOM,
                        PARKING_RESERVE_PARKING,
                        RESTAURANT_JOIN_WAITLIST,
                        RESTAURANT_ORDER_DELIVERY,
                        RESTAURANT_ORDER_FOOD,
                        RESTAURANT_ORDER_TAKEOUT,
                        RESTAURANT_RESERVATION,
                        SCHEDULE_APPOINTMENT,
                        RESTAURANT_VIEW_MENU,
                        THEATER_NOW_PLAYING,
                    }
                    public MapAction? @mapAction { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Relationship
                    {
                        OWNER,
                        AUTHORIZED,
                        OTHER,
                    }
                    public Relationship? @relationship { get; set; }
                    public PhoneNumber? @phoneNumber { get; set; }
                    public string? @homePage { get; set; }
                    public string[]? @categories { get; set; }
                }

                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Action
                {
                    OPEN,
                    VIEW,
                    PLAY,
                }
                public Action? @action { get; set; }
                public bool? @isPoweredBy { get; set; }
                public Place? @place { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum BusinessCategory
                {
                    AUTOMOTIVE,
                    BEAUTY,
                    BIKES,
                    BOOKS,
                    CASINO,
                    EDUCATION,
                    EDUCATION_JAPAN,
                    ENTERTAINMENT,
                    EV_CHARGER,
                    FINANCIAL_USD,
                    FINANCIAL_CNY,
                    FINANCIAL_GBP,
                    FINANCIAL_JPY,
                    FINANCIAL_EUR,
                    FITNESS,
                    FOOD_AND_DRINK,
                    GAS,
                    GROCERY,
                    HEALTH_AND_MEDICAL,
                    HOTEL_AND_TRAVEL,
                    MUSIC,
                    PARKING,
                    PET_SERVICES,
                    PROFESSIONAL_SERVICES,
                    SHOPPING,
                    TICKETING,
                    TRANSIT,
                }
                public BusinessCategory? @businessCategory { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum DefaultLanguage
                {
                    AR,
                    CA,
                    CS,
                    DA,
                    DE,
                    EL,
                    EN,
                    ES,
                    FI,
                    FR,
                    HE,
                    HI,
                    HR,
                    HU,
                    ID,
                    IT,
                    JA,
                    KO,
                    MS,
                    NL,
                    NO,
                    PL,
                    PT,
                    RO,
                    RU,
                    SK,
                    SV,
                    TH,
                    TR,
                    UK,
                    VI,
                    ZH,
                }
                public DefaultLanguage? @defaultLanguage { get; set; }
                public bool? @removed { get; set; }
            }

            public class Relationships
            {
                public class AppClip
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClips";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class HeaderImage
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClipAdvancedExperienceImages";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class Localizations
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClipAdvancedExperienceLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public AppClip? @appClip { get; set; }
                public HeaderImage? @headerImage { get; set; }
                public Localizations? @localizations { get; set; }
            }

            public string @type { get; set; } = "appClipAdvancedExperiences";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
        public AppClipAdvancedExperienceLocalizationInlineCreate[]? @included { get; set; }
    }

    public class AppClipAppStoreReviewDetail
    {
        public class Attributes
        {
            public string[]? @invocationUrls { get; set; }
        }

        public class Relationships
        {
            public class AppClipDefaultExperience
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipDefaultExperiences";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppClipDefaultExperience? @appClipDefaultExperience { get; set; }
        }

        public string @type { get; set; } = "appClipAppStoreReviewDetails";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppClipAppStoreReviewDetailCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string[]? @invocationUrls { get; set; }
            }

            public class Relationships
            {
                public class AppClipDefaultExperience
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClipDefaultExperiences";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppClipDefaultExperience @appClipDefaultExperience { get; set; } = new ();
            }

            public string @type { get; set; } = "appClipAppStoreReviewDetails";
            public Attributes? @attributes { get; set; }
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipAppStoreReviewDetailResponse
    {
        public AppClipAppStoreReviewDetail @data { get; set; } = new ();
        public AppClipDefaultExperience[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClipAppStoreReviewDetailUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string[]? @invocationUrls { get; set; }
            }

            public string @type { get; set; } = "appClipAppStoreReviewDetails";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipDefaultExperience
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Action
            {
                OPEN,
                VIEW,
                PLAY,
            }
            public Action? @action { get; set; }
        }

        public class Relationships
        {
            public class AppClip
            {
                public class Data
                {
                    public string @type { get; set; } = "appClips";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class ReleaseWithAppStoreVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppClipDefaultExperienceLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipDefaultExperienceLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppClipAppStoreReviewDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipAppStoreReviewDetails";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public AppClip? @appClip { get; set; }
            public ReleaseWithAppStoreVersion? @releaseWithAppStoreVersion { get; set; }
            public AppClipDefaultExperienceLocalizations? @appClipDefaultExperienceLocalizations { get; set; }
            public AppClipAppStoreReviewDetail? @appClipAppStoreReviewDetail { get; set; }
        }

        public string @type { get; set; } = "appClipDefaultExperiences";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppClipDefaultExperienceCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Action
                {
                    OPEN,
                    VIEW,
                    PLAY,
                }
                public Action? @action { get; set; }
            }

            public class Relationships
            {
                public class AppClip
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClips";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class ReleaseWithAppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppClipDefaultExperienceTemplate
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClipDefaultExperiences";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public AppClip @appClip { get; set; } = new ();
                public ReleaseWithAppStoreVersion? @releaseWithAppStoreVersion { get; set; }
                public AppClipDefaultExperienceTemplate? @appClipDefaultExperienceTemplate { get; set; }
            }

            public string @type { get; set; } = "appClipDefaultExperiences";
            public Attributes? @attributes { get; set; }
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipDefaultExperienceLocalization
    {
        public class Attributes
        {
            public string? @locale { get; set; }
            public string? @subtitle { get; set; }
        }

        public class Relationships
        {
            public class AppClipDefaultExperience
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipDefaultExperiences";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppClipHeaderImage
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipHeaderImages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public AppClipDefaultExperience? @appClipDefaultExperience { get; set; }
            public AppClipHeaderImage? @appClipHeaderImage { get; set; }
        }

        public string @type { get; set; } = "appClipDefaultExperienceLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppClipDefaultExperienceLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @locale { get; set; } = "";
                public string? @subtitle { get; set; }
            }

            public class Relationships
            {
                public class AppClipDefaultExperience
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClipDefaultExperiences";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppClipDefaultExperience @appClipDefaultExperience { get; set; } = new ();
            }

            public string @type { get; set; } = "appClipDefaultExperienceLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipDefaultExperienceLocalizationResponse
    {
        public AppClipDefaultExperienceLocalization @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClipDefaultExperienceLocalizationsResponse
        : IHasNextLink
    {
        public AppClipDefaultExperienceLocalization[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppClipDefaultExperienceLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @subtitle { get; set; }
            }

            public string @type { get; set; } = "appClipDefaultExperienceLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appStoreVersions";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse
    {
        public class Data
        {
            public string @type { get; set; } = "appStoreVersions";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClipDefaultExperienceResponse
    {
        public AppClipDefaultExperience @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClipDefaultExperiencesResponse
        : IHasNextLink
    {
        public AppClipDefaultExperience[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppClipDefaultExperienceUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Action
                {
                    OPEN,
                    VIEW,
                    PLAY,
                }
                public Action? @action { get; set; }
            }

            public class Relationships
            {
                public class ReleaseWithAppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public ReleaseWithAppStoreVersion? @releaseWithAppStoreVersion { get; set; }
            }

            public string @type { get; set; } = "appClipDefaultExperiences";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipDomainStatus
    {
        public class Attributes
        {
            public class Domains
            {
                public string? @domain { get; set; }
                public bool? @isValid { get; set; }
                public string? @lastUpdatedDate { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ErrorCode
                {
                    BAD_HTTP_RESPONSE,
                    BAD_JSON_CONTENT,
                    BAD_PKCS7_SIGNATURE,
                    CANNOT_REACH_AASA_FILE,
                    DNS_ERROR,
                    INSECURE_REDIRECTS_FORBIDDEN,
                    INVALID_ENTITLEMENT_MISSING_SECTION,
                    INVALID_ENTITLEMENT_SYNTAX_ERROR,
                    INVALID_ENTITLEMENT_UNHANDLED_SECTION,
                    INVALID_ENTITLEMENT_UNKNOWN_ID,
                    NETWORK_ERROR,
                    NETWORK_ERROR_TEMPORARY,
                    OTHER_ERROR,
                    TIMEOUT,
                    TLS_ERROR,
                    UNEXPECTED_ERROR,
                }
                public ErrorCode? @errorCode { get; set; }
            }

            public Domains[]? @domains { get; set; }
            public string? @lastUpdatedDate { get; set; }
        }

        public string @type { get; set; } = "appClipDomainStatuses";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppClipDomainStatusResponse
    {
        public AppClipDomainStatus @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClipHeaderImage
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class AppClipDefaultExperienceLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipDefaultExperienceLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppClipDefaultExperienceLocalization? @appClipDefaultExperienceLocalization { get; set; }
        }

        public string @type { get; set; } = "appClipHeaderImages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppClipHeaderImageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class AppClipDefaultExperienceLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClipDefaultExperienceLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppClipDefaultExperienceLocalization @appClipDefaultExperienceLocalization { get; set; } = new ();
            }

            public string @type { get; set; } = "appClipHeaderImages";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipHeaderImageResponse
    {
        public AppClipHeaderImage @data { get; set; } = new ();
        public AppClipDefaultExperienceLocalization[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClipHeaderImageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "appClipHeaderImages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppClipResponse
    {
        public AppClip @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppClipsResponse
        : IHasNextLink
    {
        public AppClip[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppCustomProductPage
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @url { get; set; }
            public bool? @visible { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppCustomProductPageVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPageVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public App? @app { get; set; }
            public AppCustomProductPageVersions? @appCustomProductPageVersions { get; set; }
        }

        public string @type { get; set; } = "appCustomProductPages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppCustomProductPageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class AppCustomProductPageVersions
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCustomProductPageVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public class AppStoreVersionTemplate
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class CustomProductPageTemplate
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCustomProductPages";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public App @app { get; set; } = new ();
                public AppCustomProductPageVersions? @appCustomProductPageVersions { get; set; }
                public AppStoreVersionTemplate? @appStoreVersionTemplate { get; set; }
                public CustomProductPageTemplate? @customProductPageTemplate { get; set; }
            }

            public string @type { get; set; } = "appCustomProductPages";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public AppCustomProductPageLocalizationInlineCreate[]? @included { get; set; }
    }

    public class AppCustomProductPageLocalization
    {
        public class Attributes
        {
            public string? @locale { get; set; }
            public string? @promotionalText { get; set; }
        }

        public class Relationships
        {
            public class AppCustomProductPageVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPageVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppScreenshotSets
            {
                public class Data
                {
                    public string @type { get; set; } = "appScreenshotSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppPreviewSets
            {
                public class Data
                {
                    public string @type { get; set; } = "appPreviewSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppCustomProductPageVersion? @appCustomProductPageVersion { get; set; }
            public AppScreenshotSets? @appScreenshotSets { get; set; }
            public AppPreviewSets? @appPreviewSets { get; set; }
        }

        public string @type { get; set; } = "appCustomProductPageLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppCustomProductPageLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @locale { get; set; } = "";
                public string? @promotionalText { get; set; }
            }

            public class Relationships
            {
                public class AppCustomProductPageVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCustomProductPageVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppCustomProductPageVersion @appCustomProductPageVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "appCustomProductPageLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppCustomProductPageLocalizationInlineCreate
    {
        public class Attributes
        {
            public string @locale { get; set; } = "";
            public string? @promotionalText { get; set; }
        }

        public class Relationships
        {
            public class AppCustomProductPageVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPageVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppCustomProductPageVersion? @appCustomProductPageVersion { get; set; }
        }

        public string @type { get; set; } = "appCustomProductPageLocalizations";
        public string? @id { get; set; }
        public Attributes @attributes { get; set; } = new ();
        public Relationships? @relationships { get; set; }
    }

    public class AppCustomProductPageLocalizationResponse
    {
        public AppCustomProductPageLocalization @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppCustomProductPageLocalizationsResponse
        : IHasNextLink
    {
        public AppCustomProductPageLocalization[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppCustomProductPageLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @promotionalText { get; set; }
            }

            public string @type { get; set; } = "appCustomProductPageLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppCustomProductPageResponse
    {
        public AppCustomProductPage @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppCustomProductPagesResponse
        : IHasNextLink
    {
        public AppCustomProductPage[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppCustomProductPageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public bool? @visible { get; set; }
            }

            public string @type { get; set; } = "appCustomProductPages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppCustomProductPageVersion
    {
        public class Attributes
        {
            public string? @version { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                PREPARE_FOR_SUBMISSION,
                READY_FOR_REVIEW,
                WAITING_FOR_REVIEW,
                IN_REVIEW,
                ACCEPTED,
                APPROVED,
                REPLACED_WITH_NEW_VERSION,
                REJECTED,
            }
            public State? @state { get; set; }
            public string? @deepLink { get; set; }
        }

        public class Relationships
        {
            public class AppCustomProductPage
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPages";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppCustomProductPageLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPageLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppCustomProductPage? @appCustomProductPage { get; set; }
            public AppCustomProductPageLocalizations? @appCustomProductPageLocalizations { get; set; }
        }

        public string @type { get; set; } = "appCustomProductPageVersions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppCustomProductPageVersionCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @deepLink { get; set; }
            }

            public class Relationships
            {
                public class AppCustomProductPage
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCustomProductPages";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class AppCustomProductPageLocalizations
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCustomProductPageLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public AppCustomProductPage @appCustomProductPage { get; set; } = new ();
                public AppCustomProductPageLocalizations? @appCustomProductPageLocalizations { get; set; }
            }

            public string @type { get; set; } = "appCustomProductPageVersions";
            public Attributes? @attributes { get; set; }
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppCustomProductPageVersionInlineCreate
    {
        public class Attributes
        {
            public string? @deepLink { get; set; }
        }

        public class Relationships
        {
            public class AppCustomProductPage
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPages";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppCustomProductPageLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPageLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data[]? @data { get; set; }
            }

            public AppCustomProductPage? @appCustomProductPage { get; set; }
            public AppCustomProductPageLocalizations? @appCustomProductPageLocalizations { get; set; }
        }

        public string @type { get; set; } = "appCustomProductPageVersions";
        public string? @id { get; set; }
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
    }

    public class AppCustomProductPageVersionResponse
    {
        public AppCustomProductPageVersion @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppCustomProductPageVersionsResponse
        : IHasNextLink
    {
        public AppCustomProductPageVersion[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppCustomProductPageVersionUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @deepLink { get; set; }
            }

            public string @type { get; set; } = "appCustomProductPageVersions";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEncryptionDeclaration
    {
        public class Attributes
        {
            public string? @appDescription { get; set; }
            public string? @createdDate { get; set; }
            public bool? @usesEncryption { get; set; }
            public bool? @exempt { get; set; }
            public bool? @containsProprietaryCryptography { get; set; }
            public bool? @containsThirdPartyCryptography { get; set; }
            public bool? @availableOnFrenchStore { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                TV_OS,
                VISION_OS,
            }
            public Platform? @platform { get; set; }
            public string? @uploadedDate { get; set; }
            public string? @documentUrl { get; set; }
            public string? @documentName { get; set; }
            public string? @documentType { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AppEncryptionDeclarationState
            {
                CREATED,
                IN_REVIEW,
                APPROVED,
                REJECTED,
                INVALID,
                EXPIRED,
            }
            public AppEncryptionDeclarationState? @appEncryptionDeclarationState { get; set; }
            public string? @codeValue { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class Builds
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppEncryptionDeclarationDocument
            {
                public class Data
                {
                    public string @type { get; set; } = "appEncryptionDeclarationDocuments";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public App? @app { get; set; }
            public Builds? @builds { get; set; }
            public AppEncryptionDeclarationDocument? @appEncryptionDeclarationDocument { get; set; }
        }

        public string @type { get; set; } = "appEncryptionDeclarations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppEncryptionDeclarationBuildsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class AppEncryptionDeclarationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @appDescription { get; set; } = "";
                public bool @containsProprietaryCryptography { get; set; } = false;
                public bool @containsThirdPartyCryptography { get; set; } = false;
                public bool @availableOnFrenchStore { get; set; } = false;
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "appEncryptionDeclarations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEncryptionDeclarationDocument
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @assetToken { get; set; }
            public string? @downloadUrl { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public string @type { get; set; } = "appEncryptionDeclarationDocuments";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppEncryptionDeclarationDocumentCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class AppEncryptionDeclaration
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appEncryptionDeclarations";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppEncryptionDeclaration @appEncryptionDeclaration { get; set; } = new ();
            }

            public string @type { get; set; } = "appEncryptionDeclarationDocuments";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEncryptionDeclarationDocumentResponse
    {
        public AppEncryptionDeclarationDocument @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppEncryptionDeclarationDocumentUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "appEncryptionDeclarationDocuments";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEncryptionDeclarationResponse
    {
        public AppEncryptionDeclaration @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppEncryptionDeclarationsResponse
        : IHasNextLink
    {
        public AppEncryptionDeclaration[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarationState
    {
        CREATED,
        IN_REVIEW,
        APPROVED,
        REJECTED,
        INVALID,
        EXPIRED,
    }

    public class AppEncryptionDeclarationWithoutIncludesResponse
    {
        public AppEncryptionDeclaration @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppEvent
    {
        public class Attributes
        {
            public class TerritorySchedules
            {
                public string[]? @territories { get; set; }
                public string? @publishStart { get; set; }
                public string? @eventStart { get; set; }
                public string? @eventEnd { get; set; }
            }

            public class ArchivedTerritorySchedules
            {
                public string[]? @territories { get; set; }
                public string? @publishStart { get; set; }
                public string? @eventStart { get; set; }
                public string? @eventEnd { get; set; }
            }

            public string? @referenceName { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Badge
            {
                LIVE_EVENT,
                PREMIERE,
                CHALLENGE,
                COMPETITION,
                NEW_SEASON,
                MAJOR_UPDATE,
                SPECIAL_EVENT,
            }
            public Badge? @badge { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum EventState
            {
                DRAFT,
                READY_FOR_REVIEW,
                WAITING_FOR_REVIEW,
                IN_REVIEW,
                REJECTED,
                ACCEPTED,
                APPROVED,
                PUBLISHED,
                PAST,
                ARCHIVED,
            }
            public EventState? @eventState { get; set; }
            public string? @deepLink { get; set; }
            public string? @purchaseRequirement { get; set; }
            public string? @primaryLocale { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Priority
            {
                HIGH,
                NORMAL,
            }
            public Priority? @priority { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Purpose
            {
                APPROPRIATE_FOR_ALL_USERS,
                ATTRACT_NEW_USERS,
                KEEP_ACTIVE_USERS_INFORMED,
                BRING_BACK_LAPSED_USERS,
            }
            public Purpose? @purpose { get; set; }
            public TerritorySchedules[]? @territorySchedules { get; set; }
            public ArchivedTerritorySchedules[]? @archivedTerritorySchedules { get; set; }
        }

        public class Relationships
        {
            public class Localizations
            {
                public class Data
                {
                    public string @type { get; set; } = "appEventLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Localizations? @localizations { get; set; }
        }

        public string @type { get; set; } = "appEvents";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventAssetType
    {
        EVENT_CARD,
        EVENT_DETAILS_PAGE,
    }

    public class AppEventCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public class TerritorySchedules
                {
                    public string[]? @territories { get; set; }
                    public string? @publishStart { get; set; }
                    public string? @eventStart { get; set; }
                    public string? @eventEnd { get; set; }
                }

                public string @referenceName { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Badge
                {
                    LIVE_EVENT,
                    PREMIERE,
                    CHALLENGE,
                    COMPETITION,
                    NEW_SEASON,
                    MAJOR_UPDATE,
                    SPECIAL_EVENT,
                }
                public Badge? @badge { get; set; }
                public string? @deepLink { get; set; }
                public string? @purchaseRequirement { get; set; }
                public string? @primaryLocale { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Priority
                {
                    HIGH,
                    NORMAL,
                }
                public Priority? @priority { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Purpose
                {
                    APPROPRIATE_FOR_ALL_USERS,
                    ATTRACT_NEW_USERS,
                    KEEP_ACTIVE_USERS_INFORMED,
                    BRING_BACK_LAPSED_USERS,
                }
                public Purpose? @purpose { get; set; }
                public TerritorySchedules[]? @territorySchedules { get; set; }
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "appEvents";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEventLocalization
    {
        public class Attributes
        {
            public string? @locale { get; set; }
            public string? @name { get; set; }
            public string? @shortDescription { get; set; }
            public string? @longDescription { get; set; }
        }

        public class Relationships
        {
            public class AppEvent
            {
                public class Data
                {
                    public string @type { get; set; } = "appEvents";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppEventScreenshots
            {
                public class Data
                {
                    public string @type { get; set; } = "appEventScreenshots";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppEventVideoClips
            {
                public class Data
                {
                    public string @type { get; set; } = "appEventVideoClips";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppEvent? @appEvent { get; set; }
            public AppEventScreenshots? @appEventScreenshots { get; set; }
            public AppEventVideoClips? @appEventVideoClips { get; set; }
        }

        public string @type { get; set; } = "appEventLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppEventLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @locale { get; set; } = "";
                public string? @name { get; set; }
                public string? @shortDescription { get; set; }
                public string? @longDescription { get; set; }
            }

            public class Relationships
            {
                public class AppEvent
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appEvents";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppEvent @appEvent { get; set; } = new ();
            }

            public string @type { get; set; } = "appEventLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEventLocalizationResponse
    {
        public AppEventLocalization @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppEventLocalizationsResponse
        : IHasNextLink
    {
        public AppEventLocalization[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppEventLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @shortDescription { get; set; }
                public string? @longDescription { get; set; }
            }

            public string @type { get; set; } = "appEventLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEventResponse
    {
        public AppEvent @data { get; set; } = new ();
        public AppEventLocalization[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppEventScreenshot
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public string? @assetToken { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AppEventAssetType
            {
                EVENT_CARD,
                EVENT_DETAILS_PAGE,
            }
            public AppEventAssetType? @appEventAssetType { get; set; }
        }

        public class Relationships
        {
            public class AppEventLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "appEventLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppEventLocalization? @appEventLocalization { get; set; }
        }

        public string @type { get; set; } = "appEventScreenshots";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppEventScreenshotCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum AppEventAssetType
                {
                    EVENT_CARD,
                    EVENT_DETAILS_PAGE,
                }
                public AppEventAssetType @appEventAssetType { get; set; } = default;
            }

            public class Relationships
            {
                public class AppEventLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appEventLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppEventLocalization @appEventLocalization { get; set; } = new ();
            }

            public string @type { get; set; } = "appEventScreenshots";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEventScreenshotResponse
    {
        public AppEventScreenshot @data { get; set; } = new ();
        public AppEventLocalization[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppEventScreenshotsResponse
        : IHasNextLink
    {
        public AppEventScreenshot[] @data { get; set; } = { };
        public AppEventLocalization[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppEventScreenshotUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "appEventScreenshots";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEventsResponse
        : IHasNextLink
    {
        public AppEvent[] @data { get; set; } = { };
        public AppEventLocalization[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppEventUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public class TerritorySchedules
                {
                    public string[]? @territories { get; set; }
                    public string? @publishStart { get; set; }
                    public string? @eventStart { get; set; }
                    public string? @eventEnd { get; set; }
                }

                public string? @referenceName { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Badge
                {
                    LIVE_EVENT,
                    PREMIERE,
                    CHALLENGE,
                    COMPETITION,
                    NEW_SEASON,
                    MAJOR_UPDATE,
                    SPECIAL_EVENT,
                }
                public Badge? @badge { get; set; }
                public string? @deepLink { get; set; }
                public string? @purchaseRequirement { get; set; }
                public string? @primaryLocale { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Priority
                {
                    HIGH,
                    NORMAL,
                }
                public Priority? @priority { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Purpose
                {
                    APPROPRIATE_FOR_ALL_USERS,
                    ATTRACT_NEW_USERS,
                    KEEP_ACTIVE_USERS_INFORMED,
                    BRING_BACK_LAPSED_USERS,
                }
                public Purpose? @purpose { get; set; }
                public TerritorySchedules[]? @territorySchedules { get; set; }
            }

            public string @type { get; set; } = "appEvents";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEventVideoClip
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @previewFrameTimeCode { get; set; }
            public string? @videoUrl { get; set; }
            public PreviewFrameImage? @previewFrameImage { get; set; }
            public ImageAsset? @previewImage { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
            public AppMediaVideoState? @videoDeliveryState { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AppEventAssetType
            {
                EVENT_CARD,
                EVENT_DETAILS_PAGE,
            }
            public AppEventAssetType? @appEventAssetType { get; set; }
        }

        public class Relationships
        {
            public class AppEventLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "appEventLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppEventLocalization? @appEventLocalization { get; set; }
        }

        public string @type { get; set; } = "appEventVideoClips";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppEventVideoClipCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
                public string? @previewFrameTimeCode { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum AppEventAssetType
                {
                    EVENT_CARD,
                    EVENT_DETAILS_PAGE,
                }
                public AppEventAssetType @appEventAssetType { get; set; } = default;
            }

            public class Relationships
            {
                public class AppEventLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appEventLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppEventLocalization @appEventLocalization { get; set; } = new ();
            }

            public string @type { get; set; } = "appEventVideoClips";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppEventVideoClipResponse
    {
        public AppEventVideoClip @data { get; set; } = new ();
        public AppEventLocalization[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppEventVideoClipsResponse
        : IHasNextLink
    {
        public AppEventVideoClip[] @data { get; set; } = { };
        public AppEventLocalization[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppEventVideoClipUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @previewFrameTimeCode { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "appEventVideoClips";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppInfo
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AppStoreState
            {
                ACCEPTED,
                DEVELOPER_REMOVED_FROM_SALE,
                DEVELOPER_REJECTED,
                IN_REVIEW,
                INVALID_BINARY,
                METADATA_REJECTED,
                PENDING_APPLE_RELEASE,
                PENDING_CONTRACT,
                PENDING_DEVELOPER_RELEASE,
                PREPARE_FOR_SUBMISSION,
                PREORDER_READY_FOR_SALE,
                PROCESSING_FOR_APP_STORE,
                READY_FOR_REVIEW,
                READY_FOR_SALE,
                REJECTED,
                REMOVED_FROM_SALE,
                WAITING_FOR_EXPORT_COMPLIANCE,
                WAITING_FOR_REVIEW,
                REPLACED_WITH_NEW_VERSION,
                NOT_APPLICABLE,
            }
            public AppStoreState? @appStoreState { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                ACCEPTED,
                DEVELOPER_REJECTED,
                IN_REVIEW,
                PENDING_RELEASE,
                PREPARE_FOR_SUBMISSION,
                READY_FOR_DISTRIBUTION,
                READY_FOR_REVIEW,
                REJECTED,
                REPLACED_WITH_NEW_INFO,
                WAITING_FOR_REVIEW,
            }
            public State? @state { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AppStoreAgeRating
            {
                FOUR_PLUS,
                NINE_PLUS,
                TWELVE_PLUS,
                SEVENTEEN_PLUS,
                UNRATED,
            }
            public AppStoreAgeRating? @appStoreAgeRating { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AustraliaAgeRating
            {
                FIFTEEN,
                EIGHTEEN,
            }
            public AustraliaAgeRating? @australiaAgeRating { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum BrazilAgeRating
            {
                L,
                TEN,
                TWELVE,
                FOURTEEN,
                SIXTEEN,
                EIGHTEEN,
            }
            public BrazilAgeRating? @brazilAgeRating { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum BrazilAgeRatingV2
            {
                SELF_RATED_L,
                SELF_RATED_TEN,
                SELF_RATED_TWELVE,
                SELF_RATED_FOURTEEN,
                SELF_RATED_SIXTEEN,
                SELF_RATED_EIGHTEEN,
                OFFICIAL_L,
                OFFICIAL_TEN,
                OFFICIAL_TWELVE,
                OFFICIAL_FOURTEEN,
                OFFICIAL_SIXTEEN,
                OFFICIAL_EIGHTEEN,
            }
            public BrazilAgeRatingV2? @brazilAgeRatingV2 { get; set; }
            public string? @franceAgeRating { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum KoreaAgeRating
            {
                ALL,
                TWELVE,
                FIFTEEN,
                NINETEEN,
                NOT_APPLICABLE,
            }
            public KoreaAgeRating? @koreaAgeRating { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum KidsAgeBand
            {
                FIVE_AND_UNDER,
                SIX_TO_EIGHT,
                NINE_TO_ELEVEN,
            }
            public KidsAgeBand? @kidsAgeBand { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AgeRatingDeclaration
            {
                public class Data
                {
                    public string @type { get; set; } = "ageRatingDeclarations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppInfoLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "appInfoLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class PrimaryCategory
            {
                public class Data
                {
                    public string @type { get; set; } = "appCategories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class PrimarySubcategoryOne
            {
                public class Data
                {
                    public string @type { get; set; } = "appCategories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class PrimarySubcategoryTwo
            {
                public class Data
                {
                    public string @type { get; set; } = "appCategories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class SecondaryCategory
            {
                public class Data
                {
                    public string @type { get; set; } = "appCategories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class SecondarySubcategoryOne
            {
                public class Data
                {
                    public string @type { get; set; } = "appCategories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class SecondarySubcategoryTwo
            {
                public class Data
                {
                    public string @type { get; set; } = "appCategories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public App? @app { get; set; }
            public AgeRatingDeclaration? @ageRatingDeclaration { get; set; }
            public AppInfoLocalizations? @appInfoLocalizations { get; set; }
            public PrimaryCategory? @primaryCategory { get; set; }
            public PrimarySubcategoryOne? @primarySubcategoryOne { get; set; }
            public PrimarySubcategoryTwo? @primarySubcategoryTwo { get; set; }
            public SecondaryCategory? @secondaryCategory { get; set; }
            public SecondarySubcategoryOne? @secondarySubcategoryOne { get; set; }
            public SecondarySubcategoryTwo? @secondarySubcategoryTwo { get; set; }
        }

        public string @type { get; set; } = "appInfos";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppInfoLocalization
    {
        public class Attributes
        {
            public string? @locale { get; set; }
            public string? @name { get; set; }
            public string? @subtitle { get; set; }
            public string? @privacyPolicyUrl { get; set; }
            public string? @privacyChoicesUrl { get; set; }
            public string? @privacyPolicyText { get; set; }
        }

        public class Relationships
        {
            public class AppInfo
            {
                public class Data
                {
                    public string @type { get; set; } = "appInfos";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppInfo? @appInfo { get; set; }
        }

        public string @type { get; set; } = "appInfoLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppInfoLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @locale { get; set; } = "";
                public string @name { get; set; } = "";
                public string? @subtitle { get; set; }
                public string? @privacyPolicyUrl { get; set; }
                public string? @privacyChoicesUrl { get; set; }
                public string? @privacyPolicyText { get; set; }
            }

            public class Relationships
            {
                public class AppInfo
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appInfos";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppInfo @appInfo { get; set; } = new ();
            }

            public string @type { get; set; } = "appInfoLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppInfoLocalizationResponse
    {
        public AppInfoLocalization @data { get; set; } = new ();
        public AppInfo[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppInfoLocalizationsResponse
        : IHasNextLink
    {
        public AppInfoLocalization[] @data { get; set; } = { };
        public AppInfo[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppInfoLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @subtitle { get; set; }
                public string? @privacyPolicyUrl { get; set; }
                public string? @privacyChoicesUrl { get; set; }
                public string? @privacyPolicyText { get; set; }
            }

            public string @type { get; set; } = "appInfoLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppInfoResponse
    {
        public AppInfo @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppInfosResponse
        : IHasNextLink
    {
        public AppInfo[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppInfoUpdateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class PrimaryCategory
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCategories";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class PrimarySubcategoryOne
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCategories";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class PrimarySubcategoryTwo
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCategories";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class SecondaryCategory
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCategories";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class SecondarySubcategoryOne
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCategories";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class SecondarySubcategoryTwo
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCategories";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public PrimaryCategory? @primaryCategory { get; set; }
                public PrimarySubcategoryOne? @primarySubcategoryOne { get; set; }
                public PrimarySubcategoryTwo? @primarySubcategoryTwo { get; set; }
                public SecondaryCategory? @secondaryCategory { get; set; }
                public SecondarySubcategoryOne? @secondarySubcategoryOne { get; set; }
                public SecondarySubcategoryTwo? @secondarySubcategoryTwo { get; set; }
            }

            public string @type { get; set; } = "appInfos";
            public string @id { get; set; } = "";
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppMediaAssetState
    {
        public AppMediaStateError[]? @errors { get; set; }
        public AppMediaStateError[]? @warnings { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum State
        {
            AWAITING_UPLOAD,
            UPLOAD_COMPLETE,
            COMPLETE,
            FAILED,
        }
        public State? @state { get; set; }
    }

    public class AppMediaPreviewFrameImageState
    {
        public AppMediaStateError[]? @errors { get; set; }
        public AppMediaStateError[]? @warnings { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum State
        {
            PROCESSING,
            COMPLETE,
            FAILED,
        }
        public State? @state { get; set; }
    }

    public class AppMediaStateError
    {
        public string? @code { get; set; }
        public string? @description { get; set; }
    }

    public class AppMediaVideoState
    {
        public AppMediaStateError[]? @errors { get; set; }
        public AppMediaStateError[]? @warnings { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum State
        {
            AWAITING_UPLOAD,
            UPLOAD_COMPLETE,
            PROCESSING,
            COMPLETE,
            FAILED,
        }
        public State? @state { get; set; }
    }

    public class AppPreview
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public string? @previewFrameTimeCode { get; set; }
            public string? @mimeType { get; set; }
            public string? @videoUrl { get; set; }
            public PreviewFrameImage? @previewFrameImage { get; set; }
            public ImageAsset? @previewImage { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
            public AppMediaVideoState? @videoDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class AppPreviewSet
            {
                public class Data
                {
                    public string @type { get; set; } = "appPreviewSets";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppPreviewSet? @appPreviewSet { get; set; }
        }

        public string @type { get; set; } = "appPreviews";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppPreviewCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
                public string? @previewFrameTimeCode { get; set; }
                public string? @mimeType { get; set; }
            }

            public class Relationships
            {
                public class AppPreviewSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appPreviewSets";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppPreviewSet @appPreviewSet { get; set; } = new ();
            }

            public string @type { get; set; } = "appPreviews";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppPreviewResponse
    {
        public AppPreview @data { get; set; } = new ();
        public AppPreviewSet[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppPreviewSet
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum PreviewType
            {
                IPHONE_67,
                IPHONE_61,
                IPHONE_65,
                IPHONE_58,
                IPHONE_55,
                IPHONE_47,
                IPHONE_40,
                IPHONE_35,
                IPAD_PRO_3GEN_129,
                IPAD_PRO_3GEN_11,
                IPAD_PRO_129,
                IPAD_105,
                IPAD_97,
                DESKTOP,
                APPLE_TV,
                APPLE_VISION_PRO,
            }
            public PreviewType? @previewType { get; set; }
        }

        public class Relationships
        {
            public class AppStoreVersionLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppCustomProductPageLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPageLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppStoreVersionExperimentTreatmentLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppPreviews
            {
                public class Data
                {
                    public string @type { get; set; } = "appPreviews";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppStoreVersionLocalization? @appStoreVersionLocalization { get; set; }
            public AppCustomProductPageLocalization? @appCustomProductPageLocalization { get; set; }
            public AppStoreVersionExperimentTreatmentLocalization? @appStoreVersionExperimentTreatmentLocalization { get; set; }
            public AppPreviews? @appPreviews { get; set; }
        }

        public string @type { get; set; } = "appPreviewSets";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppPreviewSetAppPreviewsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appPreviews";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class AppPreviewSetAppPreviewsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "appPreviews";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppPreviewSetCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum PreviewType
                {
                    IPHONE_67,
                    IPHONE_61,
                    IPHONE_65,
                    IPHONE_58,
                    IPHONE_55,
                    IPHONE_47,
                    IPHONE_40,
                    IPHONE_35,
                    IPAD_PRO_3GEN_129,
                    IPAD_PRO_3GEN_11,
                    IPAD_PRO_129,
                    IPAD_105,
                    IPAD_97,
                    DESKTOP,
                    APPLE_TV,
                    APPLE_VISION_PRO,
                }
                public PreviewType @previewType { get; set; } = default;
            }

            public class Relationships
            {
                public class AppStoreVersionLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppCustomProductPageLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCustomProductPageLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppStoreVersionExperimentTreatmentLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public AppStoreVersionLocalization? @appStoreVersionLocalization { get; set; }
                public AppCustomProductPageLocalization? @appCustomProductPageLocalization { get; set; }
                public AppStoreVersionExperimentTreatmentLocalization? @appStoreVersionExperimentTreatmentLocalization { get; set; }
            }

            public string @type { get; set; } = "appPreviewSets";
            public Attributes @attributes { get; set; } = new ();
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppPreviewSetResponse
    {
        public AppPreviewSet @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppPreviewSetsResponse
        : IHasNextLink
    {
        public AppPreviewSet[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppPreviewsResponse
        : IHasNextLink
    {
        public AppPreview[] @data { get; set; } = { };
        public AppPreviewSet[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppPreviewUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public string? @previewFrameTimeCode { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "appPreviews";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppPricePointsV3Response
        : IHasNextLink
    {
        public AppPricePointV3[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppPricePointV3
    {
        public class Attributes
        {
            public string? @customerPrice { get; set; }
            public string? @proceeds { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Equalizations
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public App? @app { get; set; }
            public Equalizations? @equalizations { get; set; }
            public Territory? @territory { get; set; }
        }

        public string @type { get; set; } = "appPricePoints";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppPricePointV3Response
    {
        public AppPricePointV3 @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppPriceSchedule
    {
        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class BaseTerritory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class ManualPrices
            {
                public class Data
                {
                    public string @type { get; set; } = "appPrices";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AutomaticPrices
            {
                public class Data
                {
                    public string @type { get; set; } = "appPrices";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public App? @app { get; set; }
            public BaseTerritory? @baseTerritory { get; set; }
            public ManualPrices? @manualPrices { get; set; }
            public AutomaticPrices? @automaticPrices { get; set; }
        }

        public string @type { get; set; } = "appPriceSchedules";
        public string @id { get; set; } = "";
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppPriceScheduleCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class BaseTerritory
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territories";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class ManualPrices
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appPrices";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public App @app { get; set; } = new ();
                public BaseTerritory @baseTerritory { get; set; } = new ();
                public ManualPrices @manualPrices { get; set; } = new ();
            }

            public string @type { get; set; } = "appPriceSchedules";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public AppPriceV2InlineCreate[]? @included { get; set; }
    }

    public class AppPriceScheduleResponse
    {
        public AppPriceSchedule @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppPricesV2Response
        : IHasNextLink
    {
        public AppPriceV2[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppPriceV2
    {
        public class Attributes
        {
            public bool? @manual { get; set; }
            public string? @startDate { get; set; }
            public string? @endDate { get; set; }
        }

        public class Relationships
        {
            public class AppPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "appPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppPricePoint? @appPricePoint { get; set; }
            public Territory? @territory { get; set; }
        }

        public string @type { get; set; } = "appPrices";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppPriceV2InlineCreate
    {
        public string @type { get; set; } = "appPrices";
        public string? @id { get; set; }
    }

    public class AppPromotedPurchasesLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "promotedPurchases";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class AppPromotedPurchasesLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "promotedPurchases";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppResponse
    {
        public App @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppsBetaTesterUsagesV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @crashCount { get; set; }
                    public int? @sessionCount { get; set; }
                    public int? @feedbackCount { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public class Dimensions
            {
                public class BetaTesters
                {
                    public class Links
                    {
                        public string? @groupBy { get; set; }
                        public string? @related { get; set; }
                    }

                    public Links? @links { get; set; }
                    public string? @data { get; set; }
                }

                public BetaTesters? @betaTesters { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
            public Dimensions? @dimensions { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
        public BetaTester[]? @included { get; set; }
    }

    public class AppScreenshot
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public string? @assetToken { get; set; }
            public string? @assetType { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class AppScreenshotSet
            {
                public class Data
                {
                    public string @type { get; set; } = "appScreenshotSets";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppScreenshotSet? @appScreenshotSet { get; set; }
        }

        public string @type { get; set; } = "appScreenshots";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppScreenshotCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class AppScreenshotSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appScreenshotSets";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppScreenshotSet @appScreenshotSet { get; set; } = new ();
            }

            public string @type { get; set; } = "appScreenshots";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppScreenshotResponse
    {
        public AppScreenshot @data { get; set; } = new ();
        public AppScreenshotSet[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppScreenshotSet
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ScreenshotDisplayType
            {
                APP_IPHONE_67,
                APP_IPHONE_61,
                APP_IPHONE_65,
                APP_IPHONE_58,
                APP_IPHONE_55,
                APP_IPHONE_47,
                APP_IPHONE_40,
                APP_IPHONE_35,
                APP_IPAD_PRO_3GEN_129,
                APP_IPAD_PRO_3GEN_11,
                APP_IPAD_PRO_129,
                APP_IPAD_105,
                APP_IPAD_97,
                APP_DESKTOP,
                APP_WATCH_ULTRA,
                APP_WATCH_SERIES_10,
                APP_WATCH_SERIES_7,
                APP_WATCH_SERIES_4,
                APP_WATCH_SERIES_3,
                APP_APPLE_TV,
                APP_APPLE_VISION_PRO,
                IMESSAGE_APP_IPHONE_67,
                IMESSAGE_APP_IPHONE_61,
                IMESSAGE_APP_IPHONE_65,
                IMESSAGE_APP_IPHONE_58,
                IMESSAGE_APP_IPHONE_55,
                IMESSAGE_APP_IPHONE_47,
                IMESSAGE_APP_IPHONE_40,
                IMESSAGE_APP_IPAD_PRO_3GEN_129,
                IMESSAGE_APP_IPAD_PRO_3GEN_11,
                IMESSAGE_APP_IPAD_PRO_129,
                IMESSAGE_APP_IPAD_105,
                IMESSAGE_APP_IPAD_97,
            }
            public ScreenshotDisplayType? @screenshotDisplayType { get; set; }
        }

        public class Relationships
        {
            public class AppStoreVersionLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppCustomProductPageLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPageLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppStoreVersionExperimentTreatmentLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppScreenshots
            {
                public class Data
                {
                    public string @type { get; set; } = "appScreenshots";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppStoreVersionLocalization? @appStoreVersionLocalization { get; set; }
            public AppCustomProductPageLocalization? @appCustomProductPageLocalization { get; set; }
            public AppStoreVersionExperimentTreatmentLocalization? @appStoreVersionExperimentTreatmentLocalization { get; set; }
            public AppScreenshots? @appScreenshots { get; set; }
        }

        public string @type { get; set; } = "appScreenshotSets";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppScreenshotSetAppScreenshotsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appScreenshots";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class AppScreenshotSetAppScreenshotsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "appScreenshots";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppScreenshotSetCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ScreenshotDisplayType
                {
                    APP_IPHONE_67,
                    APP_IPHONE_61,
                    APP_IPHONE_65,
                    APP_IPHONE_58,
                    APP_IPHONE_55,
                    APP_IPHONE_47,
                    APP_IPHONE_40,
                    APP_IPHONE_35,
                    APP_IPAD_PRO_3GEN_129,
                    APP_IPAD_PRO_3GEN_11,
                    APP_IPAD_PRO_129,
                    APP_IPAD_105,
                    APP_IPAD_97,
                    APP_DESKTOP,
                    APP_WATCH_ULTRA,
                    APP_WATCH_SERIES_10,
                    APP_WATCH_SERIES_7,
                    APP_WATCH_SERIES_4,
                    APP_WATCH_SERIES_3,
                    APP_APPLE_TV,
                    APP_APPLE_VISION_PRO,
                    IMESSAGE_APP_IPHONE_67,
                    IMESSAGE_APP_IPHONE_61,
                    IMESSAGE_APP_IPHONE_65,
                    IMESSAGE_APP_IPHONE_58,
                    IMESSAGE_APP_IPHONE_55,
                    IMESSAGE_APP_IPHONE_47,
                    IMESSAGE_APP_IPHONE_40,
                    IMESSAGE_APP_IPAD_PRO_3GEN_129,
                    IMESSAGE_APP_IPAD_PRO_3GEN_11,
                    IMESSAGE_APP_IPAD_PRO_129,
                    IMESSAGE_APP_IPAD_105,
                    IMESSAGE_APP_IPAD_97,
                }
                public ScreenshotDisplayType @screenshotDisplayType { get; set; } = default;
            }

            public class Relationships
            {
                public class AppStoreVersionLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppCustomProductPageLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCustomProductPageLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppStoreVersionExperimentTreatmentLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public AppStoreVersionLocalization? @appStoreVersionLocalization { get; set; }
                public AppCustomProductPageLocalization? @appCustomProductPageLocalization { get; set; }
                public AppStoreVersionExperimentTreatmentLocalization? @appStoreVersionExperimentTreatmentLocalization { get; set; }
            }

            public string @type { get; set; } = "appScreenshotSets";
            public Attributes @attributes { get; set; } = new ();
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppScreenshotSetResponse
    {
        public AppScreenshotSet @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppScreenshotSetsResponse
        : IHasNextLink
    {
        public AppScreenshotSet[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppScreenshotsResponse
        : IHasNextLink
    {
        public AppScreenshot[] @data { get; set; } = { };
        public AppScreenshotSet[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppScreenshotUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "appScreenshots";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppsResponse
        : IHasNextLink
    {
        public App[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreAgeRating
    {
        FOUR_PLUS,
        NINE_PLUS,
        TWELVE_PLUS,
        SEVENTEEN_PLUS,
        UNRATED,
    }

    public class AppStoreReviewAttachment
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class AppStoreReviewDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreReviewDetails";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppStoreReviewDetail? @appStoreReviewDetail { get; set; }
        }

        public string @type { get; set; } = "appStoreReviewAttachments";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreReviewAttachmentCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class AppStoreReviewDetail
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreReviewDetails";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreReviewDetail @appStoreReviewDetail { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreReviewAttachments";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreReviewAttachmentResponse
    {
        public AppStoreReviewAttachment @data { get; set; } = new ();
        public AppStoreReviewDetail[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreReviewAttachmentsResponse
        : IHasNextLink
    {
        public AppStoreReviewAttachment[] @data { get; set; } = { };
        public AppStoreReviewDetail[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppStoreReviewAttachmentUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "appStoreReviewAttachments";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreReviewDetail
    {
        public class Attributes
        {
            public string? @contactFirstName { get; set; }
            public string? @contactLastName { get; set; }
            public string? @contactPhone { get; set; }
            public string? @contactEmail { get; set; }
            public string? @demoAccountName { get; set; }
            public string? @demoAccountPassword { get; set; }
            public bool? @demoAccountRequired { get; set; }
            public string? @notes { get; set; }
        }

        public class Relationships
        {
            public class AppStoreVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppStoreReviewAttachments
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreReviewAttachments";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppStoreVersion? @appStoreVersion { get; set; }
            public AppStoreReviewAttachments? @appStoreReviewAttachments { get; set; }
        }

        public string @type { get; set; } = "appStoreReviewDetails";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreReviewDetailCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @contactFirstName { get; set; }
                public string? @contactLastName { get; set; }
                public string? @contactPhone { get; set; }
                public string? @contactEmail { get; set; }
                public string? @demoAccountName { get; set; }
                public string? @demoAccountPassword { get; set; }
                public bool? @demoAccountRequired { get; set; }
                public string? @notes { get; set; }
            }

            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreReviewDetails";
            public Attributes? @attributes { get; set; }
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreReviewDetailResponse
    {
        public AppStoreReviewDetail @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreReviewDetailUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @contactFirstName { get; set; }
                public string? @contactLastName { get; set; }
                public string? @contactPhone { get; set; }
                public string? @contactEmail { get; set; }
                public string? @demoAccountName { get; set; }
                public string? @demoAccountPassword { get; set; }
                public bool? @demoAccountRequired { get; set; }
                public string? @notes { get; set; }
            }

            public string @type { get; set; } = "appStoreReviewDetails";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersion
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                TV_OS,
                VISION_OS,
            }
            public Platform? @platform { get; set; }
            public string? @versionString { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AppStoreState
            {
                ACCEPTED,
                DEVELOPER_REMOVED_FROM_SALE,
                DEVELOPER_REJECTED,
                IN_REVIEW,
                INVALID_BINARY,
                METADATA_REJECTED,
                PENDING_APPLE_RELEASE,
                PENDING_CONTRACT,
                PENDING_DEVELOPER_RELEASE,
                PREPARE_FOR_SUBMISSION,
                PREORDER_READY_FOR_SALE,
                PROCESSING_FOR_APP_STORE,
                READY_FOR_REVIEW,
                READY_FOR_SALE,
                REJECTED,
                REMOVED_FROM_SALE,
                WAITING_FOR_EXPORT_COMPLIANCE,
                WAITING_FOR_REVIEW,
                REPLACED_WITH_NEW_VERSION,
                NOT_APPLICABLE,
            }
            public AppStoreState? @appStoreState { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum AppVersionState
            {
                ACCEPTED,
                DEVELOPER_REJECTED,
                IN_REVIEW,
                INVALID_BINARY,
                METADATA_REJECTED,
                PENDING_APPLE_RELEASE,
                PENDING_DEVELOPER_RELEASE,
                PREPARE_FOR_SUBMISSION,
                PROCESSING_FOR_DISTRIBUTION,
                READY_FOR_DISTRIBUTION,
                READY_FOR_REVIEW,
                REJECTED,
                REPLACED_WITH_NEW_VERSION,
                WAITING_FOR_EXPORT_COMPLIANCE,
                WAITING_FOR_REVIEW,
            }
            public AppVersionState? @appVersionState { get; set; }
            public string? @copyright { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ReviewType
            {
                APP_STORE,
                NOTARIZATION,
            }
            public ReviewType? @reviewType { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ReleaseType
            {
                MANUAL,
                AFTER_APPROVAL,
                SCHEDULED,
            }
            public ReleaseType? @releaseType { get; set; }
            public string? @earliestReleaseDate { get; set; }
            public bool? @downloadable { get; set; }
            public string? @createdDate { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AgeRatingDeclaration
            {
                public class Data
                {
                    public string @type { get; set; } = "ageRatingDeclarations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppStoreVersionLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Build
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppStoreVersionPhasedRelease
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionPhasedReleases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class GameCenterAppVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAppVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class RoutingAppCoverage
            {
                public class Data
                {
                    public string @type { get; set; } = "routingAppCoverages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppStoreReviewDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreReviewDetails";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppStoreVersionSubmission
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionSubmissions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppClipDefaultExperience
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipDefaultExperiences";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppStoreVersionExperiments
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperiments";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppStoreVersionExperimentsV2
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperiments";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class CustomerReviews
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class AlternativeDistributionPackage
            {
                public class Data
                {
                    public string @type { get; set; } = "alternativeDistributionPackages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public App? @app { get; set; }
            public AgeRatingDeclaration? @ageRatingDeclaration { get; set; }
            public AppStoreVersionLocalizations? @appStoreVersionLocalizations { get; set; }
            public Build? @build { get; set; }
            public AppStoreVersionPhasedRelease? @appStoreVersionPhasedRelease { get; set; }
            public GameCenterAppVersion? @gameCenterAppVersion { get; set; }
            public RoutingAppCoverage? @routingAppCoverage { get; set; }
            public AppStoreReviewDetail? @appStoreReviewDetail { get; set; }
            public AppStoreVersionSubmission? @appStoreVersionSubmission { get; set; }
            public AppClipDefaultExperience? @appClipDefaultExperience { get; set; }
            public AppStoreVersionExperiments? @appStoreVersionExperiments { get; set; }
            public AppStoreVersionExperimentsV2? @appStoreVersionExperimentsV2 { get; set; }
            public CustomerReviews? @customerReviews { get; set; }
            public AlternativeDistributionPackage? @alternativeDistributionPackage { get; set; }
        }

        public string @type { get; set; } = "appStoreVersions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionAppClipDefaultExperienceLinkageRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appClipDefaultExperiences";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionAppClipDefaultExperienceLinkageResponse
    {
        public class Data
        {
            public string @type { get; set; } = "appClipDefaultExperiences";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionBuildLinkageRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionBuildLinkageResponse
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Platform
                {
                    IOS,
                    MAC_OS,
                    TV_OS,
                    VISION_OS,
                }
                public Platform @platform { get; set; } = default;
                public string @versionString { get; set; } = "";
                public string? @copyright { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ReviewType
                {
                    APP_STORE,
                    NOTARIZATION,
                }
                public ReviewType? @reviewType { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ReleaseType
                {
                    MANUAL,
                    AFTER_APPROVAL,
                    SCHEDULED,
                }
                public ReleaseType? @releaseType { get; set; }
                public string? @earliestReleaseDate { get; set; }
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class AppStoreVersionLocalizations
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public class Build
                {
                    public class Data
                    {
                        public string @type { get; set; } = "builds";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public App @app { get; set; } = new ();
                public AppStoreVersionLocalizations? @appStoreVersionLocalizations { get; set; }
                public Build? @build { get; set; }
            }

            public string @type { get; set; } = "appStoreVersions";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionExperiment
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public int? @trafficProportion { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                PREPARE_FOR_SUBMISSION,
                READY_FOR_REVIEW,
                WAITING_FOR_REVIEW,
                IN_REVIEW,
                ACCEPTED,
                APPROVED,
                REJECTED,
                COMPLETED,
                STOPPED,
            }
            public State? @state { get; set; }
            public bool? @reviewRequired { get; set; }
            public string? @startDate { get; set; }
            public string? @endDate { get; set; }
        }

        public class Relationships
        {
            public class AppStoreVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppStoreVersionExperimentTreatments
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperimentTreatments";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppStoreVersion? @appStoreVersion { get; set; }
            public AppStoreVersionExperimentTreatments? @appStoreVersionExperimentTreatments { get; set; }
        }

        public string @type { get; set; } = "appStoreVersionExperiments";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionExperimentCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public int @trafficProportion { get; set; } = 0;
            }

            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreVersionExperiments";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionExperimentResponse
    {
        public AppStoreVersionExperiment @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionExperimentsResponse
        : IHasNextLink
    {
        public AppStoreVersionExperiment[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppStoreVersionExperimentsV2Response
        : IHasNextLink
    {
        public AppStoreVersionExperimentV2[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppStoreVersionExperimentTreatment
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public ImageAsset? @appIcon { get; set; }
            public string? @appIconName { get; set; }
            public string? @promotedDate { get; set; }
        }

        public class Relationships
        {
            public class AppStoreVersionExperiment
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperiments";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppStoreVersionExperimentV2
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperiments";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppStoreVersionExperimentTreatmentLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppStoreVersionExperiment? @appStoreVersionExperiment { get; set; }
            public AppStoreVersionExperimentV2? @appStoreVersionExperimentV2 { get; set; }
            public AppStoreVersionExperimentTreatmentLocalizations? @appStoreVersionExperimentTreatmentLocalizations { get; set; }
        }

        public string @type { get; set; } = "appStoreVersionExperimentTreatments";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionExperimentTreatmentCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public string? @appIconName { get; set; }
            }

            public class Relationships
            {
                public class AppStoreVersionExperiment
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionExperiments";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppStoreVersionExperimentV2
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionExperiments";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public AppStoreVersionExperiment? @appStoreVersionExperiment { get; set; }
                public AppStoreVersionExperimentV2? @appStoreVersionExperimentV2 { get; set; }
            }

            public string @type { get; set; } = "appStoreVersionExperimentTreatments";
            public Attributes @attributes { get; set; } = new ();
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionExperimentTreatmentLocalization
    {
        public class Attributes
        {
            public string? @locale { get; set; }
        }

        public class Relationships
        {
            public class AppStoreVersionExperimentTreatment
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperimentTreatments";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppScreenshotSets
            {
                public class Data
                {
                    public string @type { get; set; } = "appScreenshotSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppPreviewSets
            {
                public class Data
                {
                    public string @type { get; set; } = "appPreviewSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppStoreVersionExperimentTreatment? @appStoreVersionExperimentTreatment { get; set; }
            public AppScreenshotSets? @appScreenshotSets { get; set; }
            public AppPreviewSets? @appPreviewSets { get; set; }
        }

        public string @type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionExperimentTreatmentLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @locale { get; set; } = "";
            }

            public class Relationships
            {
                public class AppStoreVersionExperimentTreatment
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionExperimentTreatments";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersionExperimentTreatment @appStoreVersionExperimentTreatment { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionExperimentTreatmentLocalizationResponse
    {
        public AppStoreVersionExperimentTreatmentLocalization @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionExperimentTreatmentLocalizationsResponse
        : IHasNextLink
    {
        public AppStoreVersionExperimentTreatmentLocalization[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppStoreVersionExperimentTreatmentResponse
    {
        public AppStoreVersionExperimentTreatment @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionExperimentTreatmentsResponse
        : IHasNextLink
    {
        public AppStoreVersionExperimentTreatment[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppStoreVersionExperimentTreatmentUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @appIconName { get; set; }
            }

            public string @type { get; set; } = "appStoreVersionExperimentTreatments";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionExperimentUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public int? @trafficProportion { get; set; }
                public bool? @started { get; set; }
            }

            public string @type { get; set; } = "appStoreVersionExperiments";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionExperimentV2
    {
        public class Attributes
        {
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                TV_OS,
                VISION_OS,
            }
            public Platform? @platform { get; set; }
            public int? @trafficProportion { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                PREPARE_FOR_SUBMISSION,
                READY_FOR_REVIEW,
                WAITING_FOR_REVIEW,
                IN_REVIEW,
                ACCEPTED,
                APPROVED,
                REJECTED,
                COMPLETED,
                STOPPED,
            }
            public State? @state { get; set; }
            public bool? @reviewRequired { get; set; }
            public string? @startDate { get; set; }
            public string? @endDate { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class LatestControlVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class ControlVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppStoreVersionExperimentTreatments
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperimentTreatments";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public App? @app { get; set; }
            public LatestControlVersion? @latestControlVersion { get; set; }
            public ControlVersions? @controlVersions { get; set; }
            public AppStoreVersionExperimentTreatments? @appStoreVersionExperimentTreatments { get; set; }
        }

        public string @type { get; set; } = "appStoreVersionExperiments";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionExperimentV2CreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Platform
                {
                    IOS,
                    MAC_OS,
                    TV_OS,
                    VISION_OS,
                }
                public Platform @platform { get; set; } = default;
                public int @trafficProportion { get; set; } = 0;
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreVersionExperiments";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionExperimentV2Response
    {
        public AppStoreVersionExperimentV2 @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionExperimentV2UpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public int? @trafficProportion { get; set; }
                public bool? @started { get; set; }
            }

            public string @type { get; set; } = "appStoreVersionExperiments";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionLocalization
    {
        public class Attributes
        {
            public string? @description { get; set; }
            public string? @locale { get; set; }
            public string? @keywords { get; set; }
            public string? @marketingUrl { get; set; }
            public string? @promotionalText { get; set; }
            public string? @supportUrl { get; set; }
            public string? @whatsNew { get; set; }
        }

        public class Relationships
        {
            public class AppStoreVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppScreenshotSets
            {
                public class Data
                {
                    public string @type { get; set; } = "appScreenshotSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppPreviewSets
            {
                public class Data
                {
                    public string @type { get; set; } = "appPreviewSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppStoreVersion? @appStoreVersion { get; set; }
            public AppScreenshotSets? @appScreenshotSets { get; set; }
            public AppPreviewSets? @appPreviewSets { get; set; }
        }

        public string @type { get; set; } = "appStoreVersionLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @description { get; set; }
                public string @locale { get; set; } = "";
                public string? @keywords { get; set; }
                public string? @marketingUrl { get; set; }
                public string? @promotionalText { get; set; }
                public string? @supportUrl { get; set; }
                public string? @whatsNew { get; set; }
            }

            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreVersionLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionLocalizationResponse
    {
        public AppStoreVersionLocalization @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionLocalizationsResponse
        : IHasNextLink
    {
        public AppStoreVersionLocalization[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppStoreVersionLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @description { get; set; }
                public string? @keywords { get; set; }
                public string? @marketingUrl { get; set; }
                public string? @promotionalText { get; set; }
                public string? @supportUrl { get; set; }
                public string? @whatsNew { get; set; }
            }

            public string @type { get; set; } = "appStoreVersionLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionPhasedRelease
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum PhasedReleaseState
            {
                INACTIVE,
                ACTIVE,
                PAUSED,
                COMPLETE,
            }
            public PhasedReleaseState? @phasedReleaseState { get; set; }
            public string? @startDate { get; set; }
            public int? @totalPauseDuration { get; set; }
            public int? @currentDayNumber { get; set; }
        }

        public string @type { get; set; } = "appStoreVersionPhasedReleases";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionPhasedReleaseCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum PhasedReleaseState
                {
                    INACTIVE,
                    ACTIVE,
                    PAUSED,
                    COMPLETE,
                }
                public PhasedReleaseState? @phasedReleaseState { get; set; }
            }

            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreVersionPhasedReleases";
            public Attributes? @attributes { get; set; }
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionPhasedReleaseResponse
    {
        public AppStoreVersionPhasedRelease @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionPhasedReleaseUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum PhasedReleaseState
                {
                    INACTIVE,
                    ACTIVE,
                    PAUSED,
                    COMPLETE,
                }
                public PhasedReleaseState? @phasedReleaseState { get; set; }
            }

            public string @type { get; set; } = "appStoreVersionPhasedReleases";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionPhasedReleaseWithoutIncludesResponse
    {
        public AppStoreVersionPhasedRelease @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionPromotion
    {
        public string @type { get; set; } = "appStoreVersionPromotions";
        public string @id { get; set; } = "";
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionPromotionCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class AppStoreVersionExperimentTreatment
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionExperimentTreatments";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
                public AppStoreVersionExperimentTreatment @appStoreVersionExperimentTreatment { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreVersionPromotions";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionPromotionResponse
    {
        public AppStoreVersionPromotion @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionReleaseRequest
    {
        public string @type { get; set; } = "appStoreVersionReleaseRequests";
        public string @id { get; set; } = "";
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionReleaseRequestCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreVersionReleaseRequests";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionReleaseRequestResponse
    {
        public AppStoreVersionReleaseRequest @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionResponse
    {
        public AppStoreVersion @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionsResponse
        : IHasNextLink
    {
        public AppStoreVersion[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionState
    {
        ACCEPTED,
        DEVELOPER_REMOVED_FROM_SALE,
        DEVELOPER_REJECTED,
        IN_REVIEW,
        INVALID_BINARY,
        METADATA_REJECTED,
        PENDING_APPLE_RELEASE,
        PENDING_CONTRACT,
        PENDING_DEVELOPER_RELEASE,
        PREPARE_FOR_SUBMISSION,
        PREORDER_READY_FOR_SALE,
        PROCESSING_FOR_APP_STORE,
        READY_FOR_REVIEW,
        READY_FOR_SALE,
        REJECTED,
        REMOVED_FROM_SALE,
        WAITING_FOR_EXPORT_COMPLIANCE,
        WAITING_FOR_REVIEW,
        REPLACED_WITH_NEW_VERSION,
        NOT_APPLICABLE,
    }

    public class AppStoreVersionSubmission
    {
        public class Relationships
        {
            public class AppStoreVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppStoreVersion? @appStoreVersion { get; set; }
        }

        public string @type { get; set; } = "appStoreVersionSubmissions";
        public string @id { get; set; } = "";
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class AppStoreVersionSubmissionCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "appStoreVersionSubmissions";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class AppStoreVersionSubmissionResponse
    {
        public AppStoreVersionSubmission @data { get; set; } = new ();
        public AppStoreVersion[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class AppStoreVersionUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @versionString { get; set; }
                public string? @copyright { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ReviewType
                {
                    APP_STORE,
                    NOTARIZATION,
                }
                public ReviewType? @reviewType { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ReleaseType
                {
                    MANUAL,
                    AFTER_APPROVAL,
                    SCHEDULED,
                }
                public ReleaseType? @releaseType { get; set; }
                public string? @earliestReleaseDate { get; set; }
                public bool? @downloadable { get; set; }
            }

            public class Relationships
            {
                public class Build
                {
                    public class Data
                    {
                        public string @type { get; set; } = "builds";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppClipDefaultExperience
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appClipDefaultExperiences";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public Build? @build { get; set; }
                public AppClipDefaultExperience? @appClipDefaultExperience { get; set; }
            }

            public string @type { get; set; } = "appStoreVersions";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class AppsWithoutIncludesResponse
        : IHasNextLink
    {
        public App[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class AppUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @bundleId { get; set; }
                public string? @primaryLocale { get; set; }
                public string? @subscriptionStatusUrl { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum SubscriptionStatusUrlVersion
                {
                    V1,
                    V2,
                }
                public SubscriptionStatusUrlVersion? @subscriptionStatusUrlVersion { get; set; }
                public string? @subscriptionStatusUrlForSandbox { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum SubscriptionStatusUrlVersionForSandbox
                {
                    V1,
                    V2,
                }
                public SubscriptionStatusUrlVersionForSandbox? @subscriptionStatusUrlVersionForSandbox { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ContentRightsDeclaration
                {
                    DOES_NOT_USE_THIRD_PARTY_CONTENT,
                    USES_THIRD_PARTY_CONTENT,
                }
                public ContentRightsDeclaration? @contentRightsDeclaration { get; set; }
                public bool? @streamlinedPurchasingEnabled { get; set; }
            }

            public string @type { get; set; } = "apps";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppVersionState
    {
        ACCEPTED,
        DEVELOPER_REJECTED,
        IN_REVIEW,
        INVALID_BINARY,
        METADATA_REJECTED,
        PENDING_APPLE_RELEASE,
        PENDING_DEVELOPER_RELEASE,
        PREPARE_FOR_SUBMISSION,
        PROCESSING_FOR_DISTRIBUTION,
        READY_FOR_DISTRIBUTION,
        READY_FOR_REVIEW,
        REJECTED,
        REPLACED_WITH_NEW_VERSION,
        WAITING_FOR_EXPORT_COMPLIANCE,
        WAITING_FOR_REVIEW,
    }

    public class AppWithoutIncludesResponse
    {
        public App @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaAppClipInvocation
    {
        public class Attributes
        {
            public string? @url { get; set; }
        }

        public class Relationships
        {
            public class BetaAppClipInvocationLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "betaAppClipInvocationLocalizations";
                    public string @id { get; set; } = "";
                }

                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public BetaAppClipInvocationLocalizations? @betaAppClipInvocationLocalizations { get; set; }
        }

        public string @type { get; set; } = "betaAppClipInvocations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BetaAppClipInvocationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @url { get; set; } = "";
            }

            public class Relationships
            {
                public class BuildBundle
                {
                    public class Data
                    {
                        public string @type { get; set; } = "buildBundles";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class BetaAppClipInvocationLocalizations
                {
                    public class Data
                    {
                        public string @type { get; set; } = "betaAppClipInvocationLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public BuildBundle @buildBundle { get; set; } = new ();
                public BetaAppClipInvocationLocalizations @betaAppClipInvocationLocalizations { get; set; } = new ();
            }

            public string @type { get; set; } = "betaAppClipInvocations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public BetaAppClipInvocationLocalizationInlineCreate[]? @included { get; set; }
    }

    public class BetaAppClipInvocationLocalization
    {
        public class Attributes
        {
            public string? @title { get; set; }
            public string? @locale { get; set; }
        }

        public string @type { get; set; } = "betaAppClipInvocationLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BetaAppClipInvocationLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @title { get; set; } = "";
                public string @locale { get; set; } = "";
            }

            public class Relationships
            {
                public class BetaAppClipInvocation
                {
                    public class Data
                    {
                        public string @type { get; set; } = "betaAppClipInvocations";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public BetaAppClipInvocation @betaAppClipInvocation { get; set; } = new ();
            }

            public string @type { get; set; } = "betaAppClipInvocationLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaAppClipInvocationLocalizationInlineCreate
    {
        public class Attributes
        {
            public string @title { get; set; } = "";
            public string @locale { get; set; } = "";
        }

        public class Relationships
        {
            public class BetaAppClipInvocation
            {
                public class Data
                {
                    public string @type { get; set; } = "betaAppClipInvocations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public BetaAppClipInvocation? @betaAppClipInvocation { get; set; }
        }

        public string @type { get; set; } = "betaAppClipInvocationLocalizations";
        public string? @id { get; set; }
        public Attributes @attributes { get; set; } = new ();
        public Relationships? @relationships { get; set; }
    }

    public class BetaAppClipInvocationLocalizationResponse
    {
        public BetaAppClipInvocationLocalization @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaAppClipInvocationLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @title { get; set; }
            }

            public string @type { get; set; } = "betaAppClipInvocationLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaAppClipInvocationResponse
    {
        public BetaAppClipInvocation @data { get; set; } = new ();
        public BetaAppClipInvocationLocalization[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaAppClipInvocationsResponse
        : IHasNextLink
    {
        public BetaAppClipInvocation[] @data { get; set; } = { };
        public BetaAppClipInvocationLocalization[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaAppClipInvocationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @url { get; set; }
            }

            public string @type { get; set; } = "betaAppClipInvocations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaAppLocalization
    {
        public class Attributes
        {
            public string? @feedbackEmail { get; set; }
            public string? @marketingUrl { get; set; }
            public string? @privacyPolicyUrl { get; set; }
            public string? @tvOsPrivacyPolicy { get; set; }
            public string? @description { get; set; }
            public string? @locale { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public App? @app { get; set; }
        }

        public string @type { get; set; } = "betaAppLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BetaAppLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @feedbackEmail { get; set; }
                public string? @marketingUrl { get; set; }
                public string? @privacyPolicyUrl { get; set; }
                public string? @tvOsPrivacyPolicy { get; set; }
                public string? @description { get; set; }
                public string @locale { get; set; } = "";
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "betaAppLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaAppLocalizationResponse
    {
        public BetaAppLocalization @data { get; set; } = new ();
        public App[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaAppLocalizationsResponse
        : IHasNextLink
    {
        public BetaAppLocalization[] @data { get; set; } = { };
        public App[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaAppLocalizationsWithoutIncludesResponse
        : IHasNextLink
    {
        public BetaAppLocalization[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaAppLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @feedbackEmail { get; set; }
                public string? @marketingUrl { get; set; }
                public string? @privacyPolicyUrl { get; set; }
                public string? @tvOsPrivacyPolicy { get; set; }
                public string? @description { get; set; }
            }

            public string @type { get; set; } = "betaAppLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaAppReviewDetail
    {
        public class Attributes
        {
            public string? @contactFirstName { get; set; }
            public string? @contactLastName { get; set; }
            public string? @contactPhone { get; set; }
            public string? @contactEmail { get; set; }
            public string? @demoAccountName { get; set; }
            public string? @demoAccountPassword { get; set; }
            public bool? @demoAccountRequired { get; set; }
            public string? @notes { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public App? @app { get; set; }
        }

        public string @type { get; set; } = "betaAppReviewDetails";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BetaAppReviewDetailResponse
    {
        public BetaAppReviewDetail @data { get; set; } = new ();
        public App[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaAppReviewDetailsResponse
        : IHasNextLink
    {
        public BetaAppReviewDetail[] @data { get; set; } = { };
        public App[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaAppReviewDetailUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @contactFirstName { get; set; }
                public string? @contactLastName { get; set; }
                public string? @contactPhone { get; set; }
                public string? @contactEmail { get; set; }
                public string? @demoAccountName { get; set; }
                public string? @demoAccountPassword { get; set; }
                public bool? @demoAccountRequired { get; set; }
                public string? @notes { get; set; }
            }

            public string @type { get; set; } = "betaAppReviewDetails";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaAppReviewDetailWithoutIncludesResponse
    {
        public BetaAppReviewDetail @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaAppReviewSubmission
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum BetaReviewState
            {
                WAITING_FOR_REVIEW,
                IN_REVIEW,
                REJECTED,
                APPROVED,
            }
            public BetaReviewState? @betaReviewState { get; set; }
            public string? @submittedDate { get; set; }
        }

        public class Relationships
        {
            public class Build
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public Build? @build { get; set; }
        }

        public string @type { get; set; } = "betaAppReviewSubmissions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BetaAppReviewSubmissionCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class Build
                {
                    public class Data
                    {
                        public string @type { get; set; } = "builds";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Build @build { get; set; } = new ();
            }

            public string @type { get; set; } = "betaAppReviewSubmissions";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaAppReviewSubmissionResponse
    {
        public BetaAppReviewSubmission @data { get; set; } = new ();
        public Build[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaAppReviewSubmissionsResponse
        : IHasNextLink
    {
        public BetaAppReviewSubmission[] @data { get; set; } = { };
        public Build[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaAppReviewSubmissionWithoutIncludesResponse
    {
        public BetaAppReviewSubmission @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaBuildLocalization
    {
        public class Attributes
        {
            public string? @whatsNew { get; set; }
            public string? @locale { get; set; }
        }

        public class Relationships
        {
            public class Build
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public Build? @build { get; set; }
        }

        public string @type { get; set; } = "betaBuildLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BetaBuildLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @whatsNew { get; set; }
                public string @locale { get; set; } = "";
            }

            public class Relationships
            {
                public class Build
                {
                    public class Data
                    {
                        public string @type { get; set; } = "builds";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Build @build { get; set; } = new ();
            }

            public string @type { get; set; } = "betaBuildLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaBuildLocalizationResponse
    {
        public BetaBuildLocalization @data { get; set; } = new ();
        public Build[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaBuildLocalizationsResponse
        : IHasNextLink
    {
        public BetaBuildLocalization[] @data { get; set; } = { };
        public Build[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaBuildLocalizationsWithoutIncludesResponse
        : IHasNextLink
    {
        public BetaBuildLocalization[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaBuildLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @whatsNew { get; set; }
            }

            public string @type { get; set; } = "betaBuildLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaBuildUsagesV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @crashCount { get; set; }
                    public int? @installCount { get; set; }
                    public int? @sessionCount { get; set; }
                    public int? @feedbackCount { get; set; }
                    public int? @inviteCount { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaGroup
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @createdDate { get; set; }
            public bool? @isInternalGroup { get; set; }
            public bool? @hasAccessToAllBuilds { get; set; }
            public bool? @publicLinkEnabled { get; set; }
            public string? @publicLinkId { get; set; }
            public bool? @publicLinkLimitEnabled { get; set; }
            public int? @publicLinkLimit { get; set; }
            public string? @publicLink { get; set; }
            public bool? @feedbackEnabled { get; set; }
            public bool? @iosBuildsAvailableForAppleSiliconMac { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class Builds
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class BetaTesters
            {
                public class Data
                {
                    public string @type { get; set; } = "betaTesters";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public App? @app { get; set; }
            public Builds? @builds { get; set; }
            public BetaTesters? @betaTesters { get; set; }
        }

        public string @type { get; set; } = "betaGroups";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BetaGroupBetaTestersLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class BetaGroupBetaTestersLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaGroupBuildsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class BetaGroupBuildsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaGroupCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public bool? @isInternalGroup { get; set; }
                public bool? @hasAccessToAllBuilds { get; set; }
                public bool? @publicLinkEnabled { get; set; }
                public bool? @publicLinkLimitEnabled { get; set; }
                public int? @publicLinkLimit { get; set; }
                public bool? @feedbackEnabled { get; set; }
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Builds
                {
                    public class Data
                    {
                        public string @type { get; set; } = "builds";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public class BetaTesters
                {
                    public class Data
                    {
                        public string @type { get; set; } = "betaTesters";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public App @app { get; set; } = new ();
                public Builds? @builds { get; set; }
                public BetaTesters? @betaTesters { get; set; }
            }

            public string @type { get; set; } = "betaGroups";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaGroupResponse
    {
        public BetaGroup @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaGroupsResponse
        : IHasNextLink
    {
        public BetaGroup[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaGroupsWithoutIncludesResponse
        : IHasNextLink
    {
        public BetaGroup[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaGroupUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public bool? @publicLinkEnabled { get; set; }
                public bool? @publicLinkLimitEnabled { get; set; }
                public int? @publicLinkLimit { get; set; }
                public bool? @feedbackEnabled { get; set; }
                public bool? @iosBuildsAvailableForAppleSiliconMac { get; set; }
            }

            public string @type { get; set; } = "betaGroups";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaInviteType
    {
        EMAIL,
        PUBLIC_LINK,
    }

    public class BetaLicenseAgreement
    {
        public class Attributes
        {
            public string? @agreementText { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public App? @app { get; set; }
        }

        public string @type { get; set; } = "betaLicenseAgreements";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BetaLicenseAgreementResponse
    {
        public BetaLicenseAgreement @data { get; set; } = new ();
        public App[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaLicenseAgreementsResponse
        : IHasNextLink
    {
        public BetaLicenseAgreement[] @data { get; set; } = { };
        public App[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaLicenseAgreementUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @agreementText { get; set; }
            }

            public string @type { get; set; } = "betaLicenseAgreements";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaLicenseAgreementWithoutIncludesResponse
    {
        public BetaLicenseAgreement @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaReviewState
    {
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        REJECTED,
        APPROVED,
    }

    public class BetaTester
    {
        public class Attributes
        {
            public string? @firstName { get; set; }
            public string? @lastName { get; set; }
            public string? @email { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum InviteType
            {
                EMAIL,
                PUBLIC_LINK,
            }
            public InviteType? @inviteType { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                NOT_INVITED,
                INVITED,
                ACCEPTED,
                INSTALLED,
                REVOKED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class Apps
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class BetaGroups
            {
                public class Data
                {
                    public string @type { get; set; } = "betaGroups";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Builds
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Apps? @apps { get; set; }
            public BetaGroups? @betaGroups { get; set; }
            public Builds? @builds { get; set; }
        }

        public string @type { get; set; } = "betaTesters";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BetaTesterAppsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "apps";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class BetaTesterAppsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "apps";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaTesterBetaGroupsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaGroups";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class BetaTesterBetaGroupsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "betaGroups";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaTesterBuildsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class BetaTesterBuildsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaTesterCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @firstName { get; set; }
                public string? @lastName { get; set; }
                public string @email { get; set; } = "";
            }

            public class Relationships
            {
                public class BetaGroups
                {
                    public class Data
                    {
                        public string @type { get; set; } = "betaGroups";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public class Builds
                {
                    public class Data
                    {
                        public string @type { get; set; } = "builds";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public BetaGroups? @betaGroups { get; set; }
                public Builds? @builds { get; set; }
            }

            public string @type { get; set; } = "betaTesters";
            public Attributes @attributes { get; set; } = new ();
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaTesterInvitation
    {
        public string @type { get; set; } = "betaTesterInvitations";
        public string @id { get; set; } = "";
        public ResourceLinks? @links { get; set; }
    }

    public class BetaTesterInvitationCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class BetaTester
                {
                    public class Data
                    {
                        public string @type { get; set; } = "betaTesters";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public BetaTester @betaTester { get; set; } = new ();
                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "betaTesterInvitations";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class BetaTesterInvitationResponse
    {
        public BetaTesterInvitation @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaTesterResponse
    {
        public BetaTester @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BetaTestersResponse
        : IHasNextLink
    {
        public BetaTester[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesterState
    {
        NOT_INVITED,
        INVITED,
        ACCEPTED,
        INSTALLED,
        REVOKED,
    }

    public class BetaTestersWithoutIncludesResponse
        : IHasNextLink
    {
        public BetaTester[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BetaTesterUsagesV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @crashCount { get; set; }
                    public int? @sessionCount { get; set; }
                    public int? @feedbackCount { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public class Dimensions
            {
                public class Apps
                {
                    public class Links
                    {
                        public string? @groupBy { get; set; }
                        public string? @related { get; set; }
                    }

                    public Links? @links { get; set; }
                    public string? @data { get; set; }
                }

                public Apps? @apps { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
            public Dimensions? @dimensions { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BrazilAgeRating
    {
        L,
        TEN,
        TWELVE,
        FOURTEEN,
        SIXTEEN,
        EIGHTEEN,
    }

    public class Build
    {
        public class Attributes
        {
            public string? @version { get; set; }
            public string? @uploadedDate { get; set; }
            public string? @expirationDate { get; set; }
            public bool? @expired { get; set; }
            public string? @minOsVersion { get; set; }
            public string? @lsMinimumSystemVersion { get; set; }
            public string? @computedMinMacOsVersion { get; set; }
            public ImageAsset? @iconAssetToken { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ProcessingState
            {
                PROCESSING,
                FAILED,
                INVALID,
                VALID,
            }
            public ProcessingState? @processingState { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum BuildAudienceType
            {
                INTERNAL_ONLY,
                APP_STORE_ELIGIBLE,
            }
            public BuildAudienceType? @buildAudienceType { get; set; }
            public bool? @usesNonExemptEncryption { get; set; }
        }

        public class Relationships
        {
            public class PreReleaseVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "preReleaseVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class IndividualTesters
            {
                public class Data
                {
                    public string @type { get; set; } = "betaTesters";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class BetaGroups
            {
                public class Data
                {
                    public string @type { get; set; } = "betaGroups";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class BetaBuildLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "betaBuildLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppEncryptionDeclaration
            {
                public class Data
                {
                    public string @type { get; set; } = "appEncryptionDeclarations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class BetaAppReviewSubmission
            {
                public class Data
                {
                    public string @type { get; set; } = "betaAppReviewSubmissions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class BuildBetaDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "buildBetaDetails";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppStoreVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class Icons
            {
                public class Data
                {
                    public string @type { get; set; } = "buildIcons";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class BuildBundles
            {
                public class Data
                {
                    public string @type { get; set; } = "buildBundles";
                    public string @id { get; set; } = "";
                }

                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class PerfPowerMetrics
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class DiagnosticSignatures
            {
                public RelationshipLinks? @links { get; set; }
            }

            public PreReleaseVersion? @preReleaseVersion { get; set; }
            public IndividualTesters? @individualTesters { get; set; }
            public BetaGroups? @betaGroups { get; set; }
            public BetaBuildLocalizations? @betaBuildLocalizations { get; set; }
            public AppEncryptionDeclaration? @appEncryptionDeclaration { get; set; }
            public BetaAppReviewSubmission? @betaAppReviewSubmission { get; set; }
            public App? @app { get; set; }
            public BuildBetaDetail? @buildBetaDetail { get; set; }
            public AppStoreVersion? @appStoreVersion { get; set; }
            public Icons? @icons { get; set; }
            public BuildBundles? @buildBundles { get; set; }
            public PerfPowerMetrics? @perfPowerMetrics { get; set; }
            public DiagnosticSignatures? @diagnosticSignatures { get; set; }
        }

        public string @type { get; set; } = "builds";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BuildAppEncryptionDeclarationLinkageRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appEncryptionDeclarations";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    public class BuildAppEncryptionDeclarationLinkageResponse
    {
        public class Data
        {
            public string @type { get; set; } = "appEncryptionDeclarations";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildAudienceType
    {
        INTERNAL_ONLY,
        APP_STORE_ELIGIBLE,
    }

    public class BuildBetaDetail
    {
        public class Attributes
        {
            public bool? @autoNotifyEnabled { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum InternalBuildState
            {
                PROCESSING,
                PROCESSING_EXCEPTION,
                MISSING_EXPORT_COMPLIANCE,
                READY_FOR_BETA_TESTING,
                IN_BETA_TESTING,
                EXPIRED,
                IN_EXPORT_COMPLIANCE_REVIEW,
            }
            public InternalBuildState? @internalBuildState { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ExternalBuildState
            {
                PROCESSING,
                PROCESSING_EXCEPTION,
                MISSING_EXPORT_COMPLIANCE,
                READY_FOR_BETA_TESTING,
                IN_BETA_TESTING,
                EXPIRED,
                READY_FOR_BETA_SUBMISSION,
                IN_EXPORT_COMPLIANCE_REVIEW,
                WAITING_FOR_BETA_REVIEW,
                IN_BETA_REVIEW,
                BETA_REJECTED,
                BETA_APPROVED,
            }
            public ExternalBuildState? @externalBuildState { get; set; }
        }

        public class Relationships
        {
            public class Build
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public Build? @build { get; set; }
        }

        public string @type { get; set; } = "buildBetaDetails";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BuildBetaDetailResponse
    {
        public BuildBetaDetail @data { get; set; } = new ();
        public Build[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BuildBetaDetailsResponse
        : IHasNextLink
    {
        public BuildBetaDetail[] @data { get; set; } = { };
        public Build[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BuildBetaDetailUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @autoNotifyEnabled { get; set; }
            }

            public string @type { get; set; } = "buildBetaDetails";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BuildBetaGroupsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaGroups";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class BuildBetaNotification
    {
        public string @type { get; set; } = "buildBetaNotifications";
        public string @id { get; set; } = "";
        public ResourceLinks? @links { get; set; }
    }

    public class BuildBetaNotificationCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class Build
                {
                    public class Data
                    {
                        public string @type { get; set; } = "builds";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Build @build { get; set; } = new ();
            }

            public string @type { get; set; } = "buildBetaNotifications";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class BuildBetaNotificationResponse
    {
        public BuildBetaNotification @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BuildBundle
    {
        public class Attributes
        {
            public class Entitlements
            {
            }

            public string? @bundleId { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum BundleType
            {
                APP,
                APP_CLIP,
            }
            public BundleType? @bundleType { get; set; }
            public string? @sdkBuild { get; set; }
            public string? @platformBuild { get; set; }
            public string? @fileName { get; set; }
            public bool? @hasSirikit { get; set; }
            public bool? @hasOnDemandResources { get; set; }
            public bool? @hasPrerenderedIcon { get; set; }
            public bool? @usesLocationServices { get; set; }
            public bool? @isIosBuildMacAppStoreCompatible { get; set; }
            public bool? @includesSymbols { get; set; }
            public string? @dSYMUrl { get; set; }
            public string[]? @supportedArchitectures { get; set; }
            public string[]? @requiredCapabilities { get; set; }
            public string[]? @deviceProtocols { get; set; }
            public string[]? @locales { get; set; }
            public Entitlements? @entitlements { get; set; }
        }

        public class Relationships
        {
            public class AppClipDomainCacheStatus
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipDomainStatuses";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppClipDomainDebugStatus
            {
                public class Data
                {
                    public string @type { get; set; } = "appClipDomainStatuses";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class BetaAppClipInvocations
            {
                public class Data
                {
                    public string @type { get; set; } = "betaAppClipInvocations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class BuildBundleFileSizes
            {
                public class Data
                {
                    public string @type { get; set; } = "buildBundleFileSizes";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AppClipDomainCacheStatus? @appClipDomainCacheStatus { get; set; }
            public AppClipDomainDebugStatus? @appClipDomainDebugStatus { get; set; }
            public BetaAppClipInvocations? @betaAppClipInvocations { get; set; }
            public BuildBundleFileSizes? @buildBundleFileSizes { get; set; }
        }

        public string @type { get; set; } = "buildBundles";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BuildBundleFileSize
    {
        public class Attributes
        {
            public string? @deviceModel { get; set; }
            public string? @osVersion { get; set; }
            public int? @downloadBytes { get; set; }
            public int? @installBytes { get; set; }
        }

        public string @type { get; set; } = "buildBundleFileSizes";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BuildBundleFileSizesResponse
        : IHasNextLink
    {
        public BuildBundleFileSize[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BuildIcon
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public ImageAsset? @iconAsset { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum IconType
            {
                APP_STORE,
                MESSAGES_APP_STORE,
                WATCH_APP_STORE,
                TV_OS_HOME_SCREEN,
                TV_OS_TOP_SHELF,
                ALTERNATE_EXPERIMENT,
            }
            public IconType? @iconType { get; set; }
        }

        public string @type { get; set; } = "buildIcons";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BuildIconsResponse
        : IHasNextLink
    {
        public BuildIcon[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BuildIconsWithoutIncludesResponse
        : IHasNextLink
    {
        public BuildIcon[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BuildIndividualTestersLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class BuildIndividualTestersLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BuildResponse
    {
        public Build @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BuildsResponse
        : IHasNextLink
    {
        public Build[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BuildsWithoutIncludesResponse
        : IHasNextLink
    {
        public Build[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BuildUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @expired { get; set; }
                public bool? @usesNonExemptEncryption { get; set; }
            }

            public class Relationships
            {
                public class AppEncryptionDeclaration
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appEncryptionDeclarations";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public AppEncryptionDeclaration? @appEncryptionDeclaration { get; set; }
            }

            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BuildWithoutIncludesResponse
    {
        public Build @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BundleId
    {
        public class Attributes
        {
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                UNIVERSAL,
            }
            public Platform? @platform { get; set; }
            public string? @identifier { get; set; }
            public string? @seedId { get; set; }
        }

        public class Relationships
        {
            public class Profiles
            {
                public class Data
                {
                    public string @type { get; set; } = "profiles";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class BundleIdCapabilities
            {
                public class Data
                {
                    public string @type { get; set; } = "bundleIdCapabilities";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public Profiles? @profiles { get; set; }
            public BundleIdCapabilities? @bundleIdCapabilities { get; set; }
            public App? @app { get; set; }
        }

        public string @type { get; set; } = "bundleIds";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BundleIdCapabilitiesResponse
        : IHasNextLink
    {
        public BundleIdCapability[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BundleIdCapabilitiesWithoutIncludesResponse
        : IHasNextLink
    {
        public BundleIdCapability[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BundleIdCapability
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum CapabilityType
            {
                ICLOUD,
                IN_APP_PURCHASE,
                GAME_CENTER,
                PUSH_NOTIFICATIONS,
                WALLET,
                INTER_APP_AUDIO,
                MAPS,
                ASSOCIATED_DOMAINS,
                PERSONAL_VPN,
                APP_GROUPS,
                HEALTHKIT,
                HOMEKIT,
                WIRELESS_ACCESSORY_CONFIGURATION,
                APPLE_PAY,
                DATA_PROTECTION,
                SIRIKIT,
                NETWORK_EXTENSIONS,
                MULTIPATH,
                HOT_SPOT,
                NFC_TAG_READING,
                CLASSKIT,
                AUTOFILL_CREDENTIAL_PROVIDER,
                ACCESS_WIFI_INFORMATION,
                NETWORK_CUSTOM_PROTOCOL,
                COREMEDIA_HLS_LOW_LATENCY,
                SYSTEM_EXTENSION_INSTALL,
                USER_MANAGEMENT,
                APPLE_ID_AUTH,
            }
            public CapabilityType? @capabilityType { get; set; }
            public CapabilitySetting[]? @settings { get; set; }
        }

        public string @type { get; set; } = "bundleIdCapabilities";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class BundleIdCapabilityCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum CapabilityType
                {
                    ICLOUD,
                    IN_APP_PURCHASE,
                    GAME_CENTER,
                    PUSH_NOTIFICATIONS,
                    WALLET,
                    INTER_APP_AUDIO,
                    MAPS,
                    ASSOCIATED_DOMAINS,
                    PERSONAL_VPN,
                    APP_GROUPS,
                    HEALTHKIT,
                    HOMEKIT,
                    WIRELESS_ACCESSORY_CONFIGURATION,
                    APPLE_PAY,
                    DATA_PROTECTION,
                    SIRIKIT,
                    NETWORK_EXTENSIONS,
                    MULTIPATH,
                    HOT_SPOT,
                    NFC_TAG_READING,
                    CLASSKIT,
                    AUTOFILL_CREDENTIAL_PROVIDER,
                    ACCESS_WIFI_INFORMATION,
                    NETWORK_CUSTOM_PROTOCOL,
                    COREMEDIA_HLS_LOW_LATENCY,
                    SYSTEM_EXTENSION_INSTALL,
                    USER_MANAGEMENT,
                    APPLE_ID_AUTH,
                }
                public CapabilityType @capabilityType { get; set; } = default;
                public CapabilitySetting[]? @settings { get; set; }
            }

            public class Relationships
            {
                public class BundleId
                {
                    public class Data
                    {
                        public string @type { get; set; } = "bundleIds";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public BundleId @bundleId { get; set; } = new ();
            }

            public string @type { get; set; } = "bundleIdCapabilities";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class BundleIdCapabilityResponse
    {
        public BundleIdCapability @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BundleIdCapabilityUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum CapabilityType
                {
                    ICLOUD,
                    IN_APP_PURCHASE,
                    GAME_CENTER,
                    PUSH_NOTIFICATIONS,
                    WALLET,
                    INTER_APP_AUDIO,
                    MAPS,
                    ASSOCIATED_DOMAINS,
                    PERSONAL_VPN,
                    APP_GROUPS,
                    HEALTHKIT,
                    HOMEKIT,
                    WIRELESS_ACCESSORY_CONFIGURATION,
                    APPLE_PAY,
                    DATA_PROTECTION,
                    SIRIKIT,
                    NETWORK_EXTENSIONS,
                    MULTIPATH,
                    HOT_SPOT,
                    NFC_TAG_READING,
                    CLASSKIT,
                    AUTOFILL_CREDENTIAL_PROVIDER,
                    ACCESS_WIFI_INFORMATION,
                    NETWORK_CUSTOM_PROTOCOL,
                    COREMEDIA_HLS_LOW_LATENCY,
                    SYSTEM_EXTENSION_INSTALL,
                    USER_MANAGEMENT,
                    APPLE_ID_AUTH,
                }
                public CapabilityType? @capabilityType { get; set; }
                public CapabilitySetting[]? @settings { get; set; }
            }

            public string @type { get; set; } = "bundleIdCapabilities";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BundleIdCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Platform
                {
                    IOS,
                    MAC_OS,
                    UNIVERSAL,
                }
                public Platform @platform { get; set; } = default;
                public string @identifier { get; set; } = "";
                public string? @seedId { get; set; }
            }

            public string @type { get; set; } = "bundleIds";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIdPlatform
    {
        IOS,
        MAC_OS,
        UNIVERSAL,
    }

    public class BundleIdResponse
    {
        public BundleId @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class BundleIdsResponse
        : IHasNextLink
    {
        public BundleId[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class BundleIdUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
            }

            public string @type { get; set; } = "bundleIds";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class BundleIdWithoutIncludesResponse
    {
        public BundleId @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CapabilityOption
    {
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum Key
        {
            XCODE_5,
            XCODE_6,
            COMPLETE_PROTECTION,
            PROTECTED_UNLESS_OPEN,
            PROTECTED_UNTIL_FIRST_USER_AUTH,
            PRIMARY_APP_CONSENT,
        }
        public Key? @key { get; set; }
        public string? @name { get; set; }
        public string? @description { get; set; }
        public bool? @enabledByDefault { get; set; }
        public bool? @enabled { get; set; }
        public bool? @supportsWildcard { get; set; }
    }

    public class CapabilitySetting
    {
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum Key
        {
            ICLOUD_VERSION,
            DATA_PROTECTION_PERMISSION_LEVEL,
            APPLE_ID_AUTH_APP_CONSENT,
        }
        public Key? @key { get; set; }
        public string? @name { get; set; }
        public string? @description { get; set; }
        public bool? @enabledByDefault { get; set; }
        public bool? @visible { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum AllowedInstances
        {
            ENTRY,
            SINGLE,
            MULTIPLE,
        }
        public AllowedInstances? @allowedInstances { get; set; }
        public int? @minInstances { get; set; }
        public CapabilityOption[]? @options { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CapabilityType
    {
        ICLOUD,
        IN_APP_PURCHASE,
        GAME_CENTER,
        PUSH_NOTIFICATIONS,
        WALLET,
        INTER_APP_AUDIO,
        MAPS,
        ASSOCIATED_DOMAINS,
        PERSONAL_VPN,
        APP_GROUPS,
        HEALTHKIT,
        HOMEKIT,
        WIRELESS_ACCESSORY_CONFIGURATION,
        APPLE_PAY,
        DATA_PROTECTION,
        SIRIKIT,
        NETWORK_EXTENSIONS,
        MULTIPATH,
        HOT_SPOT,
        NFC_TAG_READING,
        CLASSKIT,
        AUTOFILL_CREDENTIAL_PROVIDER,
        ACCESS_WIFI_INFORMATION,
        NETWORK_CUSTOM_PROTOCOL,
        COREMEDIA_HLS_LOW_LATENCY,
        SYSTEM_EXTENSION_INSTALL,
        USER_MANAGEMENT,
        APPLE_ID_AUTH,
    }

    public class Certificate
    {
        public class Attributes
        {
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum CertificateType
            {
                IOS_DEVELOPMENT,
                IOS_DISTRIBUTION,
                MAC_APP_DISTRIBUTION,
                MAC_INSTALLER_DISTRIBUTION,
                MAC_APP_DEVELOPMENT,
                DEVELOPER_ID_KEXT,
                DEVELOPER_ID_KEXT_G2,
                DEVELOPER_ID_APPLICATION,
                DEVELOPER_ID_APPLICATION_G2,
                DEVELOPMENT,
                DISTRIBUTION,
                PASS_TYPE_ID,
                PASS_TYPE_ID_WITH_NFC,
            }
            public CertificateType? @certificateType { get; set; }
            public string? @displayName { get; set; }
            public string? @serialNumber { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                UNIVERSAL,
            }
            public Platform? @platform { get; set; }
            public string? @expirationDate { get; set; }
            public string? @certificateContent { get; set; }
        }

        public string @type { get; set; } = "certificates";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CertificateCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @csrContent { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum CertificateType
                {
                    IOS_DEVELOPMENT,
                    IOS_DISTRIBUTION,
                    MAC_APP_DISTRIBUTION,
                    MAC_INSTALLER_DISTRIBUTION,
                    MAC_APP_DEVELOPMENT,
                    DEVELOPER_ID_KEXT,
                    DEVELOPER_ID_KEXT_G2,
                    DEVELOPER_ID_APPLICATION,
                    DEVELOPER_ID_APPLICATION_G2,
                    DEVELOPMENT,
                    DISTRIBUTION,
                    PASS_TYPE_ID,
                    PASS_TYPE_ID_WITH_NFC,
                }
                public CertificateType @certificateType { get; set; } = default;
            }

            public string @type { get; set; } = "certificates";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class CertificateResponse
    {
        public Certificate @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CertificatesResponse
        : IHasNextLink
    {
        public Certificate[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class CertificatesWithoutIncludesResponse
        : IHasNextLink
    {
        public Certificate[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CertificateType
    {
        IOS_DEVELOPMENT,
        IOS_DISTRIBUTION,
        MAC_APP_DISTRIBUTION,
        MAC_INSTALLER_DISTRIBUTION,
        MAC_APP_DEVELOPMENT,
        DEVELOPER_ID_KEXT,
        DEVELOPER_ID_KEXT_G2,
        DEVELOPER_ID_APPLICATION,
        DEVELOPER_ID_APPLICATION_G2,
        DEVELOPMENT,
        DISTRIBUTION,
        PASS_TYPE_ID,
        PASS_TYPE_ID_WITH_NFC,
    }

    public class CiAction
    {
        public class TestConfiguration
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Kind
            {
                USE_SCHEME_SETTINGS,
                SPECIFIC_TEST_PLANS,
            }
            public Kind? @kind { get; set; }
            public string? @testPlanName { get; set; }
            public CiTestDestination[]? @testDestinations { get; set; }
        }

        public string? @name { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum ActionType
        {
            BUILD,
            ANALYZE,
            TEST,
            ARCHIVE,
        }
        public ActionType? @actionType { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum Destination
        {
            ANY_IOS_DEVICE,
            ANY_IOS_SIMULATOR,
            ANY_TVOS_DEVICE,
            ANY_TVOS_SIMULATOR,
            ANY_WATCHOS_DEVICE,
            ANY_WATCHOS_SIMULATOR,
            ANY_MAC,
            ANY_MAC_CATALYST,
            ANY_VISIONOS_DEVICE,
            ANY_VISIONOS_SIMULATOR,
        }
        public Destination? @destination { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum BuildDistributionAudience
        {
            INTERNAL_ONLY,
            APP_STORE_ELIGIBLE,
        }
        public BuildDistributionAudience? @buildDistributionAudience { get; set; }
        public TestConfiguration? @testConfiguration { get; set; }
        public string? @scheme { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum Platform
        {
            MACOS,
            IOS,
            TVOS,
            WATCHOS,
            VISIONOS,
        }
        public Platform? @platform { get; set; }
        public bool? @isRequiredToPass { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiActionType
    {
        BUILD,
        ANALYZE,
        TEST,
        ARCHIVE,
    }

    public class CiArtifact
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum FileType
            {
                ARCHIVE,
                ARCHIVE_EXPORT,
                LOG_BUNDLE,
                RESULT_BUNDLE,
                TEST_PRODUCTS,
                XCODEBUILD_PRODUCTS,
                STAPLED_NOTARIZED_ARCHIVE,
            }
            public FileType? @fileType { get; set; }
            public string? @fileName { get; set; }
            public int? @fileSize { get; set; }
            public string? @downloadUrl { get; set; }
        }

        public string @type { get; set; } = "ciArtifacts";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CiArtifactResponse
    {
        public CiArtifact @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CiArtifactsResponse
        : IHasNextLink
    {
        public CiArtifact[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class CiBranchPatterns
    {
        public class Patterns
        {
            public string? @pattern { get; set; }
            public bool? @isPrefix { get; set; }
        }

        public bool? @isAllMatch { get; set; }
        public Patterns[]? @patterns { get; set; }
    }

    public class CiBranchStartCondition
    {
        public CiBranchPatterns? @source { get; set; }
        public CiFilesAndFoldersRule? @filesAndFoldersRule { get; set; }
        public bool? @autoCancel { get; set; }
    }

    public class CiBuildAction
    {
        public class Attributes
        {
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ActionType
            {
                BUILD,
                ANALYZE,
                TEST,
                ARCHIVE,
            }
            public ActionType? @actionType { get; set; }
            public string? @startedDate { get; set; }
            public string? @finishedDate { get; set; }
            public CiIssueCounts? @issueCounts { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ExecutionProgress
            {
                PENDING,
                RUNNING,
                COMPLETE,
            }
            public ExecutionProgress? @executionProgress { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum CompletionStatus
            {
                SUCCEEDED,
                FAILED,
                ERRORED,
                CANCELED,
                SKIPPED,
            }
            public CompletionStatus? @completionStatus { get; set; }
            public bool? @isRequiredToPass { get; set; }
        }

        public class Relationships
        {
            public class BuildRun
            {
                public class Data
                {
                    public string @type { get; set; } = "ciBuildRuns";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class Artifacts
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class Issues
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class TestResults
            {
                public RelationshipLinks? @links { get; set; }
            }

            public BuildRun? @buildRun { get; set; }
            public Artifacts? @artifacts { get; set; }
            public Issues? @issues { get; set; }
            public TestResults? @testResults { get; set; }
        }

        public string @type { get; set; } = "ciBuildActions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CiBuildActionResponse
    {
        public CiBuildAction @data { get; set; } = new ();
        public CiBuildRun[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CiBuildActionsResponse
        : IHasNextLink
    {
        public CiBuildAction[] @data { get; set; } = { };
        public CiBuildRun[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class CiBuildRun
    {
        public class Attributes
        {
            public class SourceCommit
            {
                public string? @commitSha { get; set; }
                public string? @message { get; set; }
                public CiGitUser? @author { get; set; }
                public CiGitUser? @committer { get; set; }
                public string? @webUrl { get; set; }
            }

            public class DestinationCommit
            {
                public string? @commitSha { get; set; }
                public string? @message { get; set; }
                public CiGitUser? @author { get; set; }
                public CiGitUser? @committer { get; set; }
                public string? @webUrl { get; set; }
            }

            public int? @number { get; set; }
            public string? @createdDate { get; set; }
            public string? @startedDate { get; set; }
            public string? @finishedDate { get; set; }
            public SourceCommit? @sourceCommit { get; set; }
            public DestinationCommit? @destinationCommit { get; set; }
            public bool? @isPullRequestBuild { get; set; }
            public CiIssueCounts? @issueCounts { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ExecutionProgress
            {
                PENDING,
                RUNNING,
                COMPLETE,
            }
            public ExecutionProgress? @executionProgress { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum CompletionStatus
            {
                SUCCEEDED,
                FAILED,
                ERRORED,
                CANCELED,
                SKIPPED,
            }
            public CompletionStatus? @completionStatus { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum StartReason
            {
                GIT_REF_CHANGE,
                MANUAL,
                MANUAL_REBUILD,
                PULL_REQUEST_OPEN,
                PULL_REQUEST_UPDATE,
                SCHEDULE,
            }
            public StartReason? @startReason { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum CancelReason
            {
                AUTOMATICALLY_BY_NEWER_BUILD,
                MANUALLY_BY_USER,
            }
            public CancelReason? @cancelReason { get; set; }
        }

        public class Relationships
        {
            public class Builds
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Workflow
            {
                public class Data
                {
                    public string @type { get; set; } = "ciWorkflows";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Product
            {
                public class Data
                {
                    public string @type { get; set; } = "ciProducts";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SourceBranchOrTag
            {
                public class Data
                {
                    public string @type { get; set; } = "scmGitReferences";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class DestinationBranch
            {
                public class Data
                {
                    public string @type { get; set; } = "scmGitReferences";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Actions
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class PullRequest
            {
                public class Data
                {
                    public string @type { get; set; } = "scmPullRequests";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Builds? @builds { get; set; }
            public Workflow? @workflow { get; set; }
            public Product? @product { get; set; }
            public SourceBranchOrTag? @sourceBranchOrTag { get; set; }
            public DestinationBranch? @destinationBranch { get; set; }
            public Actions? @actions { get; set; }
            public PullRequest? @pullRequest { get; set; }
        }

        public string @type { get; set; } = "ciBuildRuns";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CiBuildRunCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @clean { get; set; }
            }

            public class Relationships
            {
                public class BuildRun
                {
                    public class Data
                    {
                        public string @type { get; set; } = "ciBuildRuns";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class Workflow
                {
                    public class Data
                    {
                        public string @type { get; set; } = "ciWorkflows";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class SourceBranchOrTag
                {
                    public class Data
                    {
                        public string @type { get; set; } = "scmGitReferences";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class PullRequest
                {
                    public class Data
                    {
                        public string @type { get; set; } = "scmPullRequests";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public BuildRun? @buildRun { get; set; }
                public Workflow? @workflow { get; set; }
                public SourceBranchOrTag? @sourceBranchOrTag { get; set; }
                public PullRequest? @pullRequest { get; set; }
            }

            public string @type { get; set; } = "ciBuildRuns";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class CiBuildRunResponse
    {
        public CiBuildRun @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CiBuildRunsResponse
        : IHasNextLink
    {
        public CiBuildRun[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiCompletionStatus
    {
        SUCCEEDED,
        FAILED,
        ERRORED,
        CANCELED,
        SKIPPED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiExecutionProgress
    {
        PENDING,
        RUNNING,
        COMPLETE,
    }

    public class CiFilesAndFoldersRule
    {
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum Mode
        {
            START_IF_ANY_FILE_MATCHES,
            DO_NOT_START_IF_ALL_FILES_MATCH,
        }
        public Mode? @mode { get; set; }
        public CiStartConditionFileMatcher[]? @matchers { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiGitRefKind
    {
        BRANCH,
        TAG,
    }

    public class CiGitUser
    {
        public string? @displayName { get; set; }
        public string? @avatarUrl { get; set; }
    }

    public class CiIssue
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum IssueType
            {
                ANALYZER_WARNING,
                ERROR,
                TEST_FAILURE,
                WARNING,
            }
            public IssueType? @issueType { get; set; }
            public string? @message { get; set; }
            public FileLocation? @fileSource { get; set; }
            public string? @category { get; set; }
        }

        public string @type { get; set; } = "ciIssues";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CiIssueCounts
    {
        public int? @analyzerWarnings { get; set; }
        public int? @errors { get; set; }
        public int? @testFailures { get; set; }
        public int? @warnings { get; set; }
    }

    public class CiIssueResponse
    {
        public CiIssue @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CiIssuesResponse
        : IHasNextLink
    {
        public CiIssue[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class CiMacOsVersion
    {
        public class Attributes
        {
            public string? @version { get; set; }
            public string? @name { get; set; }
        }

        public class Relationships
        {
            public class XcodeVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "ciXcodeVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public XcodeVersions? @xcodeVersions { get; set; }
        }

        public string @type { get; set; } = "ciMacOsVersions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CiMacOsVersionResponse
    {
        public CiMacOsVersion @data { get; set; } = new ();
        public CiXcodeVersion[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CiMacOsVersionsResponse
        : IHasNextLink
    {
        public CiMacOsVersion[] @data { get; set; } = { };
        public CiXcodeVersion[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class CiManualBranchStartCondition
    {
        public CiBranchPatterns? @source { get; set; }
    }

    public class CiManualPullRequestStartCondition
    {
        public CiBranchPatterns? @source { get; set; }
        public CiBranchPatterns? @destination { get; set; }
    }

    public class CiManualTagStartCondition
    {
        public CiTagPatterns? @source { get; set; }
    }

    public class CiProduct
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @createdDate { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ProductType
            {
                APP,
                FRAMEWORK,
            }
            public ProductType? @productType { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class BundleId
            {
                public class Data
                {
                    public string @type { get; set; } = "bundleIds";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Workflows
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class PrimaryRepositories
            {
                public class Data
                {
                    public string @type { get; set; } = "scmRepositories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AdditionalRepositories
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class BuildRuns
            {
                public RelationshipLinks? @links { get; set; }
            }

            public App? @app { get; set; }
            public BundleId? @bundleId { get; set; }
            public Workflows? @workflows { get; set; }
            public PrimaryRepositories? @primaryRepositories { get; set; }
            public AdditionalRepositories? @additionalRepositories { get; set; }
            public BuildRuns? @buildRuns { get; set; }
        }

        public string @type { get; set; } = "ciProducts";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CiProductResponse
    {
        public CiProduct @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CiProductsResponse
        : IHasNextLink
    {
        public CiProduct[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class CiPullRequestStartCondition
    {
        public CiBranchPatterns? @source { get; set; }
        public CiBranchPatterns? @destination { get; set; }
        public CiFilesAndFoldersRule? @filesAndFoldersRule { get; set; }
        public bool? @autoCancel { get; set; }
    }

    public class CiScheduledStartCondition
    {
        public class Schedule
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Frequency
            {
                WEEKLY,
                DAILY,
                HOURLY,
            }
            public Frequency? @frequency { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Days
            {
                SUNDAY,
                MONDAY,
                TUESDAY,
                WEDNESDAY,
                THURSDAY,
                FRIDAY,
                SATURDAY,
            }

            public Days[]? @days { get; set; }
            public int? @hour { get; set; }
            public int? @minute { get; set; }
            public string? @timezone { get; set; }
        }

        public CiBranchPatterns? @source { get; set; }
        public Schedule? @schedule { get; set; }
    }

    public class CiStartConditionFileMatcher
    {
        public string? @directory { get; set; }
        public string? @fileExtension { get; set; }
        public string? @fileName { get; set; }
    }

    public class CiTagPatterns
    {
        public class Patterns
        {
            public string? @pattern { get; set; }
            public bool? @isPrefix { get; set; }
        }

        public bool? @isAllMatch { get; set; }
        public Patterns[]? @patterns { get; set; }
    }

    public class CiTagStartCondition
    {
        public CiTagPatterns? @source { get; set; }
        public CiFilesAndFoldersRule? @filesAndFoldersRule { get; set; }
        public bool? @autoCancel { get; set; }
    }

    public class CiTestDestination
    {
        public string? @deviceTypeName { get; set; }
        public string? @deviceTypeIdentifier { get; set; }
        public string? @runtimeName { get; set; }
        public string? @runtimeIdentifier { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum Kind
        {
            SIMULATOR,
            MAC,
        }
        public Kind? @kind { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiTestDestinationKind
    {
        SIMULATOR,
        MAC,
    }

    public class CiTestResult
    {
        public class Attributes
        {
            public class DestinationTestResults
            {
                public string? @uuid { get; set; }
                public string? @deviceName { get; set; }
                public string? @osVersion { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Status
                {
                    SUCCESS,
                    FAILURE,
                    MIXED,
                    SKIPPED,
                    EXPECTED_FAILURE,
                }
                public Status? @status { get; set; }
                public double? @duration { get; set; }
            }

            public string? @className { get; set; }
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Status
            {
                SUCCESS,
                FAILURE,
                MIXED,
                SKIPPED,
                EXPECTED_FAILURE,
            }
            public Status? @status { get; set; }
            public FileLocation? @fileSource { get; set; }
            public string? @message { get; set; }
            public DestinationTestResults[]? @destinationTestResults { get; set; }
        }

        public string @type { get; set; } = "ciTestResults";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CiTestResultResponse
    {
        public CiTestResult @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CiTestResultsResponse
        : IHasNextLink
    {
        public CiTestResult[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiTestStatus
    {
        SUCCESS,
        FAILURE,
        MIXED,
        SKIPPED,
        EXPECTED_FAILURE,
    }

    public class CiWorkflow
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @description { get; set; }
            public CiBranchStartCondition? @branchStartCondition { get; set; }
            public CiTagStartCondition? @tagStartCondition { get; set; }
            public CiPullRequestStartCondition? @pullRequestStartCondition { get; set; }
            public CiScheduledStartCondition? @scheduledStartCondition { get; set; }
            public CiManualBranchStartCondition? @manualBranchStartCondition { get; set; }
            public CiManualTagStartCondition? @manualTagStartCondition { get; set; }
            public CiManualPullRequestStartCondition? @manualPullRequestStartCondition { get; set; }
            public CiAction[]? @actions { get; set; }
            public bool? @isEnabled { get; set; }
            public bool? @isLockedForEditing { get; set; }
            public bool? @clean { get; set; }
            public string? @containerFilePath { get; set; }
            public string? @lastModifiedDate { get; set; }
        }

        public class Relationships
        {
            public class Product
            {
                public class Data
                {
                    public string @type { get; set; } = "ciProducts";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Repository
            {
                public class Data
                {
                    public string @type { get; set; } = "scmRepositories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class XcodeVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "ciXcodeVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class MacOsVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "ciMacOsVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class BuildRuns
            {
                public RelationshipLinks? @links { get; set; }
            }

            public Product? @product { get; set; }
            public Repository? @repository { get; set; }
            public XcodeVersion? @xcodeVersion { get; set; }
            public MacOsVersion? @macOsVersion { get; set; }
            public BuildRuns? @buildRuns { get; set; }
        }

        public string @type { get; set; } = "ciWorkflows";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CiWorkflowCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public string @description { get; set; } = "";
                public CiBranchStartCondition? @branchStartCondition { get; set; }
                public CiTagStartCondition? @tagStartCondition { get; set; }
                public CiPullRequestStartCondition? @pullRequestStartCondition { get; set; }
                public CiScheduledStartCondition? @scheduledStartCondition { get; set; }
                public CiManualBranchStartCondition? @manualBranchStartCondition { get; set; }
                public CiManualTagStartCondition? @manualTagStartCondition { get; set; }
                public CiManualPullRequestStartCondition? @manualPullRequestStartCondition { get; set; }
                public CiAction[] @actions { get; set; } = { };
                public bool @isEnabled { get; set; } = false;
                public bool? @isLockedForEditing { get; set; }
                public bool @clean { get; set; } = false;
                public string @containerFilePath { get; set; } = "";
            }

            public class Relationships
            {
                public class Product
                {
                    public class Data
                    {
                        public string @type { get; set; } = "ciProducts";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Repository
                {
                    public class Data
                    {
                        public string @type { get; set; } = "scmRepositories";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class XcodeVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "ciXcodeVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class MacOsVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "ciMacOsVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Product @product { get; set; } = new ();
                public Repository @repository { get; set; } = new ();
                public XcodeVersion @xcodeVersion { get; set; } = new ();
                public MacOsVersion @macOsVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "ciWorkflows";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class CiWorkflowResponse
    {
        public CiWorkflow @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CiWorkflowsResponse
        : IHasNextLink
    {
        public CiWorkflow[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class CiWorkflowUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @description { get; set; }
                public CiBranchStartCondition? @branchStartCondition { get; set; }
                public CiTagStartCondition? @tagStartCondition { get; set; }
                public CiPullRequestStartCondition? @pullRequestStartCondition { get; set; }
                public CiScheduledStartCondition? @scheduledStartCondition { get; set; }
                public CiManualBranchStartCondition? @manualBranchStartCondition { get; set; }
                public CiManualTagStartCondition? @manualTagStartCondition { get; set; }
                public CiManualPullRequestStartCondition? @manualPullRequestStartCondition { get; set; }
                public CiAction[]? @actions { get; set; }
                public bool? @isEnabled { get; set; }
                public bool? @isLockedForEditing { get; set; }
                public bool? @clean { get; set; }
                public string? @containerFilePath { get; set; }
            }

            public class Relationships
            {
                public class XcodeVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "ciXcodeVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class MacOsVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "ciMacOsVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public XcodeVersion? @xcodeVersion { get; set; }
                public MacOsVersion? @macOsVersion { get; set; }
            }

            public string @type { get; set; } = "ciWorkflows";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class CiXcodeVersion
    {
        public class Attributes
        {
            public class TestDestinations
            {
                public class AvailableRuntimes
                {
                    public string? @runtimeName { get; set; }
                    public string? @runtimeIdentifier { get; set; }
                }

                public string? @deviceTypeName { get; set; }
                public string? @deviceTypeIdentifier { get; set; }
                public AvailableRuntimes[]? @availableRuntimes { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Kind
                {
                    SIMULATOR,
                    MAC,
                }
                public Kind? @kind { get; set; }
            }

            public string? @version { get; set; }
            public string? @name { get; set; }
            public TestDestinations[]? @testDestinations { get; set; }
        }

        public class Relationships
        {
            public class MacOsVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "ciMacOsVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public MacOsVersions? @macOsVersions { get; set; }
        }

        public string @type { get; set; } = "ciXcodeVersions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CiXcodeVersionResponse
    {
        public CiXcodeVersion @data { get; set; } = new ();
        public CiMacOsVersion[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CiXcodeVersionsResponse
        : IHasNextLink
    {
        public CiXcodeVersion[] @data { get; set; } = { };
        public CiMacOsVersion[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class CustomerReview
    {
        public class Attributes
        {
            public int? @rating { get; set; }
            public string? @title { get; set; }
            public string? @body { get; set; }
            public string? @reviewerNickname { get; set; }
            public string? @createdDate { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Territory
            {
                ABW,
                AFG,
                AGO,
                AIA,
                ALB,
                AND,
                ANT,
                ARE,
                ARG,
                ARM,
                ASM,
                ATG,
                AUS,
                AUT,
                AZE,
                BDI,
                BEL,
                BEN,
                BES,
                BFA,
                BGD,
                BGR,
                BHR,
                BHS,
                BIH,
                BLR,
                BLZ,
                BMU,
                BOL,
                BRA,
                BRB,
                BRN,
                BTN,
                BWA,
                CAF,
                CAN,
                CHE,
                CHL,
                CHN,
                CIV,
                CMR,
                COD,
                COG,
                COK,
                COL,
                COM,
                CPV,
                CRI,
                CUB,
                CUW,
                CXR,
                CYM,
                CYP,
                CZE,
                DEU,
                DJI,
                DMA,
                DNK,
                DOM,
                DZA,
                ECU,
                EGY,
                ERI,
                ESP,
                EST,
                ETH,
                FIN,
                FJI,
                FLK,
                FRA,
                FRO,
                FSM,
                GAB,
                GBR,
                GEO,
                GGY,
                GHA,
                GIB,
                GIN,
                GLP,
                GMB,
                GNB,
                GNQ,
                GRC,
                GRD,
                GRL,
                GTM,
                GUF,
                GUM,
                GUY,
                HKG,
                HND,
                HRV,
                HTI,
                HUN,
                IDN,
                IMN,
                IND,
                IRL,
                IRQ,
                ISL,
                ISR,
                ITA,
                JAM,
                JEY,
                JOR,
                JPN,
                KAZ,
                KEN,
                KGZ,
                KHM,
                KIR,
                KNA,
                KOR,
                KWT,
                LAO,
                LBN,
                LBR,
                LBY,
                LCA,
                LIE,
                LKA,
                LSO,
                LTU,
                LUX,
                LVA,
                MAC,
                MAR,
                MCO,
                MDA,
                MDG,
                MDV,
                MEX,
                MHL,
                MKD,
                MLI,
                MLT,
                MMR,
                MNE,
                MNG,
                MNP,
                MOZ,
                MRT,
                MSR,
                MTQ,
                MUS,
                MWI,
                MYS,
                MYT,
                NAM,
                NCL,
                NER,
                NFK,
                NGA,
                NIC,
                NIU,
                NLD,
                NOR,
                NPL,
                NRU,
                NZL,
                OMN,
                PAK,
                PAN,
                PER,
                PHL,
                PLW,
                PNG,
                POL,
                PRI,
                PRT,
                PRY,
                PSE,
                PYF,
                QAT,
                REU,
                ROU,
                RUS,
                RWA,
                SAU,
                SEN,
                SGP,
                SHN,
                SLB,
                SLE,
                SLV,
                SMR,
                SOM,
                SPM,
                SRB,
                SSD,
                STP,
                SUR,
                SVK,
                SVN,
                SWE,
                SWZ,
                SXM,
                SYC,
                TCA,
                TCD,
                TGO,
                THA,
                TJK,
                TKM,
                TLS,
                TON,
                TTO,
                TUN,
                TUR,
                TUV,
                TWN,
                TZA,
                UGA,
                UKR,
                UMI,
                URY,
                USA,
                UZB,
                VAT,
                VCT,
                VEN,
                VGB,
                VIR,
                VNM,
                VUT,
                WLF,
                WSM,
                YEM,
                ZAF,
                ZMB,
                ZWE,
            }
            public Territory? @territory { get; set; }
        }

        public class Relationships
        {
            public class Response
            {
                public class Data
                {
                    public string @type { get; set; } = "customerReviewResponses";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public Response? @response { get; set; }
        }

        public string @type { get; set; } = "customerReviews";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CustomerReviewResponse
    {
        public CustomerReview @data { get; set; } = new ();
        public CustomerReviewResponseV1[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CustomerReviewResponseV1
    {
        public class Attributes
        {
            public string? @responseBody { get; set; }
            public string? @lastModifiedDate { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                PUBLISHED,
                PENDING_PUBLISH,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class Review
            {
                public class Data
                {
                    public string @type { get; set; } = "customerReviews";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Review? @review { get; set; }
        }

        public string @type { get; set; } = "customerReviewResponses";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class CustomerReviewResponseV1CreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @responseBody { get; set; } = "";
            }

            public class Relationships
            {
                public class Review
                {
                    public class Data
                    {
                        public string @type { get; set; } = "customerReviews";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Review @review { get; set; } = new ();
            }

            public string @type { get; set; } = "customerReviewResponses";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class CustomerReviewResponseV1Response
    {
        public CustomerReviewResponseV1 @data { get; set; } = new ();
        public CustomerReview[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class CustomerReviewsResponse
        : IHasNextLink
    {
        public CustomerReview[] @data { get; set; } = { };
        public CustomerReviewResponseV1[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class Device
    {
        public class Attributes
        {
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                UNIVERSAL,
            }
            public Platform? @platform { get; set; }
            public string? @udid { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum DeviceClass
            {
                APPLE_WATCH,
                IPAD,
                IPHONE,
                IPOD,
                APPLE_TV,
                MAC,
            }
            public DeviceClass? @deviceClass { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Status
            {
                ENABLED,
                DISABLED,
            }
            public Status? @status { get; set; }
            public string? @model { get; set; }
            public string? @addedDate { get; set; }
        }

        public string @type { get; set; } = "devices";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class DeviceCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Platform
                {
                    IOS,
                    MAC_OS,
                    UNIVERSAL,
                }
                public Platform @platform { get; set; } = default;
                public string @udid { get; set; } = "";
            }

            public string @type { get; set; } = "devices";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class DeviceResponse
    {
        public Device @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class DevicesResponse
        : IHasNextLink
    {
        public Device[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class DevicesWithoutIncludesResponse
        : IHasNextLink
    {
        public Device[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class DeviceUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Status
                {
                    ENABLED,
                    DISABLED,
                }
                public Status? @status { get; set; }
            }

            public string @type { get; set; } = "devices";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class DiagnosticInsight
    {
        public class ReferenceVersions
        {
            public string? @version { get; set; }
            public double? @value { get; set; }
        }

        public string? @insightType { get; set; }
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum Direction
        {
            UP,
            DOWN,
            UNDEFINED,
        }
        public Direction? @direction { get; set; }
        public ReferenceVersions[]? @referenceVersions { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum DiagnosticInsightDirection
    {
        UP,
        DOWN,
        UNDEFINED,
    }

    public class DiagnosticLog
    {
        public string @type { get; set; } = "diagnosticLogs";
        public string @id { get; set; } = "";
        public ResourceLinks? @links { get; set; }
    }

    public class DiagnosticLogCallStackNode
    {
        public int? @sampleCount { get; set; }
        public bool? @isBlameFrame { get; set; }
        public string? @symbolName { get; set; }
        public string? @insightsCategory { get; set; }
        public string? @offsetIntoSymbol { get; set; }
        public string? @binaryName { get; set; }
        public string? @fileName { get; set; }
        public string? @binaryUUID { get; set; }
        public string? @lineNumber { get; set; }
        public string? @address { get; set; }
        public string? @offsetIntoBinaryTextSegment { get; set; }
        public string? @rawFrame { get; set; }
        public DiagnosticLogCallStackNode[]? @subFrames { get; set; }
    }

    public class diagnosticLogs
    {
        public class ProductData
        {
            public class DiagnosticInsights
            {
                public string? @insightsURL { get; set; }
                public string? @insightsCategory { get; set; }
                public string? @insightsString { get; set; }
            }

            public class DiagnosticLogs
            {
                public class CallStackTree
                {
                    public class CallStacks
                    {
                        public DiagnosticLogCallStackNode[]? @callStackRootFrames { get; set; }
                    }

                    public bool? @callStackPerThread { get; set; }
                    public CallStacks[]? @callStacks { get; set; }
                }

                public class DiagnosticMetaData
                {
                    public string? @bundleId { get; set; }
                    public string? @event { get; set; }
                    public string? @osVersion { get; set; }
                    public string? @appVersion { get; set; }
                    public string? @writesCaused { get; set; }
                    public string? @deviceType { get; set; }
                    public string? @platformArchitecture { get; set; }
                    public string? @eventDetail { get; set; }
                    public string? @buildVersion { get; set; }
                }

                public CallStackTree[]? @callStackTree { get; set; }
                public DiagnosticMetaData? @diagnosticMetaData { get; set; }
            }

            public string? @signatureId { get; set; }
            public DiagnosticInsights[]? @diagnosticInsights { get; set; }
            public DiagnosticLogs[]? @diagnosticLogs { get; set; }
        }

        public ProductData[]? @productData { get; set; }
        public string? @version { get; set; }
    }

    public class DiagnosticSignature
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum DiagnosticType
            {
                DISK_WRITES,
                HANGS,
                LAUNCHES,
            }
            public DiagnosticType? @diagnosticType { get; set; }
            public string? @signature { get; set; }
            public double? @weight { get; set; }
            public DiagnosticInsight? @insight { get; set; }
        }

        public class Relationships
        {
            public class Logs
            {
                public RelationshipLinks? @links { get; set; }
            }

            public Logs? @logs { get; set; }
        }

        public string @type { get; set; } = "diagnosticSignatures";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class DiagnosticSignaturesResponse
        : IHasNextLink
    {
        public DiagnosticSignature[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class DocumentLinks
    {
        public string @self { get; set; } = "";
    }

    public class EndAppAvailabilityPreOrder
    {
        public string @type { get; set; } = "endAppAvailabilityPreOrders";
        public string @id { get; set; } = "";
        public ResourceLinks? @links { get; set; }
    }

    public class EndAppAvailabilityPreOrderCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class TerritoryAvailabilities
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territoryAvailabilities";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public TerritoryAvailabilities @territoryAvailabilities { get; set; } = new ();
            }

            public string @type { get; set; } = "endAppAvailabilityPreOrders";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class EndAppAvailabilityPreOrderResponse
    {
        public EndAppAvailabilityPreOrder @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class EndUserLicenseAgreement
    {
        public class Attributes
        {
            public string? @agreementText { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Territories
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public App? @app { get; set; }
            public Territories? @territories { get; set; }
        }

        public string @type { get; set; } = "endUserLicenseAgreements";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class EndUserLicenseAgreementCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @agreementText { get; set; } = "";
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Territories
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territories";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public App @app { get; set; } = new ();
                public Territories @territories { get; set; } = new ();
            }

            public string @type { get; set; } = "endUserLicenseAgreements";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class EndUserLicenseAgreementResponse
    {
        public EndUserLicenseAgreement @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class EndUserLicenseAgreementUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @agreementText { get; set; }
            }

            public class Relationships
            {
                public class Territories
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territories";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public Territories? @territories { get; set; }
            }

            public string @type { get; set; } = "endUserLicenseAgreements";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class EndUserLicenseAgreementWithoutIncludesResponse
    {
        public EndUserLicenseAgreement @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class ErrorLinks
    {
        public string? @about { get; set; }
        public object? @associated { get; set; }
    }

    public class ErrorResponse
    {
        public class Errors
        {
            public class Meta
            {
            }

            public string? @id { get; set; }
            public string @status { get; set; } = "";
            public string @code { get; set; } = "";
            public string @title { get; set; } = "";
            public string @detail { get; set; } = "";
            public object? @source { get; set; }
            public ErrorLinks? @links { get; set; }
            public Meta? @meta { get; set; }
        }

        public Errors[]? @errors { get; set; }
    }

    public class ErrorSourceParameter
    {
        public string @parameter { get; set; } = "";
    }

    public class ErrorSourcePointer
    {
        public string @pointer { get; set; } = "";
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ExternalBetaState
    {
        PROCESSING,
        PROCESSING_EXCEPTION,
        MISSING_EXPORT_COMPLIANCE,
        READY_FOR_BETA_TESTING,
        IN_BETA_TESTING,
        EXPIRED,
        READY_FOR_BETA_SUBMISSION,
        IN_EXPORT_COMPLIANCE_REVIEW,
        WAITING_FOR_BETA_REVIEW,
        IN_BETA_REVIEW,
        BETA_REJECTED,
        BETA_APPROVED,
    }

    public class FileLocation
    {
        public string? @path { get; set; }
        public int? @lineNumber { get; set; }
    }

    public class GameCenterAchievement
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
            public string? @vendorIdentifier { get; set; }
            public int? @points { get; set; }
            public bool? @showBeforeEarned { get; set; }
            public bool? @repeatable { get; set; }
            public bool? @archived { get; set; }
        }

        public class Relationships
        {
            public class GameCenterDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterDetails";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GameCenterGroup
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterGroups";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GroupAchievement
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievements";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class Localizations
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievementLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Releases
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievementReleases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public GameCenterDetail? @gameCenterDetail { get; set; }
            public GameCenterGroup? @gameCenterGroup { get; set; }
            public GroupAchievement? @groupAchievement { get; set; }
            public Localizations? @localizations { get; set; }
            public Releases? @releases { get; set; }
        }

        public string @type { get; set; } = "gameCenterAchievements";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterAchievementCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @referenceName { get; set; } = "";
                public string @vendorIdentifier { get; set; } = "";
                public int @points { get; set; } = 0;
                public bool @showBeforeEarned { get; set; } = false;
                public bool @repeatable { get; set; } = false;
            }

            public class Relationships
            {
                public class GameCenterDetail
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterDetails";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class GameCenterGroup
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterGroups";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public GameCenterDetail? @gameCenterDetail { get; set; }
                public GameCenterGroup? @gameCenterGroup { get; set; }
            }

            public string @type { get; set; } = "gameCenterAchievements";
            public Attributes @attributes { get; set; } = new ();
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterAchievementGroupAchievementLinkageRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterAchievementGroupAchievementLinkageResponse
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterAchievementImage
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class GameCenterAchievementLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievementLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public GameCenterAchievementLocalization? @gameCenterAchievementLocalization { get; set; }
        }

        public string @type { get; set; } = "gameCenterAchievementImages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterAchievementImageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class GameCenterAchievementLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterAchievementLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterAchievementLocalization @gameCenterAchievementLocalization { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterAchievementImages";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterAchievementImageResponse
    {
        public GameCenterAchievementImage @data { get; set; } = new ();
        public GameCenterAchievementLocalization[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterAchievementImageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "gameCenterAchievementImages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterAchievementLocalization
    {
        public class Attributes
        {
            public string? @locale { get; set; }
            public string? @name { get; set; }
            public string? @beforeEarnedDescription { get; set; }
            public string? @afterEarnedDescription { get; set; }
        }

        public class Relationships
        {
            public class GameCenterAchievement
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievements";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class GameCenterAchievementImage
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievementImages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public GameCenterAchievement? @gameCenterAchievement { get; set; }
            public GameCenterAchievementImage? @gameCenterAchievementImage { get; set; }
        }

        public string @type { get; set; } = "gameCenterAchievementLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterAchievementLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @locale { get; set; } = "";
                public string @name { get; set; } = "";
                public string @beforeEarnedDescription { get; set; } = "";
                public string @afterEarnedDescription { get; set; } = "";
            }

            public class Relationships
            {
                public class GameCenterAchievement
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterAchievements";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterAchievement @gameCenterAchievement { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterAchievementLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterAchievementLocalizationResponse
    {
        public GameCenterAchievementLocalization @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterAchievementLocalizationsResponse
        : IHasNextLink
    {
        public GameCenterAchievementLocalization[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterAchievementLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @beforeEarnedDescription { get; set; }
                public string? @afterEarnedDescription { get; set; }
            }

            public string @type { get; set; } = "gameCenterAchievementLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterAchievementRelease
    {
        public class Attributes
        {
            public bool? @live { get; set; }
        }

        public class Relationships
        {
            public class GameCenterDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterDetails";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GameCenterAchievement
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievements";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public GameCenterDetail? @gameCenterDetail { get; set; }
            public GameCenterAchievement? @gameCenterAchievement { get; set; }
        }

        public string @type { get; set; } = "gameCenterAchievementReleases";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterAchievementReleaseCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class GameCenterDetail
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterDetails";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class GameCenterAchievement
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterAchievements";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterDetail @gameCenterDetail { get; set; } = new ();
                public GameCenterAchievement @gameCenterAchievement { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterAchievementReleases";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterAchievementReleaseResponse
    {
        public GameCenterAchievementRelease @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterAchievementReleasesResponse
        : IHasNextLink
    {
        public GameCenterAchievementRelease[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterAchievementResponse
    {
        public GameCenterAchievement @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterAchievementsResponse
        : IHasNextLink
    {
        public GameCenterAchievement[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterAchievementUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @referenceName { get; set; }
                public int? @points { get; set; }
                public bool? @showBeforeEarned { get; set; }
                public bool? @repeatable { get; set; }
                public bool? @archived { get; set; }
            }

            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterAppVersion
    {
        public class Attributes
        {
            public bool? @enabled { get; set; }
        }

        public class Relationships
        {
            public class CompatibilityVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAppVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppStoreVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public CompatibilityVersions? @compatibilityVersions { get; set; }
            public AppStoreVersion? @appStoreVersion { get; set; }
        }

        public string @type { get; set; } = "gameCenterAppVersions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterAppVersionCompatibilityVersionsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAppVersions";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class GameCenterAppVersionCompatibilityVersionsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAppVersions";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterAppVersionCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterAppVersions";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterAppVersionResponse
    {
        public GameCenterAppVersion @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterAppVersionsResponse
        : IHasNextLink
    {
        public GameCenterAppVersion[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterAppVersionUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @enabled { get; set; }
            }

            public string @type { get; set; } = "gameCenterAppVersions";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterDetail
    {
        public class Attributes
        {
            public bool? @arcadeEnabled { get; set; }
            public bool? @challengeEnabled { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GameCenterAppVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAppVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class GameCenterGroup
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterGroups";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class GameCenterLeaderboards
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboards";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class GameCenterLeaderboardSets
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class GameCenterAchievements
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievements";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class DefaultLeaderboard
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboards";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class DefaultGroupLeaderboard
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboards";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AchievementReleases
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievementReleases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class LeaderboardReleases
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardReleases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class LeaderboardSetReleases
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSetReleases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public App? @app { get; set; }
            public GameCenterAppVersions? @gameCenterAppVersions { get; set; }
            public GameCenterGroup? @gameCenterGroup { get; set; }
            public GameCenterLeaderboards? @gameCenterLeaderboards { get; set; }
            public GameCenterLeaderboardSets? @gameCenterLeaderboardSets { get; set; }
            public GameCenterAchievements? @gameCenterAchievements { get; set; }
            public DefaultLeaderboard? @defaultLeaderboard { get; set; }
            public DefaultGroupLeaderboard? @defaultGroupLeaderboard { get; set; }
            public AchievementReleases? @achievementReleases { get; set; }
            public LeaderboardReleases? @leaderboardReleases { get; set; }
            public LeaderboardSetReleases? @leaderboardSetReleases { get; set; }
        }

        public string @type { get; set; } = "gameCenterDetails";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterDetailCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @challengeEnabled { get; set; }
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterDetails";
            public Attributes? @attributes { get; set; }
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterDetailGameCenterAchievementsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class GameCenterDetailGameCenterAchievementsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterDetailGameCenterLeaderboardsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class GameCenterDetailGameCenterLeaderboardsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterDetailResponse
    {
        public GameCenterDetail @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterDetailsResponse
        : IHasNextLink
    {
        public GameCenterDetail[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterDetailUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @challengeEnabled { get; set; }
            }

            public class Relationships
            {
                public class GameCenterGroup
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterGroups";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class DefaultLeaderboard
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboards";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class DefaultGroupLeaderboard
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboards";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public GameCenterGroup? @gameCenterGroup { get; set; }
                public DefaultLeaderboard? @defaultLeaderboard { get; set; }
                public DefaultGroupLeaderboard? @defaultGroupLeaderboard { get; set; }
            }

            public string @type { get; set; } = "gameCenterDetails";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterEnabledVersion
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                TV_OS,
                VISION_OS,
            }
            public Platform? @platform { get; set; }
            public string? @versionString { get; set; }
            public ImageAsset? @iconAsset { get; set; }
        }

        public class Relationships
        {
            public class CompatibleVersions
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterEnabledVersions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public CompatibleVersions? @compatibleVersions { get; set; }
            public App? @app { get; set; }
        }

        public string @type { get; set; } = "gameCenterEnabledVersions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterEnabledVersionCompatibleVersionsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterEnabledVersions";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class GameCenterEnabledVersionCompatibleVersionsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterEnabledVersions";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterEnabledVersionsResponse
        : IHasNextLink
    {
        public GameCenterEnabledVersion[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterGroup
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
        }

        public class Relationships
        {
            public class GameCenterDetails
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterDetails";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class GameCenterLeaderboards
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboards";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class GameCenterLeaderboardSets
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class GameCenterAchievements
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterAchievements";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public GameCenterDetails? @gameCenterDetails { get; set; }
            public GameCenterLeaderboards? @gameCenterLeaderboards { get; set; }
            public GameCenterLeaderboardSets? @gameCenterLeaderboardSets { get; set; }
            public GameCenterAchievements? @gameCenterAchievements { get; set; }
        }

        public string @type { get; set; } = "gameCenterGroups";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterGroupCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @referenceName { get; set; }
            }

            public string @type { get; set; } = "gameCenterGroups";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterGroupGameCenterAchievementsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class GameCenterGroupGameCenterAchievementsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterGroupGameCenterLeaderboardsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class GameCenterGroupGameCenterLeaderboardsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterGroupResponse
    {
        public GameCenterGroup @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterGroupsResponse
        : IHasNextLink
    {
        public GameCenterGroup[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterGroupUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @referenceName { get; set; }
            }

            public string @type { get; set; } = "gameCenterGroups";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboard
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum DefaultFormatter
            {
                INTEGER,
                DECIMAL_POINT_1_PLACE,
                DECIMAL_POINT_2_PLACE,
                DECIMAL_POINT_3_PLACE,
                ELAPSED_TIME_MILLISECOND,
                ELAPSED_TIME_CENTISECOND,
                ELAPSED_TIME_MINUTE,
                ELAPSED_TIME_SECOND,
                MONEY_POUND_DECIMAL,
                MONEY_POUND,
                MONEY_DOLLAR_DECIMAL,
                MONEY_DOLLAR,
                MONEY_EURO_DECIMAL,
                MONEY_EURO,
                MONEY_FRANC_DECIMAL,
                MONEY_FRANC,
                MONEY_KRONER_DECIMAL,
                MONEY_KRONER,
                MONEY_YEN,
            }
            public DefaultFormatter? @defaultFormatter { get; set; }
            public string? @referenceName { get; set; }
            public string? @vendorIdentifier { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum SubmissionType
            {
                BEST_SCORE,
                MOST_RECENT_SCORE,
            }
            public SubmissionType? @submissionType { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ScoreSortType
            {
                ASC,
                DESC,
            }
            public ScoreSortType? @scoreSortType { get; set; }
            public string? @scoreRangeStart { get; set; }
            public string? @scoreRangeEnd { get; set; }
            public string? @recurrenceStartDate { get; set; }
            public string? @recurrenceDuration { get; set; }
            public string? @recurrenceRule { get; set; }
            public bool? @archived { get; set; }
        }

        public class Relationships
        {
            public class GameCenterDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterDetails";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GameCenterGroup
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterGroups";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GroupLeaderboard
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboards";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class GameCenterLeaderboardSets
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSets";
                    public string @id { get; set; } = "";
                }

                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Localizations
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Releases
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardReleases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public GameCenterDetail? @gameCenterDetail { get; set; }
            public GameCenterGroup? @gameCenterGroup { get; set; }
            public GroupLeaderboard? @groupLeaderboard { get; set; }
            public GameCenterLeaderboardSets? @gameCenterLeaderboardSets { get; set; }
            public Localizations? @localizations { get; set; }
            public Releases? @releases { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboards";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum DefaultFormatter
                {
                    INTEGER,
                    DECIMAL_POINT_1_PLACE,
                    DECIMAL_POINT_2_PLACE,
                    DECIMAL_POINT_3_PLACE,
                    ELAPSED_TIME_MILLISECOND,
                    ELAPSED_TIME_CENTISECOND,
                    ELAPSED_TIME_MINUTE,
                    ELAPSED_TIME_SECOND,
                    MONEY_POUND_DECIMAL,
                    MONEY_POUND,
                    MONEY_DOLLAR_DECIMAL,
                    MONEY_DOLLAR,
                    MONEY_EURO_DECIMAL,
                    MONEY_EURO,
                    MONEY_FRANC_DECIMAL,
                    MONEY_FRANC,
                    MONEY_KRONER_DECIMAL,
                    MONEY_KRONER,
                    MONEY_YEN,
                }
                public DefaultFormatter @defaultFormatter { get; set; } = default;
                public string @referenceName { get; set; } = "";
                public string @vendorIdentifier { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum SubmissionType
                {
                    BEST_SCORE,
                    MOST_RECENT_SCORE,
                }
                public SubmissionType @submissionType { get; set; } = default;
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ScoreSortType
                {
                    ASC,
                    DESC,
                }
                public ScoreSortType @scoreSortType { get; set; } = default;
                public string? @scoreRangeStart { get; set; }
                public string? @scoreRangeEnd { get; set; }
                public string? @recurrenceStartDate { get; set; }
                public string? @recurrenceDuration { get; set; }
                public string? @recurrenceRule { get; set; }
            }

            public class Relationships
            {
                public class GameCenterDetail
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterDetails";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class GameCenterGroup
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterGroups";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class GameCenterLeaderboardSets
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboardSets";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public GameCenterDetail? @gameCenterDetail { get; set; }
                public GameCenterGroup? @gameCenterGroup { get; set; }
                public GameCenterLeaderboardSets? @gameCenterLeaderboardSets { get; set; }
            }

            public string @type { get; set; } = "gameCenterLeaderboards";
            public Attributes @attributes { get; set; } = new ();
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardEntrySubmission
    {
        public class Attributes
        {
            public string? @bundleId { get; set; }
            public string[]? @challengeIds { get; set; }
            public string? @context { get; set; }
            public string? @scopedPlayerId { get; set; }
            public string? @score { get; set; }
            public string? @submittedDate { get; set; }
            public string? @vendorIdentifier { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboardEntrySubmissions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardEntrySubmissionCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @bundleId { get; set; } = "";
                public string[]? @challengeIds { get; set; }
                public string? @context { get; set; }
                public string @scopedPlayerId { get; set; } = "";
                public string @score { get; set; } = "";
                public string? @submittedDate { get; set; }
                public string @vendorIdentifier { get; set; } = "";
            }

            public string @type { get; set; } = "gameCenterLeaderboardEntrySubmissions";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardEntrySubmissionResponse
    {
        public GameCenterLeaderboardEntrySubmission @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardFormatter
    {
        INTEGER,
        DECIMAL_POINT_1_PLACE,
        DECIMAL_POINT_2_PLACE,
        DECIMAL_POINT_3_PLACE,
        ELAPSED_TIME_MILLISECOND,
        ELAPSED_TIME_CENTISECOND,
        ELAPSED_TIME_MINUTE,
        ELAPSED_TIME_SECOND,
        MONEY_POUND_DECIMAL,
        MONEY_POUND,
        MONEY_DOLLAR_DECIMAL,
        MONEY_DOLLAR,
        MONEY_EURO_DECIMAL,
        MONEY_EURO,
        MONEY_FRANC_DECIMAL,
        MONEY_FRANC,
        MONEY_KRONER_DECIMAL,
        MONEY_KRONER,
        MONEY_YEN,
    }

    public class GameCenterLeaderboardGroupLeaderboardLinkageRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardGroupLeaderboardLinkageResponse
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardImage
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class GameCenterLeaderboardLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public GameCenterLeaderboardLocalization? @gameCenterLeaderboardLocalization { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboardImages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardImageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class GameCenterLeaderboardLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboardLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterLeaderboardLocalization @gameCenterLeaderboardLocalization { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterLeaderboardImages";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardImageResponse
    {
        public GameCenterLeaderboardImage @data { get; set; } = new ();
        public GameCenterLeaderboardLocalization[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardImageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "gameCenterLeaderboardImages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardLocalization
    {
        public class Attributes
        {
            public string? @locale { get; set; }
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum FormatterOverride
            {
                INTEGER,
                DECIMAL_POINT_1_PLACE,
                DECIMAL_POINT_2_PLACE,
                DECIMAL_POINT_3_PLACE,
                ELAPSED_TIME_MILLISECOND,
                ELAPSED_TIME_CENTISECOND,
                ELAPSED_TIME_MINUTE,
                ELAPSED_TIME_SECOND,
                MONEY_POUND_DECIMAL,
                MONEY_POUND,
                MONEY_DOLLAR_DECIMAL,
                MONEY_DOLLAR,
                MONEY_EURO_DECIMAL,
                MONEY_EURO,
                MONEY_FRANC_DECIMAL,
                MONEY_FRANC,
                MONEY_KRONER_DECIMAL,
                MONEY_KRONER,
                MONEY_YEN,
            }
            public FormatterOverride? @formatterOverride { get; set; }
            public string? @formatterSuffix { get; set; }
            public string? @formatterSuffixSingular { get; set; }
        }

        public class Relationships
        {
            public class GameCenterLeaderboard
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboards";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GameCenterLeaderboardImage
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardImages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public GameCenterLeaderboard? @gameCenterLeaderboard { get; set; }
            public GameCenterLeaderboardImage? @gameCenterLeaderboardImage { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboardLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @locale { get; set; } = "";
                public string @name { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum FormatterOverride
                {
                    INTEGER,
                    DECIMAL_POINT_1_PLACE,
                    DECIMAL_POINT_2_PLACE,
                    DECIMAL_POINT_3_PLACE,
                    ELAPSED_TIME_MILLISECOND,
                    ELAPSED_TIME_CENTISECOND,
                    ELAPSED_TIME_MINUTE,
                    ELAPSED_TIME_SECOND,
                    MONEY_POUND_DECIMAL,
                    MONEY_POUND,
                    MONEY_DOLLAR_DECIMAL,
                    MONEY_DOLLAR,
                    MONEY_EURO_DECIMAL,
                    MONEY_EURO,
                    MONEY_FRANC_DECIMAL,
                    MONEY_FRANC,
                    MONEY_KRONER_DECIMAL,
                    MONEY_KRONER,
                    MONEY_YEN,
                }
                public FormatterOverride? @formatterOverride { get; set; }
                public string? @formatterSuffix { get; set; }
                public string? @formatterSuffixSingular { get; set; }
            }

            public class Relationships
            {
                public class GameCenterLeaderboard
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboards";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterLeaderboard @gameCenterLeaderboard { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterLeaderboardLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardLocalizationResponse
    {
        public GameCenterLeaderboardLocalization @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardLocalizationsResponse
        : IHasNextLink
    {
        public GameCenterLeaderboardLocalization[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterLeaderboardLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum FormatterOverride
                {
                    INTEGER,
                    DECIMAL_POINT_1_PLACE,
                    DECIMAL_POINT_2_PLACE,
                    DECIMAL_POINT_3_PLACE,
                    ELAPSED_TIME_MILLISECOND,
                    ELAPSED_TIME_CENTISECOND,
                    ELAPSED_TIME_MINUTE,
                    ELAPSED_TIME_SECOND,
                    MONEY_POUND_DECIMAL,
                    MONEY_POUND,
                    MONEY_DOLLAR_DECIMAL,
                    MONEY_DOLLAR,
                    MONEY_EURO_DECIMAL,
                    MONEY_EURO,
                    MONEY_FRANC_DECIMAL,
                    MONEY_FRANC,
                    MONEY_KRONER_DECIMAL,
                    MONEY_KRONER,
                    MONEY_YEN,
                }
                public FormatterOverride? @formatterOverride { get; set; }
                public string? @formatterSuffix { get; set; }
                public string? @formatterSuffixSingular { get; set; }
            }

            public string @type { get; set; } = "gameCenterLeaderboardLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardRelease
    {
        public class Attributes
        {
            public bool? @live { get; set; }
        }

        public class Relationships
        {
            public class GameCenterDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterDetails";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GameCenterLeaderboard
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboards";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public GameCenterDetail? @gameCenterDetail { get; set; }
            public GameCenterLeaderboard? @gameCenterLeaderboard { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboardReleases";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardReleaseCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class GameCenterDetail
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterDetails";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class GameCenterLeaderboard
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboards";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterDetail @gameCenterDetail { get; set; } = new ();
                public GameCenterLeaderboard @gameCenterLeaderboard { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterLeaderboardReleases";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardReleaseResponse
    {
        public GameCenterLeaderboardRelease @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardReleasesResponse
        : IHasNextLink
    {
        public GameCenterLeaderboardRelease[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterLeaderboardResponse
    {
        public GameCenterLeaderboard @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardSet
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
            public string? @vendorIdentifier { get; set; }
        }

        public class Relationships
        {
            public class GameCenterDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterDetails";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GameCenterGroup
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterGroups";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GroupLeaderboardSet
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class Localizations
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSetLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class GameCenterLeaderboards
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboards";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Releases
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSetReleases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public GameCenterDetail? @gameCenterDetail { get; set; }
            public GameCenterGroup? @gameCenterGroup { get; set; }
            public GroupLeaderboardSet? @groupLeaderboardSet { get; set; }
            public Localizations? @localizations { get; set; }
            public GameCenterLeaderboards? @gameCenterLeaderboards { get; set; }
            public Releases? @releases { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboardSets";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardSetCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @referenceName { get; set; } = "";
                public string @vendorIdentifier { get; set; } = "";
            }

            public class Relationships
            {
                public class GameCenterDetail
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterDetails";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class GameCenterGroup
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterGroups";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class GameCenterLeaderboards
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboards";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public GameCenterDetail? @gameCenterDetail { get; set; }
                public GameCenterGroup? @gameCenterGroup { get; set; }
                public GameCenterLeaderboards? @gameCenterLeaderboards { get; set; }
            }

            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public Attributes @attributes { get; set; } = new ();
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetImage
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class GameCenterLeaderboardSetLocalization
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSetLocalizations";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public GameCenterLeaderboardSetLocalization? @gameCenterLeaderboardSetLocalization { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboardSetImages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardSetImageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class GameCenterLeaderboardSetLocalization
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboardSetLocalizations";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterLeaderboardSetLocalization @gameCenterLeaderboardSetLocalization { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterLeaderboardSetImages";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetImageResponse
    {
        public GameCenterLeaderboardSetImage @data { get; set; } = new ();
        public GameCenterLeaderboardSetLocalization[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetImageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "gameCenterLeaderboardSetImages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetLocalization
    {
        public class Attributes
        {
            public string? @locale { get; set; }
            public string? @name { get; set; }
        }

        public class Relationships
        {
            public class GameCenterLeaderboardSet
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSets";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GameCenterLeaderboardSetImage
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSetImages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public GameCenterLeaderboardSet? @gameCenterLeaderboardSet { get; set; }
            public GameCenterLeaderboardSetImage? @gameCenterLeaderboardSetImage { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboardSetLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardSetLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @locale { get; set; } = "";
                public string @name { get; set; } = "";
            }

            public class Relationships
            {
                public class GameCenterLeaderboardSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboardSets";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterLeaderboardSet @gameCenterLeaderboardSet { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterLeaderboardSetLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetLocalizationResponse
    {
        public GameCenterLeaderboardSetLocalization @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetLocalizationsResponse
        : IHasNextLink
    {
        public GameCenterLeaderboardSetLocalization[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterLeaderboardSetLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
            }

            public string @type { get; set; } = "gameCenterLeaderboardSetLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetMemberLocalization
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @locale { get; set; }
        }

        public class Relationships
        {
            public class GameCenterLeaderboardSet
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSets";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class GameCenterLeaderboard
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboards";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public GameCenterLeaderboardSet? @gameCenterLeaderboardSet { get; set; }
            public GameCenterLeaderboard? @gameCenterLeaderboard { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboardSetMemberLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardSetMemberLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @locale { get; set; }
            }

            public class Relationships
            {
                public class GameCenterLeaderboardSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboardSets";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class GameCenterLeaderboard
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboards";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterLeaderboardSet @gameCenterLeaderboardSet { get; set; } = new ();
                public GameCenterLeaderboard @gameCenterLeaderboard { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterLeaderboardSetMemberLocalizations";
            public Attributes? @attributes { get; set; }
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetMemberLocalizationResponse
    {
        public GameCenterLeaderboardSetMemberLocalization @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetMemberLocalizationsResponse
        : IHasNextLink
    {
        public GameCenterLeaderboardSetMemberLocalization[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterLeaderboardSetMemberLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
            }

            public string @type { get; set; } = "gameCenterLeaderboardSetMemberLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetRelease
    {
        public class Attributes
        {
            public bool? @live { get; set; }
        }

        public class Relationships
        {
            public class GameCenterDetail
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterDetails";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GameCenterLeaderboardSet
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterLeaderboardSets";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public GameCenterDetail? @gameCenterDetail { get; set; }
            public GameCenterLeaderboardSet? @gameCenterLeaderboardSet { get; set; }
        }

        public string @type { get; set; } = "gameCenterLeaderboardSetReleases";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterLeaderboardSetReleaseCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class GameCenterDetail
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterDetails";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class GameCenterLeaderboardSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterLeaderboardSets";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public GameCenterDetail @gameCenterDetail { get; set; } = new ();
                public GameCenterLeaderboardSet @gameCenterLeaderboardSet { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterLeaderboardSetReleases";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetReleaseResponse
    {
        public GameCenterLeaderboardSetRelease @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetReleasesResponse
        : IHasNextLink
    {
        public GameCenterLeaderboardSetRelease[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterLeaderboardSetResponse
    {
        public GameCenterLeaderboardSet @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterLeaderboardSetsResponse
        : IHasNextLink
    {
        public GameCenterLeaderboardSet[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterLeaderboardSetUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @referenceName { get; set; }
            }

            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterLeaderboardsResponse
        : IHasNextLink
    {
        public GameCenterLeaderboard[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterLeaderboardUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum DefaultFormatter
                {
                    INTEGER,
                    DECIMAL_POINT_1_PLACE,
                    DECIMAL_POINT_2_PLACE,
                    DECIMAL_POINT_3_PLACE,
                    ELAPSED_TIME_MILLISECOND,
                    ELAPSED_TIME_CENTISECOND,
                    ELAPSED_TIME_MINUTE,
                    ELAPSED_TIME_SECOND,
                    MONEY_POUND_DECIMAL,
                    MONEY_POUND,
                    MONEY_DOLLAR_DECIMAL,
                    MONEY_DOLLAR,
                    MONEY_EURO_DECIMAL,
                    MONEY_EURO,
                    MONEY_FRANC_DECIMAL,
                    MONEY_FRANC,
                    MONEY_KRONER_DECIMAL,
                    MONEY_KRONER,
                    MONEY_YEN,
                }
                public DefaultFormatter? @defaultFormatter { get; set; }
                public string? @referenceName { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum SubmissionType
                {
                    BEST_SCORE,
                    MOST_RECENT_SCORE,
                }
                public SubmissionType? @submissionType { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ScoreSortType
                {
                    ASC,
                    DESC,
                }
                public ScoreSortType? @scoreSortType { get; set; }
                public string? @scoreRangeStart { get; set; }
                public string? @scoreRangeEnd { get; set; }
                public string? @recurrenceStartDate { get; set; }
                public string? @recurrenceDuration { get; set; }
                public string? @recurrenceRule { get; set; }
                public bool? @archived { get; set; }
            }

            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterMatchmakingAppRequestsV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @count { get; set; }
                    public double? @averageSecondsInQueue { get; set; }
                    public double? @p50SecondsInQueue { get; set; }
                    public double? @p95SecondsInQueue { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public class Dimensions
            {
                public class Result
                {
                    public class Links
                    {
                        public string? @groupBy { get; set; }
                    }

                    public Links? @links { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Data
                    {
                        MATCHED,
                        CANCELED,
                        EXPIRED,
                    }
                    public Data? @data { get; set; }
                }

                public Result? @result { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
            public Dimensions? @dimensions { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Granularity
            {
                P1D,
                PT1H,
                PT15M,
            }
            public Granularity? @granularity { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @count { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public class Dimensions
            {
                public class Result
                {
                    public class Links
                    {
                        public string? @groupBy { get; set; }
                    }

                    public Links? @links { get; set; }
                    public string? @data { get; set; }
                }

                public class GameCenterMatchmakingQueue
                {
                    public class Links
                    {
                        public string? @groupBy { get; set; }
                        public string? @related { get; set; }
                    }

                    public Links? @links { get; set; }
                    public string? @data { get; set; }
                }

                public Result? @result { get; set; }
                public GameCenterMatchmakingQueue? @gameCenterMatchmakingQueue { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
            public Dimensions? @dimensions { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Granularity
            {
                P1D,
                PT1H,
                PT15M,
            }
            public Granularity? @granularity { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingNumberRuleResultsV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @count { get; set; }
                    public double? @averageResult { get; set; }
                    public double? @p50Result { get; set; }
                    public double? @p95Result { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public class Dimensions
            {
                public class GameCenterMatchmakingQueue
                {
                    public class Links
                    {
                        public string? @groupBy { get; set; }
                        public string? @related { get; set; }
                    }

                    public Links? @links { get; set; }
                    public string? @data { get; set; }
                }

                public GameCenterMatchmakingQueue? @gameCenterMatchmakingQueue { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
            public Dimensions? @dimensions { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Granularity
            {
                P1D,
                PT1H,
                PT15M,
            }
            public Granularity? @granularity { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingQueue
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
            public string[]? @classicMatchmakingBundleIds { get; set; }
        }

        public class Relationships
        {
            public class RuleSet
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class ExperimentRuleSet
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public RuleSet? @ruleSet { get; set; }
            public ExperimentRuleSet? @experimentRuleSet { get; set; }
        }

        public string @type { get; set; } = "gameCenterMatchmakingQueues";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterMatchmakingQueueCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @referenceName { get; set; } = "";
                public string[]? @classicMatchmakingBundleIds { get; set; }
            }

            public class Relationships
            {
                public class RuleSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class ExperimentRuleSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public RuleSet @ruleSet { get; set; } = new ();
                public ExperimentRuleSet? @experimentRuleSet { get; set; }
            }

            public string @type { get; set; } = "gameCenterMatchmakingQueues";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterMatchmakingQueueRequestsV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @count { get; set; }
                    public double? @averageSecondsInQueue { get; set; }
                    public double? @p50SecondsInQueue { get; set; }
                    public double? @p95SecondsInQueue { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public class Dimensions
            {
                public class Result
                {
                    public class Links
                    {
                        public string? @groupBy { get; set; }
                    }

                    public Links? @links { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Data
                    {
                        MATCHED,
                        CANCELED,
                        EXPIRED,
                    }
                    public Data? @data { get; set; }
                }

                public class GameCenterDetail
                {
                    public class Links
                    {
                        public string? @groupBy { get; set; }
                        public string? @related { get; set; }
                    }

                    public Links? @links { get; set; }
                    public string? @data { get; set; }
                }

                public Result? @result { get; set; }
                public GameCenterDetail? @gameCenterDetail { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
            public Dimensions? @dimensions { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Granularity
            {
                P1D,
                PT1H,
                PT15M,
            }
            public Granularity? @granularity { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingQueueResponse
    {
        public GameCenterMatchmakingQueue @data { get; set; } = new ();
        public GameCenterMatchmakingRuleSet[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterMatchmakingQueueSizesV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @count { get; set; }
                    public double? @averageNumberOfRequests { get; set; }
                    public double? @p50NumberOfRequests { get; set; }
                    public double? @p95NumberOfRequests { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Granularity
            {
                P1D,
                PT1H,
                PT15M,
            }
            public Granularity? @granularity { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingQueuesResponse
        : IHasNextLink
    {
        public GameCenterMatchmakingQueue[] @data { get; set; } = { };
        public GameCenterMatchmakingRuleSet[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingQueueUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string[]? @classicMatchmakingBundleIds { get; set; }
            }

            public class Relationships
            {
                public class RuleSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class ExperimentRuleSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public RuleSet? @ruleSet { get; set; }
                public ExperimentRuleSet? @experimentRuleSet { get; set; }
            }

            public string @type { get; set; } = "gameCenterMatchmakingQueues";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterMatchmakingRule
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
            public string? @description { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Type
            {
                COMPATIBLE,
                DISTANCE,
                MATCH,
                TEAM,
            }
            public Type? @type { get; set; }
            public string? @expression { get; set; }
            public double? @weight { get; set; }
        }

        public string @type { get; set; } = "gameCenterMatchmakingRules";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterMatchmakingRuleCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @referenceName { get; set; } = "";
                public string @description { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Type
                {
                    COMPATIBLE,
                    DISTANCE,
                    MATCH,
                    TEAM,
                }
                public Type @type { get; set; } = default;
                public string @expression { get; set; } = "";
                public double? @weight { get; set; }
            }

            public class Relationships
            {
                public class RuleSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public RuleSet @ruleSet { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterMatchmakingRules";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterMatchmakingRuleErrorsV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @count { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public class Dimensions
            {
                public class GameCenterMatchmakingQueue
                {
                    public class Links
                    {
                        public string? @groupBy { get; set; }
                        public string? @related { get; set; }
                    }

                    public Links? @links { get; set; }
                    public string? @data { get; set; }
                }

                public GameCenterMatchmakingQueue? @gameCenterMatchmakingQueue { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
            public Dimensions? @dimensions { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Granularity
            {
                P1D,
                PT1H,
                PT15M,
            }
            public Granularity? @granularity { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingRuleResponse
    {
        public GameCenterMatchmakingRule @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterMatchmakingRuleSet
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
            public int? @ruleLanguageVersion { get; set; }
            public int? @minPlayers { get; set; }
            public int? @maxPlayers { get; set; }
        }

        public class Relationships
        {
            public class Teams
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterMatchmakingTeams";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Rules
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterMatchmakingRules";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class MatchmakingQueues
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterMatchmakingQueues";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Teams? @teams { get; set; }
            public Rules? @rules { get; set; }
            public MatchmakingQueues? @matchmakingQueues { get; set; }
        }

        public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterMatchmakingRuleSetCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @referenceName { get; set; } = "";
                public int @ruleLanguageVersion { get; set; } = 0;
                public int @minPlayers { get; set; } = 0;
                public int @maxPlayers { get; set; } = 0;
            }

            public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterMatchmakingRuleSetResponse
    {
        public GameCenterMatchmakingRuleSet @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterMatchmakingRuleSetsResponse
        : IHasNextLink
    {
        public GameCenterMatchmakingRuleSet[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingRuleSetTest
    {
        public class Attributes
        {
            public class MatchmakingResults
            {
                public string? @requestName { get; set; }
                public GameCenterMatchmakingTeamAssignment[]? @teamAssignments { get; set; }
            }

            public MatchmakingResults[][]? @matchmakingResults { get; set; }
        }

        public string @type { get; set; } = "gameCenterMatchmakingRuleSetTests";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterMatchmakingRuleSetTestCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class MatchmakingRuleSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class MatchmakingRequests
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterMatchmakingTestRequests";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public MatchmakingRuleSet @matchmakingRuleSet { get; set; } = new ();
                public MatchmakingRequests @matchmakingRequests { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterMatchmakingRuleSetTests";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public GameCenterMatchmakingTestPlayerPropertyInlineCreate[]? @included { get; set; }
    }

    public class GameCenterMatchmakingRuleSetTestResponse
    {
        public GameCenterMatchmakingRuleSetTest @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterMatchmakingRuleSetUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int? @minPlayers { get; set; }
                public int? @maxPlayers { get; set; }
            }

            public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterMatchmakingRulesResponse
        : IHasNextLink
    {
        public GameCenterMatchmakingRule[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingRuleUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @description { get; set; }
                public string? @expression { get; set; }
                public double? @weight { get; set; }
            }

            public string @type { get; set; } = "gameCenterMatchmakingRules";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterMatchmakingSessionsV1MetricResponse
        : IHasNextLink
    {
        public class Data
        {
            public class DataPoints
            {
                public class Values
                {
                    public int? @count { get; set; }
                    public double? @averagePlayerCount { get; set; }
                    public double? @p50PlayerCount { get; set; }
                    public double? @p95PlayerCount { get; set; }
                }

                public string? @start { get; set; }
                public string? @end { get; set; }
                public Values? @values { get; set; }
            }

            public DataPoints? @dataPoints { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Granularity
            {
                P1D,
                PT1H,
                PT15M,
            }
            public Granularity? @granularity { get; set; }
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingTeam
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
            public int? @minPlayers { get; set; }
            public int? @maxPlayers { get; set; }
        }

        public string @type { get; set; } = "gameCenterMatchmakingTeams";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterMatchmakingTeamAssignment
    {
        public string? @playerId { get; set; }
        public string? @team { get; set; }
    }

    public class GameCenterMatchmakingTeamCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @referenceName { get; set; } = "";
                public int @minPlayers { get; set; } = 0;
                public int @maxPlayers { get; set; } = 0;
            }

            public class Relationships
            {
                public class RuleSet
                {
                    public class Data
                    {
                        public string @type { get; set; } = "gameCenterMatchmakingRuleSets";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public RuleSet @ruleSet { get; set; } = new ();
            }

            public string @type { get; set; } = "gameCenterMatchmakingTeams";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterMatchmakingTeamResponse
    {
        public GameCenterMatchmakingTeam @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class GameCenterMatchmakingTeamsResponse
        : IHasNextLink
    {
        public GameCenterMatchmakingTeam[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class GameCenterMatchmakingTeamUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int? @minPlayers { get; set; }
                public int? @maxPlayers { get; set; }
            }

            public string @type { get; set; } = "gameCenterMatchmakingTeams";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterMatchmakingTestPlayerPropertyInlineCreate
    {
        public class Attributes
        {
            public string @playerId { get; set; } = "";
            public Property[]? @properties { get; set; }
        }

        public string @type { get; set; } = "gameCenterMatchmakingTestPlayerProperties";
        public string? @id { get; set; }
        public Attributes @attributes { get; set; } = new ();
    }

    public class GameCenterMatchmakingTestRequestInlineCreate
    {
        public class Attributes
        {
            public string @requestName { get; set; } = "";
            public int @secondsInQueue { get; set; } = 0;
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Locale
            {
                [EnumMember(Value = "AR-SA")]
                ARSA,
                [EnumMember(Value = "CA-ES")]
                CAES,
                [EnumMember(Value = "CS-CZ")]
                CSCZ,
                [EnumMember(Value = "DA-DK")]
                DADK,
                [EnumMember(Value = "DE-DE")]
                DEDE,
                [EnumMember(Value = "EL-GR")]
                ELGR,
                [EnumMember(Value = "EN-AU")]
                ENAU,
                [EnumMember(Value = "EN-GB")]
                ENGB,
                [EnumMember(Value = "EN-US")]
                ENUS,
                [EnumMember(Value = "EN-KY")]
                ENKY,
                [EnumMember(Value = "ES-ES")]
                ESES,
                [EnumMember(Value = "ES-MX")]
                ESMX,
                [EnumMember(Value = "FI-FI")]
                FIFI,
                [EnumMember(Value = "FR-CA")]
                FRCA,
                [EnumMember(Value = "FR-FR")]
                FRFR,
                [EnumMember(Value = "HI-IN")]
                HIIN,
                [EnumMember(Value = "HR-HR")]
                HRHR,
                [EnumMember(Value = "HU-HU")]
                HUHU,
                [EnumMember(Value = "ID-ID")]
                IDID,
                [EnumMember(Value = "IT-IT")]
                ITIT,
                [EnumMember(Value = "IW-IL")]
                IWIL,
                [EnumMember(Value = "JA-JP")]
                JAJP,
                [EnumMember(Value = "KO-KR")]
                KOKR,
                [EnumMember(Value = "MS-MY")]
                MSMY,
                [EnumMember(Value = "NL-NL")]
                NLNL,
                [EnumMember(Value = "NO-NO")]
                NONO,
                [EnumMember(Value = "PL-PL")]
                PLPL,
                [EnumMember(Value = "PT-BR")]
                PTBR,
                [EnumMember(Value = "PT-PT")]
                PTPT,
                [EnumMember(Value = "RO-RO")]
                RORO,
                [EnumMember(Value = "RU-RU")]
                RURU,
                [EnumMember(Value = "SK-SK")]
                SKSK,
                [EnumMember(Value = "SV-SE")]
                SVSE,
                [EnumMember(Value = "TH-TH")]
                THTH,
                [EnumMember(Value = "TR-TR")]
                TRTR,
                [EnumMember(Value = "UK-UA")]
                UKUA,
                [EnumMember(Value = "ZH-CN")]
                ZHCN,
                [EnumMember(Value = "ZH-TW")]
                ZHTW,
                [EnumMember(Value = "ZH-HK")]
                ZHHK,
            }
            public Locale? @locale { get; set; }
            public Location? @location { get; set; }
            public int? @minPlayers { get; set; }
            public int? @maxPlayers { get; set; }
            public int? @playerCount { get; set; }
            public string @bundleId { get; set; } = "";
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                TV_OS,
                VISION_OS,
            }
            public Platform @platform { get; set; } = default;
            public string @appVersion { get; set; } = "";
        }

        public class Relationships
        {
            public class MatchmakingPlayerProperties
            {
                public class Data
                {
                    public string @type { get; set; } = "gameCenterMatchmakingTestPlayerProperties";
                    public string @id { get; set; } = "";
                }

                public Data[]? @data { get; set; }
            }

            public MatchmakingPlayerProperties? @matchmakingPlayerProperties { get; set; }
        }

        public string @type { get; set; } = "gameCenterMatchmakingTestRequests";
        public string? @id { get; set; }
        public Attributes @attributes { get; set; } = new ();
        public Relationships? @relationships { get; set; }
    }

    public class GameCenterPlayerAchievementSubmission
    {
        public class Attributes
        {
            public string? @bundleId { get; set; }
            public string[]? @challengeIds { get; set; }
            public int? @percentageAchieved { get; set; }
            public string? @scopedPlayerId { get; set; }
            public string? @submittedDate { get; set; }
            public string? @vendorIdentifier { get; set; }
        }

        public string @type { get; set; } = "gameCenterPlayerAchievementSubmissions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class GameCenterPlayerAchievementSubmissionCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @bundleId { get; set; } = "";
                public string[]? @challengeIds { get; set; }
                public int @percentageAchieved { get; set; } = 0;
                public string @scopedPlayerId { get; set; } = "";
                public string? @submittedDate { get; set; }
                public string @vendorIdentifier { get; set; } = "";
            }

            public string @type { get; set; } = "gameCenterPlayerAchievementSubmissions";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class GameCenterPlayerAchievementSubmissionResponse
    {
        public GameCenterPlayerAchievementSubmission @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class HttpHeader
    {
        public string? @name { get; set; }
        public string? @value { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum IconAssetType
    {
        APP_STORE,
        MESSAGES_APP_STORE,
        WATCH_APP_STORE,
        TV_OS_HOME_SCREEN,
        TV_OS_TOP_SHELF,
        ALTERNATE_EXPERIMENT,
    }

    public class ImageAsset
    {
        public string? @templateUrl { get; set; }
        public int? @width { get; set; }
        public int? @height { get; set; }
    }

    public class InAppPurchase
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
            public string? @productId { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum InAppPurchaseType
            {
                AUTOMATICALLY_RENEWABLE_SUBSCRIPTION,
                NON_CONSUMABLE,
                CONSUMABLE,
                NON_RENEWING_SUBSCRIPTION,
                FREE_SUBSCRIPTION,
            }
            public InAppPurchaseType? @inAppPurchaseType { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                CREATED,
                DEVELOPER_SIGNED_OFF,
                DEVELOPER_ACTION_NEEDED,
                DELETION_IN_PROGRESS,
                APPROVED,
                DELETED,
                REMOVED_FROM_SALE,
                DEVELOPER_REMOVED_FROM_SALE,
                WAITING_FOR_UPLOAD,
                PROCESSING_CONTENT,
                REPLACED,
                REJECTED,
                WAITING_FOR_SCREENSHOT,
                PREPARE_FOR_SUBMISSION,
                MISSING_METADATA,
                READY_TO_SUBMIT,
                WAITING_FOR_REVIEW,
                IN_REVIEW,
                PENDING_DEVELOPER_RELEASE,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class Apps
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Apps? @apps { get; set; }
        }

        public string @type { get; set; } = "inAppPurchases";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchaseAppStoreReviewScreenshot
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public string? @assetToken { get; set; }
            public string? @assetType { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class InAppPurchaseV2
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchases";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public InAppPurchaseV2? @inAppPurchaseV2 { get; set; }
        }

        public string @type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchaseAppStoreReviewScreenshotCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class InAppPurchaseV2
                {
                    public class Data
                    {
                        public string @type { get; set; } = "inAppPurchases";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public InAppPurchaseV2 @inAppPurchaseV2 { get; set; } = new ();
            }

            public string @type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class InAppPurchaseAppStoreReviewScreenshotResponse
    {
        public InAppPurchaseAppStoreReviewScreenshot @data { get; set; } = new ();
        public InAppPurchaseV2[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class InAppPurchaseAppStoreReviewScreenshotUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class InAppPurchaseAvailability
    {
        public class Attributes
        {
            public bool? @availableInNewTerritories { get; set; }
        }

        public class Relationships
        {
            public class AvailableTerritories
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AvailableTerritories? @availableTerritories { get; set; }
        }

        public string @type { get; set; } = "inAppPurchaseAvailabilities";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchaseAvailabilityCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool @availableInNewTerritories { get; set; } = false;
            }

            public class Relationships
            {
                public class InAppPurchase
                {
                    public class Data
                    {
                        public string @type { get; set; } = "inAppPurchases";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class AvailableTerritories
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territories";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public InAppPurchase @inAppPurchase { get; set; } = new ();
                public AvailableTerritories @availableTerritories { get; set; } = new ();
            }

            public string @type { get; set; } = "inAppPurchaseAvailabilities";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class InAppPurchaseAvailabilityResponse
    {
        public InAppPurchaseAvailability @data { get; set; } = new ();
        public Territory[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class InAppPurchaseContent
    {
        public class Attributes
        {
            public string? @fileName { get; set; }
            public int? @fileSize { get; set; }
            public string? @url { get; set; }
            public string? @lastModifiedDate { get; set; }
        }

        public class Relationships
        {
            public class InAppPurchaseV2
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchases";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public InAppPurchaseV2? @inAppPurchaseV2 { get; set; }
        }

        public string @type { get; set; } = "inAppPurchaseContents";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchaseContentResponse
    {
        public InAppPurchaseContent @data { get; set; } = new ();
        public InAppPurchaseV2[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class InAppPurchaseImage
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public string? @assetToken { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                AWAITING_UPLOAD,
                UPLOAD_COMPLETE,
                FAILED,
                PREPARE_FOR_SUBMISSION,
                WAITING_FOR_REVIEW,
                APPROVED,
                REJECTED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class InAppPurchase
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchases";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public InAppPurchase? @inAppPurchase { get; set; }
        }

        public string @type { get; set; } = "inAppPurchaseImages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchaseImageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class InAppPurchase
                {
                    public class Data
                    {
                        public string @type { get; set; } = "inAppPurchases";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public InAppPurchase @inAppPurchase { get; set; } = new ();
            }

            public string @type { get; set; } = "inAppPurchaseImages";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class InAppPurchaseImageResponse
    {
        public InAppPurchaseImage @data { get; set; } = new ();
        public InAppPurchaseV2[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class InAppPurchaseImagesResponse
        : IHasNextLink
    {
        public InAppPurchaseImage[] @data { get; set; } = { };
        public InAppPurchaseV2[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class InAppPurchaseImageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "inAppPurchaseImages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class InAppPurchaseLocalization
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @locale { get; set; }
            public string? @description { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                PREPARE_FOR_SUBMISSION,
                WAITING_FOR_REVIEW,
                APPROVED,
                REJECTED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class InAppPurchaseV2
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchases";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public InAppPurchaseV2? @inAppPurchaseV2 { get; set; }
        }

        public string @type { get; set; } = "inAppPurchaseLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchaseLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public string @locale { get; set; } = "";
                public string? @description { get; set; }
            }

            public class Relationships
            {
                public class InAppPurchaseV2
                {
                    public class Data
                    {
                        public string @type { get; set; } = "inAppPurchases";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public InAppPurchaseV2 @inAppPurchaseV2 { get; set; } = new ();
            }

            public string @type { get; set; } = "inAppPurchaseLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class InAppPurchaseLocalizationResponse
    {
        public InAppPurchaseLocalization @data { get; set; } = new ();
        public InAppPurchaseV2[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class InAppPurchaseLocalizationsResponse
        : IHasNextLink
    {
        public InAppPurchaseLocalization[] @data { get; set; } = { };
        public InAppPurchaseV2[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class InAppPurchaseLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @description { get; set; }
            }

            public string @type { get; set; } = "inAppPurchaseLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class InAppPurchasePrice
    {
        public class Attributes
        {
            public string? @startDate { get; set; }
            public string? @endDate { get; set; }
            public bool? @manual { get; set; }
        }

        public class Relationships
        {
            public class InAppPurchasePricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchasePricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public InAppPurchasePricePoint? @inAppPurchasePricePoint { get; set; }
            public Territory? @territory { get; set; }
        }

        public string @type { get; set; } = "inAppPurchasePrices";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchasePriceInlineCreate
    {
        public class Attributes
        {
            public string? @startDate { get; set; }
            public string? @endDate { get; set; }
        }

        public class Relationships
        {
            public class InAppPurchaseV2
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchases";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class InAppPurchasePricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchasePricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public InAppPurchaseV2? @inAppPurchaseV2 { get; set; }
            public InAppPurchasePricePoint? @inAppPurchasePricePoint { get; set; }
        }

        public string @type { get; set; } = "inAppPurchasePrices";
        public string? @id { get; set; }
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
    }

    public class InAppPurchasePricePoint
    {
        public class Attributes
        {
            public string? @customerPrice { get; set; }
            public string? @proceeds { get; set; }
        }

        public class Relationships
        {
            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Equalizations
            {
                public RelationshipLinks? @links { get; set; }
            }

            public Territory? @territory { get; set; }
            public Equalizations? @equalizations { get; set; }
        }

        public string @type { get; set; } = "inAppPurchasePricePoints";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchasePricePointsResponse
        : IHasNextLink
    {
        public InAppPurchasePricePoint[] @data { get; set; } = { };
        public Territory[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class InAppPurchasePriceSchedule
    {
        public class Relationships
        {
            public class BaseTerritory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class ManualPrices
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchasePrices";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AutomaticPrices
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchasePrices";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public BaseTerritory? @baseTerritory { get; set; }
            public ManualPrices? @manualPrices { get; set; }
            public AutomaticPrices? @automaticPrices { get; set; }
        }

        public string @type { get; set; } = "inAppPurchasePriceSchedules";
        public string @id { get; set; } = "";
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchasePriceScheduleCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class InAppPurchase
                {
                    public class Data
                    {
                        public string @type { get; set; } = "inAppPurchases";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class BaseTerritory
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territories";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class ManualPrices
                {
                    public class Data
                    {
                        public string @type { get; set; } = "inAppPurchasePrices";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public InAppPurchase @inAppPurchase { get; set; } = new ();
                public BaseTerritory @baseTerritory { get; set; } = new ();
                public ManualPrices @manualPrices { get; set; } = new ();
            }

            public string @type { get; set; } = "inAppPurchasePriceSchedules";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public InAppPurchasePriceInlineCreate[]? @included { get; set; }
    }

    public class InAppPurchasePriceScheduleResponse
    {
        public InAppPurchasePriceSchedule @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class InAppPurchasePricesResponse
        : IHasNextLink
    {
        public InAppPurchasePrice[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class InAppPurchaseResponse
    {
        public InAppPurchase @data { get; set; } = new ();
        public App[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class InAppPurchasesResponse
        : IHasNextLink
    {
        public InAppPurchase[] @data { get; set; } = { };
        public App[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchaseState
    {
        MISSING_METADATA,
        WAITING_FOR_UPLOAD,
        PROCESSING_CONTENT,
        READY_TO_SUBMIT,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        DEVELOPER_ACTION_NEEDED,
        PENDING_BINARY_APPROVAL,
        APPROVED,
        DEVELOPER_REMOVED_FROM_SALE,
        REMOVED_FROM_SALE,
        REJECTED,
    }

    public class InAppPurchaseSubmission
    {
        public class Relationships
        {
            public class InAppPurchaseV2
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchases";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public InAppPurchaseV2? @inAppPurchaseV2 { get; set; }
        }

        public string @type { get; set; } = "inAppPurchaseSubmissions";
        public string @id { get; set; } = "";
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchaseSubmissionCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class InAppPurchaseV2
                {
                    public class Data
                    {
                        public string @type { get; set; } = "inAppPurchases";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public InAppPurchaseV2 @inAppPurchaseV2 { get; set; } = new ();
            }

            public string @type { get; set; } = "inAppPurchaseSubmissions";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class InAppPurchaseSubmissionResponse
    {
        public InAppPurchaseSubmission @data { get; set; } = new ();
        public InAppPurchaseV2[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class InAppPurchasesV2Response
        : IHasNextLink
    {
        public InAppPurchaseV2[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchaseType
    {
        CONSUMABLE,
        NON_CONSUMABLE,
        NON_RENEWING_SUBSCRIPTION,
    }

    public class InAppPurchaseV2
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @productId { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum InAppPurchaseType
            {
                CONSUMABLE,
                NON_CONSUMABLE,
                NON_RENEWING_SUBSCRIPTION,
            }
            public InAppPurchaseType? @inAppPurchaseType { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                MISSING_METADATA,
                WAITING_FOR_UPLOAD,
                PROCESSING_CONTENT,
                READY_TO_SUBMIT,
                WAITING_FOR_REVIEW,
                IN_REVIEW,
                DEVELOPER_ACTION_NEEDED,
                PENDING_BINARY_APPROVAL,
                APPROVED,
                DEVELOPER_REMOVED_FROM_SALE,
                REMOVED_FROM_SALE,
                REJECTED,
            }
            public State? @state { get; set; }
            public string? @reviewNote { get; set; }
            public bool? @familySharable { get; set; }
            public bool? @contentHosting { get; set; }
        }

        public class Relationships
        {
            public class InAppPurchaseLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchaseLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class PricePoints
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchasePricePoints";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Content
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchaseContents";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class AppStoreReviewScreenshot
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class PromotedPurchase
            {
                public class Data
                {
                    public string @type { get; set; } = "promotedPurchases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class IapPriceSchedule
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchasePriceSchedules";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class InAppPurchaseAvailability
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchaseAvailabilities";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class Images
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchaseImages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public InAppPurchaseLocalizations? @inAppPurchaseLocalizations { get; set; }
            public PricePoints? @pricePoints { get; set; }
            public Content? @content { get; set; }
            public AppStoreReviewScreenshot? @appStoreReviewScreenshot { get; set; }
            public PromotedPurchase? @promotedPurchase { get; set; }
            public IapPriceSchedule? @iapPriceSchedule { get; set; }
            public InAppPurchaseAvailability? @inAppPurchaseAvailability { get; set; }
            public Images? @images { get; set; }
        }

        public string @type { get; set; } = "inAppPurchases";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class InAppPurchaseV2CreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public string @productId { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum InAppPurchaseType
                {
                    CONSUMABLE,
                    NON_CONSUMABLE,
                    NON_RENEWING_SUBSCRIPTION,
                }
                public InAppPurchaseType @inAppPurchaseType { get; set; } = default;
                public string? @reviewNote { get; set; }
                public bool? @familySharable { get; set; }
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "inAppPurchases";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class InAppPurchaseV2Response
    {
        public InAppPurchaseV2 @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class InAppPurchaseV2UpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @reviewNote { get; set; }
                public bool? @familySharable { get; set; }
            }

            public string @type { get; set; } = "inAppPurchases";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class IntegerRange
    {
        public int? @minimum { get; set; }
        public int? @maximum { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InternalBetaState
    {
        PROCESSING,
        PROCESSING_EXCEPTION,
        MISSING_EXPORT_COMPLIANCE,
        READY_FOR_BETA_TESTING,
        IN_BETA_TESTING,
        EXPIRED,
        IN_EXPORT_COMPLIANCE_REVIEW,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum KidsAgeBand
    {
        FIVE_AND_UNDER,
        SIX_TO_EIGHT,
        NINE_TO_ELEVEN,
    }

    public class Location
    {
        public double? @latitude { get; set; }
        public double? @longitude { get; set; }
    }

    public class MarketplaceDomain
    {
        public class Attributes
        {
            public string? @domain { get; set; }
            public string? @referenceName { get; set; }
            public string? @createdDate { get; set; }
        }

        public string @type { get; set; } = "marketplaceDomains";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class MarketplaceDomainCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @domain { get; set; } = "";
                public string @referenceName { get; set; } = "";
            }

            public string @type { get; set; } = "marketplaceDomains";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class MarketplaceDomainResponse
    {
        public MarketplaceDomain @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class MarketplaceDomainsResponse
        : IHasNextLink
    {
        public MarketplaceDomain[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class MarketplaceSearchDetail
    {
        public class Attributes
        {
            public string? @catalogUrl { get; set; }
        }

        public string @type { get; set; } = "marketplaceSearchDetails";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class MarketplaceSearchDetailCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @catalogUrl { get; set; } = "";
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "marketplaceSearchDetails";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class MarketplaceSearchDetailResponse
    {
        public MarketplaceSearchDetail @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class MarketplaceSearchDetailUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @catalogUrl { get; set; }
            }

            public string @type { get; set; } = "marketplaceSearchDetails";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class MarketplaceWebhook
    {
        public class Attributes
        {
            public string? @endpointUrl { get; set; }
        }

        public string @type { get; set; } = "marketplaceWebhooks";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class MarketplaceWebhookCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @endpointUrl { get; set; } = "";
                public string @secret { get; set; } = "";
            }

            public string @type { get; set; } = "marketplaceWebhooks";
            public Attributes @attributes { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class MarketplaceWebhookResponse
    {
        public MarketplaceWebhook @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class MarketplaceWebhooksResponse
        : IHasNextLink
    {
        public MarketplaceWebhook[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class MarketplaceWebhookUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @endpointUrl { get; set; }
                public string? @secret { get; set; }
            }

            public string @type { get; set; } = "marketplaceWebhooks";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum MetricCategory
    {
        HANG,
        LAUNCH,
        MEMORY,
        DISK,
        BATTERY,
        TERMINATION,
        ANIMATION,
    }

    public class MetricsInsight
    {
        public class Populations
        {
            public double? @deltaPercentage { get; set; }
            public string? @percentile { get; set; }
            public string? @summaryString { get; set; }
            public double? @referenceAverageValue { get; set; }
            public double? @latestVersionValue { get; set; }
            public string? @device { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum MetricCategory
        {
            HANG,
            LAUNCH,
            MEMORY,
            DISK,
            BATTERY,
            TERMINATION,
            ANIMATION,
        }
        public MetricCategory? @metricCategory { get; set; }
        public string? @latestVersion { get; set; }
        public string? @metric { get; set; }
        public string? @summaryString { get; set; }
        public string? @referenceVersions { get; set; }
        public double? @maxLatestVersionValue { get; set; }
        public string? @subSystemLabel { get; set; }
        public bool? @highImpact { get; set; }
        public Populations[]? @populations { get; set; }
    }

    public class PagedDocumentLinks
    {
        public string @self { get; set; } = "";
        public string? @first { get; set; }
        public string? @next { get; set; }
    }

    public class PagingInformation
    {
        public class Paging
        {
            public int? @total { get; set; }
            public int @limit { get; set; } = 0;
        }

        public Paging @paging { get; set; } = new ();
    }

    public class PerfPowerMetric
    {
        public class Attributes
        {
            public string? @platform { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum MetricType
            {
                DISK,
                HANG,
                BATTERY,
                LAUNCH,
                MEMORY,
                ANIMATION,
                TERMINATION,
            }
            public MetricType? @metricType { get; set; }
            public string? @deviceType { get; set; }
        }

        public string @type { get; set; } = "perfPowerMetrics";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PhasedReleaseState
    {
        INACTIVE,
        ACTIVE,
        PAUSED,
        COMPLETE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Platform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    public class PrereleaseVersion
    {
        public class Attributes
        {
            public string? @version { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                TV_OS,
                VISION_OS,
            }
            public Platform? @platform { get; set; }
        }

        public class Relationships
        {
            public class Builds
            {
                public class Data
                {
                    public string @type { get; set; } = "builds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public Builds? @builds { get; set; }
            public App? @app { get; set; }
        }

        public string @type { get; set; } = "preReleaseVersions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class PrereleaseVersionResponse
    {
        public PrereleaseVersion @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class PreReleaseVersionsResponse
        : IHasNextLink
    {
        public PrereleaseVersion[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class PreReleaseVersionsWithoutIncludesResponse
        : IHasNextLink
    {
        public PrereleaseVersion[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class PrereleaseVersionWithoutIncludesResponse
    {
        public PrereleaseVersion @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class PreviewFrameImage
    {
        public ImageAsset? @image { get; set; }
        public AppMediaPreviewFrameImageState? @state { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreviewType
    {
        IPHONE_67,
        IPHONE_61,
        IPHONE_65,
        IPHONE_58,
        IPHONE_55,
        IPHONE_47,
        IPHONE_40,
        IPHONE_35,
        IPAD_PRO_3GEN_129,
        IPAD_PRO_3GEN_11,
        IPAD_PRO_129,
        IPAD_105,
        IPAD_97,
        DESKTOP,
        APPLE_TV,
        APPLE_VISION_PRO,
    }

    public class Profile
    {
        public class Attributes
        {
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                UNIVERSAL,
            }
            public Platform? @platform { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ProfileType
            {
                IOS_APP_DEVELOPMENT,
                IOS_APP_STORE,
                IOS_APP_ADHOC,
                IOS_APP_INHOUSE,
                MAC_APP_DEVELOPMENT,
                MAC_APP_STORE,
                MAC_APP_DIRECT,
                TVOS_APP_DEVELOPMENT,
                TVOS_APP_STORE,
                TVOS_APP_ADHOC,
                TVOS_APP_INHOUSE,
                MAC_CATALYST_APP_DEVELOPMENT,
                MAC_CATALYST_APP_STORE,
                MAC_CATALYST_APP_DIRECT,
            }
            public ProfileType? @profileType { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ProfileState
            {
                ACTIVE,
                INVALID,
            }
            public ProfileState? @profileState { get; set; }
            public string? @profileContent { get; set; }
            public string? @uuid { get; set; }
            public string? @createdDate { get; set; }
            public string? @expirationDate { get; set; }
        }

        public class Relationships
        {
            public class BundleId
            {
                public class Data
                {
                    public string @type { get; set; } = "bundleIds";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class Devices
            {
                public class Data
                {
                    public string @type { get; set; } = "devices";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Certificates
            {
                public class Data
                {
                    public string @type { get; set; } = "certificates";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public BundleId? @bundleId { get; set; }
            public Devices? @devices { get; set; }
            public Certificates? @certificates { get; set; }
        }

        public string @type { get; set; } = "profiles";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class ProfileCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum ProfileType
                {
                    IOS_APP_DEVELOPMENT,
                    IOS_APP_STORE,
                    IOS_APP_ADHOC,
                    IOS_APP_INHOUSE,
                    MAC_APP_DEVELOPMENT,
                    MAC_APP_STORE,
                    MAC_APP_DIRECT,
                    TVOS_APP_DEVELOPMENT,
                    TVOS_APP_STORE,
                    TVOS_APP_ADHOC,
                    TVOS_APP_INHOUSE,
                    MAC_CATALYST_APP_DEVELOPMENT,
                    MAC_CATALYST_APP_STORE,
                    MAC_CATALYST_APP_DIRECT,
                }
                public ProfileType @profileType { get; set; } = default;
            }

            public class Relationships
            {
                public class BundleId
                {
                    public class Data
                    {
                        public string @type { get; set; } = "bundleIds";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Devices
                {
                    public class Data
                    {
                        public string @type { get; set; } = "devices";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public class Certificates
                {
                    public class Data
                    {
                        public string @type { get; set; } = "certificates";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public BundleId @bundleId { get; set; } = new ();
                public Devices? @devices { get; set; }
                public Certificates @certificates { get; set; } = new ();
            }

            public string @type { get; set; } = "profiles";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class ProfileResponse
    {
        public Profile @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class ProfilesResponse
        : IHasNextLink
    {
        public Profile[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class ProfilesWithoutIncludesResponse
        : IHasNextLink
    {
        public Profile[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class PromotedPurchase
    {
        public class Attributes
        {
            public bool? @visibleForAllUsers { get; set; }
            public bool? @enabled { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                APPROVED,
                IN_REVIEW,
                PREPARE_FOR_SUBMISSION,
                REJECTED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class InAppPurchaseV2
            {
                public class Data
                {
                    public string @type { get; set; } = "inAppPurchases";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class PromotionImages
            {
                public class Data
                {
                    public string @type { get; set; } = "promotedPurchaseImages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public InAppPurchaseV2? @inAppPurchaseV2 { get; set; }
            public Subscription? @subscription { get; set; }
            public PromotionImages? @promotionImages { get; set; }
        }

        public string @type { get; set; } = "promotedPurchases";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class PromotedPurchaseCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool @visibleForAllUsers { get; set; } = false;
                public bool? @enabled { get; set; }
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class InAppPurchaseV2
                {
                    public class Data
                    {
                        public string @type { get; set; } = "inAppPurchases";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public App @app { get; set; } = new ();
                public InAppPurchaseV2? @inAppPurchaseV2 { get; set; }
                public Subscription? @subscription { get; set; }
            }

            public string @type { get; set; } = "promotedPurchases";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class PromotedPurchaseImage
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public string? @assetToken { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public string? @assetType { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                AWAITING_UPLOAD,
                UPLOAD_COMPLETE,
                FAILED,
                PREPARE_FOR_SUBMISSION,
                WAITING_FOR_REVIEW,
                APPROVED,
                REJECTED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class PromotedPurchase
            {
                public class Data
                {
                    public string @type { get; set; } = "promotedPurchases";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public PromotedPurchase? @promotedPurchase { get; set; }
        }

        public string @type { get; set; } = "promotedPurchaseImages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class PromotedPurchaseImageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class PromotedPurchase
                {
                    public class Data
                    {
                        public string @type { get; set; } = "promotedPurchases";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public PromotedPurchase @promotedPurchase { get; set; } = new ();
            }

            public string @type { get; set; } = "promotedPurchaseImages";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class PromotedPurchaseImageResponse
    {
        public PromotedPurchaseImage @data { get; set; } = new ();
        public PromotedPurchase[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class PromotedPurchaseImagesResponse
        : IHasNextLink
    {
        public PromotedPurchaseImage[] @data { get; set; } = { };
        public PromotedPurchase[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class PromotedPurchaseImageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "promotedPurchaseImages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class PromotedPurchaseResponse
    {
        public PromotedPurchase @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class PromotedPurchasesResponse
        : IHasNextLink
    {
        public PromotedPurchase[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class PromotedPurchaseUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @visibleForAllUsers { get; set; }
                public bool? @enabled { get; set; }
            }

            public string @type { get; set; } = "promotedPurchases";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class Property
    {
        public string? @key { get; set; }
        public string? @value { get; set; }
    }

    public class RelationshipLinks
    {
        public string? @self { get; set; }
        public string? @related { get; set; }
    }

    public class ResourceLinks
    {
        public string? @self { get; set; }
    }

    public class ReviewSubmission
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Platform
            {
                IOS,
                MAC_OS,
                TV_OS,
                VISION_OS,
            }
            public Platform? @platform { get; set; }
            public string? @submittedDate { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                READY_FOR_REVIEW,
                WAITING_FOR_REVIEW,
                IN_REVIEW,
                UNRESOLVED_ISSUES,
                CANCELING,
                COMPLETING,
                COMPLETE,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class App
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Items
            {
                public class Data
                {
                    public string @type { get; set; } = "reviewSubmissionItems";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppStoreVersionForReview
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubmittedByActor
            {
                public class Data
                {
                    public string @type { get; set; } = "actors";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class LastUpdatedByActor
            {
                public class Data
                {
                    public string @type { get; set; } = "actors";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public App? @app { get; set; }
            public Items? @items { get; set; }
            public AppStoreVersionForReview? @appStoreVersionForReview { get; set; }
            public SubmittedByActor? @submittedByActor { get; set; }
            public LastUpdatedByActor? @lastUpdatedByActor { get; set; }
        }

        public string @type { get; set; } = "reviewSubmissions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class ReviewSubmissionCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Platform
                {
                    IOS,
                    MAC_OS,
                    TV_OS,
                    VISION_OS,
                }
                public Platform @platform { get; set; } = default;
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "reviewSubmissions";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class ReviewSubmissionItem
    {
        public class Attributes
        {
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                READY_FOR_REVIEW,
                ACCEPTED,
                APPROVED,
                REJECTED,
                REMOVED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class AppStoreVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppCustomProductPageVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appCustomProductPageVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppStoreVersionExperiment
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperiments";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppStoreVersionExperimentV2
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersionExperiments";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class AppEvent
            {
                public class Data
                {
                    public string @type { get; set; } = "appEvents";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppStoreVersion? @appStoreVersion { get; set; }
            public AppCustomProductPageVersion? @appCustomProductPageVersion { get; set; }
            public AppStoreVersionExperiment? @appStoreVersionExperiment { get; set; }
            public AppStoreVersionExperimentV2? @appStoreVersionExperimentV2 { get; set; }
            public AppEvent? @appEvent { get; set; }
        }

        public string @type { get; set; } = "reviewSubmissionItems";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class ReviewSubmissionItemCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class ReviewSubmission
                {
                    public class Data
                    {
                        public string @type { get; set; } = "reviewSubmissions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppCustomProductPageVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appCustomProductPageVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppStoreVersionExperiment
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionExperiments";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppStoreVersionExperimentV2
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersionExperiments";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class AppEvent
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appEvents";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public ReviewSubmission @reviewSubmission { get; set; } = new ();
                public AppStoreVersion? @appStoreVersion { get; set; }
                public AppCustomProductPageVersion? @appCustomProductPageVersion { get; set; }
                public AppStoreVersionExperiment? @appStoreVersionExperiment { get; set; }
                public AppStoreVersionExperimentV2? @appStoreVersionExperimentV2 { get; set; }
                public AppEvent? @appEvent { get; set; }
            }

            public string @type { get; set; } = "reviewSubmissionItems";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class ReviewSubmissionItemResponse
    {
        public ReviewSubmissionItem @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class ReviewSubmissionItemsResponse
        : IHasNextLink
    {
        public ReviewSubmissionItem[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class ReviewSubmissionItemUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @resolved { get; set; }
                public bool? @removed { get; set; }
            }

            public string @type { get; set; } = "reviewSubmissionItems";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class ReviewSubmissionResponse
    {
        public ReviewSubmission @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class ReviewSubmissionsResponse
        : IHasNextLink
    {
        public ReviewSubmission[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class ReviewSubmissionUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @submitted { get; set; }
                public bool? @canceled { get; set; }
            }

            public string @type { get; set; } = "reviewSubmissions";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class RoutingAppCoverage
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class AppStoreVersion
            {
                public class Data
                {
                    public string @type { get; set; } = "appStoreVersions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public AppStoreVersion? @appStoreVersion { get; set; }
        }

        public string @type { get; set; } = "routingAppCoverages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class RoutingAppCoverageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class AppStoreVersion
                {
                    public class Data
                    {
                        public string @type { get; set; } = "appStoreVersions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public AppStoreVersion @appStoreVersion { get; set; } = new ();
            }

            public string @type { get; set; } = "routingAppCoverages";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class RoutingAppCoverageResponse
    {
        public RoutingAppCoverage @data { get; set; } = new ();
        public AppStoreVersion[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class RoutingAppCoverageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "routingAppCoverages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class RoutingAppCoverageWithoutIncludesResponse
    {
        public RoutingAppCoverage @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SandboxTestersClearPurchaseHistoryRequestV2
    {
        public string @type { get; set; } = "sandboxTestersClearPurchaseHistoryRequest";
        public string @id { get; set; } = "";
        public ResourceLinks? @links { get; set; }
    }

    public class SandboxTestersClearPurchaseHistoryRequestV2CreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class SandboxTesters
                {
                    public class Data
                    {
                        public string @type { get; set; } = "sandboxTesters";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public SandboxTesters @sandboxTesters { get; set; } = new ();
            }

            public string @type { get; set; } = "sandboxTestersClearPurchaseHistoryRequest";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SandboxTestersClearPurchaseHistoryRequestV2Response
    {
        public SandboxTestersClearPurchaseHistoryRequestV2 @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SandboxTestersV2Response
        : IHasNextLink
    {
        public SandboxTesterV2[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SandboxTesterV2
    {
        public class Attributes
        {
            public string? @firstName { get; set; }
            public string? @lastName { get; set; }
            public string? @acAccountName { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Territory
            {
                ABW,
                AFG,
                AGO,
                AIA,
                ALB,
                AND,
                ANT,
                ARE,
                ARG,
                ARM,
                ASM,
                ATG,
                AUS,
                AUT,
                AZE,
                BDI,
                BEL,
                BEN,
                BES,
                BFA,
                BGD,
                BGR,
                BHR,
                BHS,
                BIH,
                BLR,
                BLZ,
                BMU,
                BOL,
                BRA,
                BRB,
                BRN,
                BTN,
                BWA,
                CAF,
                CAN,
                CHE,
                CHL,
                CHN,
                CIV,
                CMR,
                COD,
                COG,
                COK,
                COL,
                COM,
                CPV,
                CRI,
                CUB,
                CUW,
                CXR,
                CYM,
                CYP,
                CZE,
                DEU,
                DJI,
                DMA,
                DNK,
                DOM,
                DZA,
                ECU,
                EGY,
                ERI,
                ESP,
                EST,
                ETH,
                FIN,
                FJI,
                FLK,
                FRA,
                FRO,
                FSM,
                GAB,
                GBR,
                GEO,
                GGY,
                GHA,
                GIB,
                GIN,
                GLP,
                GMB,
                GNB,
                GNQ,
                GRC,
                GRD,
                GRL,
                GTM,
                GUF,
                GUM,
                GUY,
                HKG,
                HND,
                HRV,
                HTI,
                HUN,
                IDN,
                IMN,
                IND,
                IRL,
                IRQ,
                ISL,
                ISR,
                ITA,
                JAM,
                JEY,
                JOR,
                JPN,
                KAZ,
                KEN,
                KGZ,
                KHM,
                KIR,
                KNA,
                KOR,
                KWT,
                LAO,
                LBN,
                LBR,
                LBY,
                LCA,
                LIE,
                LKA,
                LSO,
                LTU,
                LUX,
                LVA,
                MAC,
                MAR,
                MCO,
                MDA,
                MDG,
                MDV,
                MEX,
                MHL,
                MKD,
                MLI,
                MLT,
                MMR,
                MNE,
                MNG,
                MNP,
                MOZ,
                MRT,
                MSR,
                MTQ,
                MUS,
                MWI,
                MYS,
                MYT,
                NAM,
                NCL,
                NER,
                NFK,
                NGA,
                NIC,
                NIU,
                NLD,
                NOR,
                NPL,
                NRU,
                NZL,
                OMN,
                PAK,
                PAN,
                PER,
                PHL,
                PLW,
                PNG,
                POL,
                PRI,
                PRT,
                PRY,
                PSE,
                PYF,
                QAT,
                REU,
                ROU,
                RUS,
                RWA,
                SAU,
                SEN,
                SGP,
                SHN,
                SLB,
                SLE,
                SLV,
                SMR,
                SOM,
                SPM,
                SRB,
                SSD,
                STP,
                SUR,
                SVK,
                SVN,
                SWE,
                SWZ,
                SXM,
                SYC,
                TCA,
                TCD,
                TGO,
                THA,
                TJK,
                TKM,
                TLS,
                TON,
                TTO,
                TUN,
                TUR,
                TUV,
                TWN,
                TZA,
                UGA,
                UKR,
                UMI,
                URY,
                USA,
                UZB,
                VAT,
                VCT,
                VEN,
                VGB,
                VIR,
                VNM,
                VUT,
                WLF,
                WSM,
                YEM,
                ZAF,
                ZMB,
                ZWE,
            }
            public Territory? @territory { get; set; }
            public bool? @applePayCompatible { get; set; }
            public bool? @interruptPurchases { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum SubscriptionRenewalRate
            {
                MONTHLY_RENEWAL_EVERY_ONE_HOUR,
                MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES,
                MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES,
                MONTHLY_RENEWAL_EVERY_FIVE_MINUTES,
                MONTHLY_RENEWAL_EVERY_THREE_MINUTES,
            }
            public SubscriptionRenewalRate? @subscriptionRenewalRate { get; set; }
        }

        public string @type { get; set; } = "sandboxTesters";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SandboxTesterV2Response
    {
        public SandboxTesterV2 @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SandboxTesterV2UpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Territory
                {
                    ABW,
                    AFG,
                    AGO,
                    AIA,
                    ALB,
                    AND,
                    ANT,
                    ARE,
                    ARG,
                    ARM,
                    ASM,
                    ATG,
                    AUS,
                    AUT,
                    AZE,
                    BDI,
                    BEL,
                    BEN,
                    BES,
                    BFA,
                    BGD,
                    BGR,
                    BHR,
                    BHS,
                    BIH,
                    BLR,
                    BLZ,
                    BMU,
                    BOL,
                    BRA,
                    BRB,
                    BRN,
                    BTN,
                    BWA,
                    CAF,
                    CAN,
                    CHE,
                    CHL,
                    CHN,
                    CIV,
                    CMR,
                    COD,
                    COG,
                    COK,
                    COL,
                    COM,
                    CPV,
                    CRI,
                    CUB,
                    CUW,
                    CXR,
                    CYM,
                    CYP,
                    CZE,
                    DEU,
                    DJI,
                    DMA,
                    DNK,
                    DOM,
                    DZA,
                    ECU,
                    EGY,
                    ERI,
                    ESP,
                    EST,
                    ETH,
                    FIN,
                    FJI,
                    FLK,
                    FRA,
                    FRO,
                    FSM,
                    GAB,
                    GBR,
                    GEO,
                    GGY,
                    GHA,
                    GIB,
                    GIN,
                    GLP,
                    GMB,
                    GNB,
                    GNQ,
                    GRC,
                    GRD,
                    GRL,
                    GTM,
                    GUF,
                    GUM,
                    GUY,
                    HKG,
                    HND,
                    HRV,
                    HTI,
                    HUN,
                    IDN,
                    IMN,
                    IND,
                    IRL,
                    IRQ,
                    ISL,
                    ISR,
                    ITA,
                    JAM,
                    JEY,
                    JOR,
                    JPN,
                    KAZ,
                    KEN,
                    KGZ,
                    KHM,
                    KIR,
                    KNA,
                    KOR,
                    KWT,
                    LAO,
                    LBN,
                    LBR,
                    LBY,
                    LCA,
                    LIE,
                    LKA,
                    LSO,
                    LTU,
                    LUX,
                    LVA,
                    MAC,
                    MAR,
                    MCO,
                    MDA,
                    MDG,
                    MDV,
                    MEX,
                    MHL,
                    MKD,
                    MLI,
                    MLT,
                    MMR,
                    MNE,
                    MNG,
                    MNP,
                    MOZ,
                    MRT,
                    MSR,
                    MTQ,
                    MUS,
                    MWI,
                    MYS,
                    MYT,
                    NAM,
                    NCL,
                    NER,
                    NFK,
                    NGA,
                    NIC,
                    NIU,
                    NLD,
                    NOR,
                    NPL,
                    NRU,
                    NZL,
                    OMN,
                    PAK,
                    PAN,
                    PER,
                    PHL,
                    PLW,
                    PNG,
                    POL,
                    PRI,
                    PRT,
                    PRY,
                    PSE,
                    PYF,
                    QAT,
                    REU,
                    ROU,
                    RUS,
                    RWA,
                    SAU,
                    SEN,
                    SGP,
                    SHN,
                    SLB,
                    SLE,
                    SLV,
                    SMR,
                    SOM,
                    SPM,
                    SRB,
                    SSD,
                    STP,
                    SUR,
                    SVK,
                    SVN,
                    SWE,
                    SWZ,
                    SXM,
                    SYC,
                    TCA,
                    TCD,
                    TGO,
                    THA,
                    TJK,
                    TKM,
                    TLS,
                    TON,
                    TTO,
                    TUN,
                    TUR,
                    TUV,
                    TWN,
                    TZA,
                    UGA,
                    UKR,
                    UMI,
                    URY,
                    USA,
                    UZB,
                    VAT,
                    VCT,
                    VEN,
                    VGB,
                    VIR,
                    VNM,
                    VUT,
                    WLF,
                    WSM,
                    YEM,
                    ZAF,
                    ZMB,
                    ZWE,
                }
                public Territory? @territory { get; set; }
                public bool? @interruptPurchases { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum SubscriptionRenewalRate
                {
                    MONTHLY_RENEWAL_EVERY_ONE_HOUR,
                    MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES,
                    MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES,
                    MONTHLY_RENEWAL_EVERY_FIVE_MINUTES,
                    MONTHLY_RENEWAL_EVERY_THREE_MINUTES,
                }
                public SubscriptionRenewalRate? @subscriptionRenewalRate { get; set; }
            }

            public string @type { get; set; } = "sandboxTesters";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class ScmGitReference
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @canonicalName { get; set; }
            public bool? @isDeleted { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Kind
            {
                BRANCH,
                TAG,
            }
            public Kind? @kind { get; set; }
        }

        public class Relationships
        {
            public class Repository
            {
                public class Data
                {
                    public string @type { get; set; } = "scmRepositories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Repository? @repository { get; set; }
        }

        public string @type { get; set; } = "scmGitReferences";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class ScmGitReferenceResponse
    {
        public ScmGitReference @data { get; set; } = new ();
        public ScmRepository[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class ScmGitReferencesResponse
        : IHasNextLink
    {
        public ScmGitReference[] @data { get; set; } = { };
        public ScmRepository[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class ScmProvider
    {
        public class Attributes
        {
            public ScmProviderType? @scmProviderType { get; set; }
            public string? @url { get; set; }
        }

        public class Relationships
        {
            public class Repositories
            {
                public RelationshipLinks? @links { get; set; }
            }

            public Repositories? @repositories { get; set; }
        }

        public string @type { get; set; } = "scmProviders";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class ScmProviderResponse
    {
        public ScmProvider @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class ScmProvidersResponse
        : IHasNextLink
    {
        public ScmProvider[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class ScmProviderType
    {
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum Kind
        {
            BITBUCKET_CLOUD,
            BITBUCKET_SERVER,
            GITHUB_CLOUD,
            GITHUB_ENTERPRISE,
            GITLAB_CLOUD,
            GITLAB_SELF_MANAGED,
        }
        public Kind? @kind { get; set; }
        public string? @displayName { get; set; }
        public bool? @isOnPremise { get; set; }
    }

    public class ScmPullRequest
    {
        public class Attributes
        {
            public string? @title { get; set; }
            public int? @number { get; set; }
            public string? @webUrl { get; set; }
            public string? @sourceRepositoryOwner { get; set; }
            public string? @sourceRepositoryName { get; set; }
            public string? @sourceBranchName { get; set; }
            public string? @destinationRepositoryOwner { get; set; }
            public string? @destinationRepositoryName { get; set; }
            public string? @destinationBranchName { get; set; }
            public bool? @isClosed { get; set; }
            public bool? @isCrossRepository { get; set; }
        }

        public class Relationships
        {
            public class Repository
            {
                public class Data
                {
                    public string @type { get; set; } = "scmRepositories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Repository? @repository { get; set; }
        }

        public string @type { get; set; } = "scmPullRequests";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class ScmPullRequestResponse
    {
        public ScmPullRequest @data { get; set; } = new ();
        public ScmRepository[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class ScmPullRequestsResponse
        : IHasNextLink
    {
        public ScmPullRequest[] @data { get; set; } = { };
        public ScmRepository[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class ScmRepositoriesResponse
        : IHasNextLink
    {
        public ScmRepository[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class ScmRepository
    {
        public class Attributes
        {
            public string? @lastAccessedDate { get; set; }
            public string? @httpCloneUrl { get; set; }
            public string? @sshCloneUrl { get; set; }
            public string? @ownerName { get; set; }
            public string? @repositoryName { get; set; }
        }

        public class Relationships
        {
            public class ScmProvider
            {
                public class Data
                {
                    public string @type { get; set; } = "scmProviders";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class DefaultBranch
            {
                public class Data
                {
                    public string @type { get; set; } = "scmGitReferences";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class GitReferences
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class PullRequests
            {
                public RelationshipLinks? @links { get; set; }
            }

            public ScmProvider? @scmProvider { get; set; }
            public DefaultBranch? @defaultBranch { get; set; }
            public GitReferences? @gitReferences { get; set; }
            public PullRequests? @pullRequests { get; set; }
        }

        public string @type { get; set; } = "scmRepositories";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class ScmRepositoryResponse
    {
        public ScmRepository @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScreenshotDisplayType
    {
        APP_IPHONE_67,
        APP_IPHONE_61,
        APP_IPHONE_65,
        APP_IPHONE_58,
        APP_IPHONE_55,
        APP_IPHONE_47,
        APP_IPHONE_40,
        APP_IPHONE_35,
        APP_IPAD_PRO_3GEN_129,
        APP_IPAD_PRO_3GEN_11,
        APP_IPAD_PRO_129,
        APP_IPAD_105,
        APP_IPAD_97,
        APP_DESKTOP,
        APP_WATCH_ULTRA,
        APP_WATCH_SERIES_10,
        APP_WATCH_SERIES_7,
        APP_WATCH_SERIES_4,
        APP_WATCH_SERIES_3,
        APP_APPLE_TV,
        APP_APPLE_VISION_PRO,
        IMESSAGE_APP_IPHONE_67,
        IMESSAGE_APP_IPHONE_61,
        IMESSAGE_APP_IPHONE_65,
        IMESSAGE_APP_IPHONE_58,
        IMESSAGE_APP_IPHONE_55,
        IMESSAGE_APP_IPHONE_47,
        IMESSAGE_APP_IPHONE_40,
        IMESSAGE_APP_IPAD_PRO_3GEN_129,
        IMESSAGE_APP_IPAD_PRO_3GEN_11,
        IMESSAGE_APP_IPAD_PRO_129,
        IMESSAGE_APP_IPAD_105,
        IMESSAGE_APP_IPAD_97,
    }

    public class Subscription
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @productId { get; set; }
            public bool? @familySharable { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                MISSING_METADATA,
                READY_TO_SUBMIT,
                WAITING_FOR_REVIEW,
                IN_REVIEW,
                DEVELOPER_ACTION_NEEDED,
                PENDING_BINARY_APPROVAL,
                APPROVED,
                DEVELOPER_REMOVED_FROM_SALE,
                REMOVED_FROM_SALE,
                REJECTED,
            }
            public State? @state { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum SubscriptionPeriod
            {
                ONE_WEEK,
                ONE_MONTH,
                TWO_MONTHS,
                THREE_MONTHS,
                SIX_MONTHS,
                ONE_YEAR,
            }
            public SubscriptionPeriod? @subscriptionPeriod { get; set; }
            public string? @reviewNote { get; set; }
            public int? @groupLevel { get; set; }
        }

        public class Relationships
        {
            public class SubscriptionLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class AppStoreReviewScreenshot
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class Group
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionGroups";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class IntroductoryOffers
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionIntroductoryOffers";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class PromotionalOffers
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPromotionalOffers";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class OfferCodes
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionOfferCodes";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Prices
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPrices";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class PricePoints
            {
                public RelationshipLinks? @links { get; set; }
            }

            public class PromotedPurchase
            {
                public class Data
                {
                    public string @type { get; set; } = "promotedPurchases";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class SubscriptionAvailability
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionAvailabilities";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public Data? @data { get; set; }
            }

            public class WinBackOffers
            {
                public class Data
                {
                    public string @type { get; set; } = "winBackOffers";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Images
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionImages";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public SubscriptionLocalizations? @subscriptionLocalizations { get; set; }
            public AppStoreReviewScreenshot? @appStoreReviewScreenshot { get; set; }
            public Group? @group { get; set; }
            public IntroductoryOffers? @introductoryOffers { get; set; }
            public PromotionalOffers? @promotionalOffers { get; set; }
            public OfferCodes? @offerCodes { get; set; }
            public Prices? @prices { get; set; }
            public PricePoints? @pricePoints { get; set; }
            public PromotedPurchase? @promotedPurchase { get; set; }
            public SubscriptionAvailability? @subscriptionAvailability { get; set; }
            public WinBackOffers? @winBackOffers { get; set; }
            public Images? @images { get; set; }
        }

        public string @type { get; set; } = "subscriptions";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionAppStoreReviewScreenshot
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public string? @assetToken { get; set; }
            public string? @assetType { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            public AppMediaAssetState? @assetDeliveryState { get; set; }
        }

        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
        }

        public string @type { get; set; } = "subscriptionAppStoreReviewScreenshots";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionAppStoreReviewScreenshotCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Subscription @subscription { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionAppStoreReviewScreenshots";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionAppStoreReviewScreenshotResponse
    {
        public SubscriptionAppStoreReviewScreenshot @data { get; set; } = new ();
        public Subscription[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionAppStoreReviewScreenshotUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "subscriptionAppStoreReviewScreenshots";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionAvailability
    {
        public class Attributes
        {
            public bool? @availableInNewTerritories { get; set; }
        }

        public class Relationships
        {
            public class AvailableTerritories
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public AvailableTerritories? @availableTerritories { get; set; }
        }

        public string @type { get; set; } = "subscriptionAvailabilities";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionAvailabilityCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool @availableInNewTerritories { get; set; } = false;
            }

            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class AvailableTerritories
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territories";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public Subscription @subscription { get; set; } = new ();
                public AvailableTerritories @availableTerritories { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionAvailabilities";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionAvailabilityResponse
    {
        public SubscriptionAvailability @data { get; set; } = new ();
        public Territory[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public string @productId { get; set; } = "";
                public bool? @familySharable { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum SubscriptionPeriod
                {
                    ONE_WEEK,
                    ONE_MONTH,
                    TWO_MONTHS,
                    THREE_MONTHS,
                    SIX_MONTHS,
                    ONE_YEAR,
                }
                public SubscriptionPeriod? @subscriptionPeriod { get; set; }
                public string? @reviewNote { get; set; }
                public int? @groupLevel { get; set; }
            }

            public class Relationships
            {
                public class Group
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionGroups";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Group @group { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptions";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionCustomerEligibility
    {
        NEW,
        EXISTING,
        EXPIRED,
    }

    public class SubscriptionGracePeriod
    {
        public class Attributes
        {
            public bool? @optIn { get; set; }
            public bool? @sandboxOptIn { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Duration
            {
                THREE_DAYS,
                SIXTEEN_DAYS,
                TWENTY_EIGHT_DAYS,
            }
            public Duration? @duration { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum RenewalType
            {
                ALL_RENEWALS,
                PAID_TO_PAID_ONLY,
            }
            public RenewalType? @renewalType { get; set; }
        }

        public string @type { get; set; } = "subscriptionGracePeriods";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGracePeriodDuration
    {
        THREE_DAYS,
        SIXTEEN_DAYS,
        TWENTY_EIGHT_DAYS,
    }

    public class SubscriptionGracePeriodResponse
    {
        public SubscriptionGracePeriod @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionGracePeriodUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @optIn { get; set; }
                public bool? @sandboxOptIn { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Duration
                {
                    THREE_DAYS,
                    SIXTEEN_DAYS,
                    TWENTY_EIGHT_DAYS,
                }
                public Duration? @duration { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum RenewalType
                {
                    ALL_RENEWALS,
                    PAID_TO_PAID_ONLY,
                }
                public RenewalType? @renewalType { get; set; }
            }

            public string @type { get; set; } = "subscriptionGracePeriods";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionGroup
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
        }

        public class Relationships
        {
            public class Subscriptions
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class SubscriptionGroupLocalizations
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionGroupLocalizations";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Subscriptions? @subscriptions { get; set; }
            public SubscriptionGroupLocalizations? @subscriptionGroupLocalizations { get; set; }
        }

        public string @type { get; set; } = "subscriptionGroups";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionGroupCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @referenceName { get; set; } = "";
            }

            public class Relationships
            {
                public class App
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public App @app { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionGroups";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionGroupLocalization
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @customAppName { get; set; }
            public string? @locale { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                PREPARE_FOR_SUBMISSION,
                WAITING_FOR_REVIEW,
                APPROVED,
                REJECTED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class SubscriptionGroup
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionGroups";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public SubscriptionGroup? @subscriptionGroup { get; set; }
        }

        public string @type { get; set; } = "subscriptionGroupLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionGroupLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public string? @customAppName { get; set; }
                public string @locale { get; set; } = "";
            }

            public class Relationships
            {
                public class SubscriptionGroup
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionGroups";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public SubscriptionGroup @subscriptionGroup { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionGroupLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionGroupLocalizationResponse
    {
        public SubscriptionGroupLocalization @data { get; set; } = new ();
        public SubscriptionGroup[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionGroupLocalizationsResponse
        : IHasNextLink
    {
        public SubscriptionGroupLocalization[] @data { get; set; } = { };
        public SubscriptionGroup[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionGroupLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @customAppName { get; set; }
            }

            public string @type { get; set; } = "subscriptionGroupLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionGroupResponse
    {
        public SubscriptionGroup @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionGroupsResponse
        : IHasNextLink
    {
        public SubscriptionGroup[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionGroupSubmission
    {
        public string @type { get; set; } = "subscriptionGroupSubmissions";
        public string @id { get; set; } = "";
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionGroupSubmissionCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class SubscriptionGroup
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionGroups";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public SubscriptionGroup @subscriptionGroup { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionGroupSubmissions";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionGroupSubmissionResponse
    {
        public SubscriptionGroupSubmission @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionGroupUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @referenceName { get; set; }
            }

            public string @type { get; set; } = "subscriptionGroups";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionImage
    {
        public class Attributes
        {
            public int? @fileSize { get; set; }
            public string? @fileName { get; set; }
            public string? @sourceFileChecksum { get; set; }
            public string? @assetToken { get; set; }
            public ImageAsset? @imageAsset { get; set; }
            public UploadOperation[]? @uploadOperations { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                AWAITING_UPLOAD,
                UPLOAD_COMPLETE,
                FAILED,
                PREPARE_FOR_SUBMISSION,
                WAITING_FOR_REVIEW,
                APPROVED,
                REJECTED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
        }

        public string @type { get; set; } = "subscriptionImages";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionImageCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @fileSize { get; set; } = 0;
                public string @fileName { get; set; } = "";
            }

            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Subscription @subscription { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionImages";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionImageResponse
    {
        public SubscriptionImage @data { get; set; } = new ();
        public Subscription[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionImagesResponse
        : IHasNextLink
    {
        public SubscriptionImage[] @data { get; set; } = { };
        public Subscription[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionImageUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @sourceFileChecksum { get; set; }
                public bool? @uploaded { get; set; }
            }

            public string @type { get; set; } = "subscriptionImages";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionIntroductoryOffer
    {
        public class Attributes
        {
            public string? @startDate { get; set; }
            public string? @endDate { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Duration
            {
                THREE_DAYS,
                ONE_WEEK,
                TWO_WEEKS,
                ONE_MONTH,
                TWO_MONTHS,
                THREE_MONTHS,
                SIX_MONTHS,
                ONE_YEAR,
            }
            public Duration? @duration { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum OfferMode
            {
                PAY_AS_YOU_GO,
                PAY_UP_FRONT,
                FREE_TRIAL,
            }
            public OfferMode? @offerMode { get; set; }
            public int? @numberOfPeriods { get; set; }
        }

        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubscriptionPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
            public Territory? @territory { get; set; }
            public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
        }

        public string @type { get; set; } = "subscriptionIntroductoryOffers";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionIntroductoryOfferCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @startDate { get; set; }
                public string? @endDate { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Duration
                {
                    THREE_DAYS,
                    ONE_WEEK,
                    TWO_WEEKS,
                    ONE_MONTH,
                    TWO_MONTHS,
                    THREE_MONTHS,
                    SIX_MONTHS,
                    ONE_YEAR,
                }
                public Duration @duration { get; set; } = default;
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum OfferMode
                {
                    PAY_AS_YOU_GO,
                    PAY_UP_FRONT,
                    FREE_TRIAL,
                }
                public OfferMode @offerMode { get; set; } = default;
                public int @numberOfPeriods { get; set; } = 0;
            }

            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Territory
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territories";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class SubscriptionPricePoint
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionPricePoints";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public Subscription @subscription { get; set; } = new ();
                public Territory? @territory { get; set; }
                public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
            }

            public string @type { get; set; } = "subscriptionIntroductoryOffers";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public SubscriptionPricePointInlineCreate[]? @included { get; set; }
    }

    public class SubscriptionIntroductoryOfferInlineCreate
    {
        public class Attributes
        {
            public string? @startDate { get; set; }
            public string? @endDate { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Duration
            {
                THREE_DAYS,
                ONE_WEEK,
                TWO_WEEKS,
                ONE_MONTH,
                TWO_MONTHS,
                THREE_MONTHS,
                SIX_MONTHS,
                ONE_YEAR,
            }
            public Duration @duration { get; set; } = default;
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum OfferMode
            {
                PAY_AS_YOU_GO,
                PAY_UP_FRONT,
                FREE_TRIAL,
            }
            public OfferMode @offerMode { get; set; } = default;
            public int @numberOfPeriods { get; set; } = 0;
        }

        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubscriptionPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
            public Territory? @territory { get; set; }
            public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
        }

        public string @type { get; set; } = "subscriptionIntroductoryOffers";
        public string? @id { get; set; }
        public Attributes @attributes { get; set; } = new ();
        public Relationships? @relationships { get; set; }
    }

    public class SubscriptionIntroductoryOfferResponse
    {
        public SubscriptionIntroductoryOffer @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionIntroductoryOffersLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "subscriptionIntroductoryOffers";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class SubscriptionIntroductoryOffersLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "subscriptionIntroductoryOffers";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionIntroductoryOffersResponse
        : IHasNextLink
    {
        public SubscriptionIntroductoryOffer[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionIntroductoryOfferUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @endDate { get; set; }
            }

            public string @type { get; set; } = "subscriptionIntroductoryOffers";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionLocalization
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @locale { get; set; }
            public string? @description { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum State
            {
                PREPARE_FOR_SUBMISSION,
                WAITING_FOR_REVIEW,
                APPROVED,
                REJECTED,
            }
            public State? @state { get; set; }
        }

        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
        }

        public string @type { get; set; } = "subscriptionLocalizations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionLocalizationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public string @locale { get; set; } = "";
                public string? @description { get; set; }
            }

            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Subscription @subscription { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionLocalizations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionLocalizationResponse
    {
        public SubscriptionLocalization @data { get; set; } = new ();
        public Subscription[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionLocalizationsResponse
        : IHasNextLink
    {
        public SubscriptionLocalization[] @data { get; set; } = { };
        public Subscription[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionLocalizationUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public string? @description { get; set; }
            }

            public string @type { get; set; } = "subscriptionLocalizations";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionOfferCode
    {
        public class Attributes
        {
            public string? @name { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum CustomerEligibilities
            {
                NEW,
                EXISTING,
                EXPIRED,
            }

            public CustomerEligibilities[]? @customerEligibilities { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum OfferEligibility
            {
                STACK_WITH_INTRO_OFFERS,
                REPLACE_INTRO_OFFERS,
            }
            public OfferEligibility? @offerEligibility { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Duration
            {
                THREE_DAYS,
                ONE_WEEK,
                TWO_WEEKS,
                ONE_MONTH,
                TWO_MONTHS,
                THREE_MONTHS,
                SIX_MONTHS,
                ONE_YEAR,
            }
            public Duration? @duration { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum OfferMode
            {
                PAY_AS_YOU_GO,
                PAY_UP_FRONT,
                FREE_TRIAL,
            }
            public OfferMode? @offerMode { get; set; }
            public int? @numberOfPeriods { get; set; }
            public int? @totalNumberOfCodes { get; set; }
            public bool? @active { get; set; }
        }

        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class OneTimeUseCodes
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class CustomCodes
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionOfferCodeCustomCodes";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public class Prices
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionOfferCodePrices";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
            public OneTimeUseCodes? @oneTimeUseCodes { get; set; }
            public CustomCodes? @customCodes { get; set; }
            public Prices? @prices { get; set; }
        }

        public string @type { get; set; } = "subscriptionOfferCodes";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionOfferCodeCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum CustomerEligibilities
                {
                    NEW,
                    EXISTING,
                    EXPIRED,
                }

                public CustomerEligibilities[] @customerEligibilities { get; set; } = { };
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum OfferEligibility
                {
                    STACK_WITH_INTRO_OFFERS,
                    REPLACE_INTRO_OFFERS,
                }
                public OfferEligibility @offerEligibility { get; set; } = default;
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Duration
                {
                    THREE_DAYS,
                    ONE_WEEK,
                    TWO_WEEKS,
                    ONE_MONTH,
                    TWO_MONTHS,
                    THREE_MONTHS,
                    SIX_MONTHS,
                    ONE_YEAR,
                }
                public Duration @duration { get; set; } = default;
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum OfferMode
                {
                    PAY_AS_YOU_GO,
                    PAY_UP_FRONT,
                    FREE_TRIAL,
                }
                public OfferMode @offerMode { get; set; } = default;
                public int @numberOfPeriods { get; set; } = 0;
            }

            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Prices
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionOfferCodePrices";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public Subscription @subscription { get; set; } = new ();
                public Prices @prices { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionOfferCodes";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public SubscriptionOfferCodePriceInlineCreate[]? @included { get; set; }
    }

    public class SubscriptionOfferCodeCustomCode
    {
        public class Attributes
        {
            public string? @customCode { get; set; }
            public int? @numberOfCodes { get; set; }
            public string? @createdDate { get; set; }
            public string? @expirationDate { get; set; }
            public bool? @active { get; set; }
        }

        public class Relationships
        {
            public class OfferCode
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionOfferCodes";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public OfferCode? @offerCode { get; set; }
        }

        public string @type { get; set; } = "subscriptionOfferCodeCustomCodes";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionOfferCodeCustomCodeCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @customCode { get; set; } = "";
                public int @numberOfCodes { get; set; } = 0;
                public string? @expirationDate { get; set; }
            }

            public class Relationships
            {
                public class OfferCode
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionOfferCodes";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public OfferCode @offerCode { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionOfferCodeCustomCodes";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionOfferCodeCustomCodeResponse
    {
        public SubscriptionOfferCodeCustomCode @data { get; set; } = new ();
        public SubscriptionOfferCode[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionOfferCodeCustomCodesResponse
        : IHasNextLink
    {
        public SubscriptionOfferCodeCustomCode[] @data { get; set; } = { };
        public SubscriptionOfferCode[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionOfferCodeCustomCodeUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @active { get; set; }
            }

            public string @type { get; set; } = "subscriptionOfferCodeCustomCodes";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionOfferCodeOneTimeUseCode
    {
        public class Attributes
        {
            public int? @numberOfCodes { get; set; }
            public string? @createdDate { get; set; }
            public string? @expirationDate { get; set; }
            public bool? @active { get; set; }
        }

        public class Relationships
        {
            public class OfferCode
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionOfferCodes";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Values
            {
                public RelationshipLinks? @links { get; set; }
            }

            public OfferCode? @offerCode { get; set; }
            public Values? @values { get; set; }
        }

        public string @type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionOfferCodeOneTimeUseCodeCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int @numberOfCodes { get; set; } = 0;
                public string @expirationDate { get; set; } = "";
            }

            public class Relationships
            {
                public class OfferCode
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionOfferCodes";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public OfferCode @offerCode { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionOfferCodeOneTimeUseCodeResponse
    {
        public SubscriptionOfferCodeOneTimeUseCode @data { get; set; } = new ();
        public SubscriptionOfferCode[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionOfferCodeOneTimeUseCodesResponse
        : IHasNextLink
    {
        public SubscriptionOfferCodeOneTimeUseCode[] @data { get; set; } = { };
        public SubscriptionOfferCode[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionOfferCodeOneTimeUseCodeUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @active { get; set; }
            }

            public string @type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionOfferCodeOneTimeUseCodeValue
    {
        public string @type { get; set; } = "subscriptionOfferCodeOneTimeUseCodeValues";
        public string @id { get; set; } = "";
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionOfferCodePrice
    {
        public class Relationships
        {
            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubscriptionPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Territory? @territory { get; set; }
            public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
        }

        public string @type { get; set; } = "subscriptionOfferCodePrices";
        public string @id { get; set; } = "";
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionOfferCodePriceInlineCreate
    {
        public class Relationships
        {
            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubscriptionPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Territory? @territory { get; set; }
            public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
        }

        public string @type { get; set; } = "subscriptionOfferCodePrices";
        public string? @id { get; set; }
        public Relationships? @relationships { get; set; }
    }

    public class SubscriptionOfferCodePricesResponse
        : IHasNextLink
    {
        public SubscriptionOfferCodePrice[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionOfferCodeResponse
    {
        public SubscriptionOfferCode @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionOfferCodesResponse
        : IHasNextLink
    {
        public SubscriptionOfferCode[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionOfferCodeUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @active { get; set; }
            }

            public string @type { get; set; } = "subscriptionOfferCodes";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferDuration
    {
        THREE_DAYS,
        ONE_WEEK,
        TWO_WEEKS,
        ONE_MONTH,
        TWO_MONTHS,
        THREE_MONTHS,
        SIX_MONTHS,
        ONE_YEAR,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferEligibility
    {
        STACK_WITH_INTRO_OFFERS,
        REPLACE_INTRO_OFFERS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferMode
    {
        PAY_AS_YOU_GO,
        PAY_UP_FRONT,
        FREE_TRIAL,
    }

    public class SubscriptionPrice
    {
        public class Attributes
        {
            public string? @startDate { get; set; }
            public bool? @preserved { get; set; }
        }

        public class Relationships
        {
            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubscriptionPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Territory? @territory { get; set; }
            public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
        }

        public string @type { get; set; } = "subscriptionPrices";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionPriceCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @startDate { get; set; }
                public bool? @preserveCurrentPrice { get; set; }
            }

            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Territory
                {
                    public class Data
                    {
                        public string @type { get; set; } = "territories";
                        public string @id { get; set; } = "";
                    }

                    public Data? @data { get; set; }
                }

                public class SubscriptionPricePoint
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionPricePoints";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Subscription @subscription { get; set; } = new ();
                public Territory? @territory { get; set; }
                public SubscriptionPricePoint @subscriptionPricePoint { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionPrices";
            public Attributes? @attributes { get; set; }
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionPriceInlineCreate
    {
        public class Attributes
        {
            public string? @startDate { get; set; }
            public bool? @preserveCurrentPrice { get; set; }
        }

        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubscriptionPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
            public Territory? @territory { get; set; }
            public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
        }

        public string @type { get; set; } = "subscriptionPrices";
        public string? @id { get; set; }
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
    }

    public class SubscriptionPricePoint
    {
        public class Attributes
        {
            public string? @customerPrice { get; set; }
            public string? @proceeds { get; set; }
            public string? @proceedsYear2 { get; set; }
        }

        public class Relationships
        {
            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Equalizations
            {
                public RelationshipLinks? @links { get; set; }
            }

            public Territory? @territory { get; set; }
            public Equalizations? @equalizations { get; set; }
        }

        public string @type { get; set; } = "subscriptionPricePoints";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionPricePointInlineCreate
    {
        public string @type { get; set; } = "subscriptionPricePoints";
        public string? @id { get; set; }
    }

    public class SubscriptionPricePointResponse
    {
        public SubscriptionPricePoint @data { get; set; } = new ();
        public Territory[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionPricePointsResponse
        : IHasNextLink
    {
        public SubscriptionPricePoint[] @data { get; set; } = { };
        public Territory[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionPriceResponse
    {
        public SubscriptionPrice @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionPricesLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "subscriptionPrices";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class SubscriptionPricesLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "subscriptionPrices";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionPricesResponse
        : IHasNextLink
    {
        public SubscriptionPrice[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionPromotionalOffer
    {
        public class Attributes
        {
            public string? @name { get; set; }
            public string? @offerCode { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Duration
            {
                THREE_DAYS,
                ONE_WEEK,
                TWO_WEEKS,
                ONE_MONTH,
                TWO_MONTHS,
                THREE_MONTHS,
                SIX_MONTHS,
                ONE_YEAR,
            }
            public Duration? @duration { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum OfferMode
            {
                PAY_AS_YOU_GO,
                PAY_UP_FRONT,
                FREE_TRIAL,
            }
            public OfferMode? @offerMode { get; set; }
            public int? @numberOfPeriods { get; set; }
        }

        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Prices
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPromotionalOfferPrices";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
            public Prices? @prices { get; set; }
        }

        public string @type { get; set; } = "subscriptionPromotionalOffers";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionPromotionalOfferCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @name { get; set; } = "";
                public string @offerCode { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Duration
                {
                    THREE_DAYS,
                    ONE_WEEK,
                    TWO_WEEKS,
                    ONE_MONTH,
                    TWO_MONTHS,
                    THREE_MONTHS,
                    SIX_MONTHS,
                    ONE_YEAR,
                }
                public Duration @duration { get; set; } = default;
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum OfferMode
                {
                    PAY_AS_YOU_GO,
                    PAY_UP_FRONT,
                    FREE_TRIAL,
                }
                public OfferMode @offerMode { get; set; } = default;
                public int @numberOfPeriods { get; set; } = 0;
            }

            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Prices
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionPromotionalOfferPrices";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public Subscription @subscription { get; set; } = new ();
                public Prices @prices { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionPromotionalOffers";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public SubscriptionPromotionalOfferPriceInlineCreate[]? @included { get; set; }
    }

    public class SubscriptionPromotionalOfferInlineCreate
    {
        public class Attributes
        {
            public string @name { get; set; } = "";
            public string @offerCode { get; set; } = "";
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Duration
            {
                THREE_DAYS,
                ONE_WEEK,
                TWO_WEEKS,
                ONE_MONTH,
                TWO_MONTHS,
                THREE_MONTHS,
                SIX_MONTHS,
                ONE_YEAR,
            }
            public Duration @duration { get; set; } = default;
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum OfferMode
            {
                PAY_AS_YOU_GO,
                PAY_UP_FRONT,
                FREE_TRIAL,
            }
            public OfferMode @offerMode { get; set; } = default;
            public int @numberOfPeriods { get; set; } = 0;
        }

        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class Prices
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPromotionalOfferPrices";
                    public string @id { get; set; } = "";
                }

                public Data[]? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
            public Prices? @prices { get; set; }
        }

        public string @type { get; set; } = "subscriptionPromotionalOffers";
        public string? @id { get; set; }
        public Attributes @attributes { get; set; } = new ();
        public Relationships? @relationships { get; set; }
    }

    public class SubscriptionPromotionalOfferPrice
    {
        public class Relationships
        {
            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubscriptionPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Territory? @territory { get; set; }
            public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
        }

        public string @type { get; set; } = "subscriptionPromotionalOfferPrices";
        public string @id { get; set; } = "";
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionPromotionalOfferPriceInlineCreate
    {
        public class Relationships
        {
            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubscriptionPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Territory? @territory { get; set; }
            public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
        }

        public string @type { get; set; } = "subscriptionPromotionalOfferPrices";
        public string? @id { get; set; }
        public Relationships? @relationships { get; set; }
    }

    public class SubscriptionPromotionalOfferPricesResponse
        : IHasNextLink
    {
        public SubscriptionPromotionalOfferPrice[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionPromotionalOfferResponse
    {
        public SubscriptionPromotionalOffer @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionPromotionalOffersResponse
        : IHasNextLink
    {
        public SubscriptionPromotionalOffer[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class SubscriptionPromotionalOfferUpdateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class Prices
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionPromotionalOfferPrices";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public Prices? @prices { get; set; }
            }

            public string @type { get; set; } = "subscriptionPromotionalOffers";
            public string @id { get; set; } = "";
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
        public SubscriptionPromotionalOfferPriceInlineCreate[]? @included { get; set; }
    }

    public class SubscriptionResponse
    {
        public Subscription @data { get; set; } = new ();
        public object[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionsResponse
        : IHasNextLink
    {
        public Subscription[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionStatusUrlVersion
    {
        V1,
        V2,
    }

    public class SubscriptionSubmission
    {
        public class Relationships
        {
            public class Subscription
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptions";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Subscription? @subscription { get; set; }
        }

        public string @type { get; set; } = "subscriptionSubmissions";
        public string @id { get; set; } = "";
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class SubscriptionSubmissionCreateRequest
    {
        public class Data
        {
            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public Subscription @subscription { get; set; } = new ();
            }

            public string @type { get; set; } = "subscriptionSubmissions";
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
    }

    public class SubscriptionSubmissionResponse
    {
        public SubscriptionSubmission @data { get; set; } = new ();
        public Subscription[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class SubscriptionUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string? @name { get; set; }
                public bool? @familySharable { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum SubscriptionPeriod
                {
                    ONE_WEEK,
                    ONE_MONTH,
                    TWO_MONTHS,
                    THREE_MONTHS,
                    SIX_MONTHS,
                    ONE_YEAR,
                }
                public SubscriptionPeriod? @subscriptionPeriod { get; set; }
                public string? @reviewNote { get; set; }
                public int? @groupLevel { get; set; }
            }

            public class Relationships
            {
                public class IntroductoryOffers
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionIntroductoryOffers";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public class PromotionalOffers
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionPromotionalOffers";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public class Prices
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptionPrices";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public IntroductoryOffers? @introductoryOffers { get; set; }
                public PromotionalOffers? @promotionalOffers { get; set; }
                public Prices? @prices { get; set; }
            }

            public string @type { get; set; } = "subscriptions";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
        public SubscriptionPromotionalOfferInlineCreate[]? @included { get; set; }
    }

    public class TerritoriesResponse
        : IHasNextLink
    {
        public Territory[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class TerritoriesWithoutIncludesResponse
        : IHasNextLink
    {
        public Territory[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class Territory
    {
        public class Attributes
        {
            public string? @currency { get; set; }
        }

        public string @type { get; set; } = "territories";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class TerritoryAvailabilitiesResponse
        : IHasNextLink
    {
        public TerritoryAvailability[] @data { get; set; } = { };
        public Territory[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class TerritoryAvailability
    {
        public class Attributes
        {
            public bool? @available { get; set; }
            public string? @releaseDate { get; set; }
            public bool? @preOrderEnabled { get; set; }
            public string? @preOrderPublishDate { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum ContentStatuses
            {
                AVAILABLE,
                AVAILABLE_FOR_PREORDER_ON_DATE,
                PROCESSING_TO_NOT_AVAILABLE,
                PROCESSING_TO_AVAILABLE,
                PROCESSING_TO_PRE_ORDER,
                AVAILABLE_FOR_SALE_UNRELEASED_APP,
                PREORDER_ON_UNRELEASED_APP,
                AVAILABLE_FOR_PREORDER,
                MISSING_RATING,
                CANNOT_SELL_RESTRICTED_RATING,
                BRAZIL_REQUIRED_TAX_ID,
                MISSING_GRN,
                UNVERIFIED_GRN,
                ICP_NUMBER_INVALID,
                ICP_NUMBER_MISSING,
                CANNOT_SELL_SEVENTEEN_PLUS_APPS,
                CANNOT_SELL_SEXUALLY_EXPLICIT,
                CANNOT_SELL_NON_IOS_GAMES,
                CANNOT_SELL_SEVENTEEN_PLUS_GAMES,
                CANNOT_SELL_FREQUENT_INTENSE_GAMBLING,
                CANNOT_SELL_CASINO,
                CANNOT_SELL_CASINO_WITHOUT_GRAC,
                CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION,
                CANNOT_SELL_FREQUENT_INTENSE_ALCOHOL_TOBACCO_DRUGS,
                CANNOT_SELL_FREQUENT_INTENSE_VIOLENCE,
                CANNOT_SELL_FREQUENT_INTENSE_SEXUAL_CONTENT_NUDITY,
                CANNOT_SELL_INFREQUENT_MILD_ALCOHOL_TOBACCO_DRUGS,
                CANNOT_SELL_INFREQUENT_MILD_SEXUAL_CONTENT_NUDITY,
                CANNOT_SELL_ADULT_ONLY,
                CANNOT_SELL_FREQUENT_INTENSE,
                CANNOT_SELL_FREQUENT_INTENSE_WITHOUT_GRAC,
                CANNOT_SELL_GAMBLING_CONTESTS,
                CANNOT_SELL_GAMBLING,
                CANNOT_SELL_CONTESTS,
                CANNOT_SELL,
            }

            public ContentStatuses[]? @contentStatuses { get; set; }
        }

        public class Relationships
        {
            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Territory? @territory { get; set; }
        }

        public string @type { get; set; } = "territoryAvailabilities";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class TerritoryAvailabilityInlineCreate
    {
        public string @type { get; set; } = "territoryAvailabilities";
        public string? @id { get; set; }
    }

    public class TerritoryAvailabilityResponse
    {
        public TerritoryAvailability @data { get; set; } = new ();
        public Territory[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class TerritoryAvailabilityUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public bool? @available { get; set; }
                public string? @releaseDate { get; set; }
                public bool? @preOrderEnabled { get; set; }
            }

            public string @type { get; set; } = "territoryAvailabilities";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum TerritoryCode
    {
        ABW,
        AFG,
        AGO,
        AIA,
        ALB,
        AND,
        ANT,
        ARE,
        ARG,
        ARM,
        ASM,
        ATG,
        AUS,
        AUT,
        AZE,
        BDI,
        BEL,
        BEN,
        BES,
        BFA,
        BGD,
        BGR,
        BHR,
        BHS,
        BIH,
        BLR,
        BLZ,
        BMU,
        BOL,
        BRA,
        BRB,
        BRN,
        BTN,
        BWA,
        CAF,
        CAN,
        CHE,
        CHL,
        CHN,
        CIV,
        CMR,
        COD,
        COG,
        COK,
        COL,
        COM,
        CPV,
        CRI,
        CUB,
        CUW,
        CXR,
        CYM,
        CYP,
        CZE,
        DEU,
        DJI,
        DMA,
        DNK,
        DOM,
        DZA,
        ECU,
        EGY,
        ERI,
        ESP,
        EST,
        ETH,
        FIN,
        FJI,
        FLK,
        FRA,
        FRO,
        FSM,
        GAB,
        GBR,
        GEO,
        GGY,
        GHA,
        GIB,
        GIN,
        GLP,
        GMB,
        GNB,
        GNQ,
        GRC,
        GRD,
        GRL,
        GTM,
        GUF,
        GUM,
        GUY,
        HKG,
        HND,
        HRV,
        HTI,
        HUN,
        IDN,
        IMN,
        IND,
        IRL,
        IRQ,
        ISL,
        ISR,
        ITA,
        JAM,
        JEY,
        JOR,
        JPN,
        KAZ,
        KEN,
        KGZ,
        KHM,
        KIR,
        KNA,
        KOR,
        KWT,
        LAO,
        LBN,
        LBR,
        LBY,
        LCA,
        LIE,
        LKA,
        LSO,
        LTU,
        LUX,
        LVA,
        MAC,
        MAR,
        MCO,
        MDA,
        MDG,
        MDV,
        MEX,
        MHL,
        MKD,
        MLI,
        MLT,
        MMR,
        MNE,
        MNG,
        MNP,
        MOZ,
        MRT,
        MSR,
        MTQ,
        MUS,
        MWI,
        MYS,
        MYT,
        NAM,
        NCL,
        NER,
        NFK,
        NGA,
        NIC,
        NIU,
        NLD,
        NOR,
        NPL,
        NRU,
        NZL,
        OMN,
        PAK,
        PAN,
        PER,
        PHL,
        PLW,
        PNG,
        POL,
        PRI,
        PRT,
        PRY,
        PSE,
        PYF,
        QAT,
        REU,
        ROU,
        RUS,
        RWA,
        SAU,
        SEN,
        SGP,
        SHN,
        SLB,
        SLE,
        SLV,
        SMR,
        SOM,
        SPM,
        SRB,
        SSD,
        STP,
        SUR,
        SVK,
        SVN,
        SWE,
        SWZ,
        SXM,
        SYC,
        TCA,
        TCD,
        TGO,
        THA,
        TJK,
        TKM,
        TLS,
        TON,
        TTO,
        TUN,
        TUR,
        TUV,
        TWN,
        TZA,
        UGA,
        UKR,
        UMI,
        URY,
        USA,
        UZB,
        VAT,
        VCT,
        VEN,
        VGB,
        VIR,
        VNM,
        VUT,
        WLF,
        WSM,
        YEM,
        ZAF,
        ZMB,
        ZWE,
    }

    public class TerritoryInlineCreate
    {
        public string @type { get; set; } = "territories";
        public string? @id { get; set; }
    }

    public class TerritoryResponse
    {
        public Territory @data { get; set; } = new ();
        public DocumentLinks @links { get; set; } = new ();
    }

    public class UploadOperation
    {
        public string? @method { get; set; }
        public string? @url { get; set; }
        public int? @length { get; set; }
        public int? @offset { get; set; }
        public HttpHeader[]? @requestHeaders { get; set; }
    }

    public class User
    {
        public class Attributes
        {
            public string? @username { get; set; }
            public string? @firstName { get; set; }
            public string? @lastName { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Roles
            {
                ADMIN,
                FINANCE,
                ACCOUNT_HOLDER,
                SALES,
                MARKETING,
                APP_MANAGER,
                DEVELOPER,
                ACCESS_TO_REPORTS,
                CUSTOMER_SUPPORT,
                CREATE_APPS,
                CLOUD_MANAGED_DEVELOPER_ID,
                CLOUD_MANAGED_APP_DISTRIBUTION,
                GENERATE_INDIVIDUAL_KEYS,
            }

            public Roles[]? @roles { get; set; }
            public bool? @allAppsVisible { get; set; }
            public bool? @provisioningAllowed { get; set; }
        }

        public class Relationships
        {
            public class VisibleApps
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public VisibleApps? @visibleApps { get; set; }
        }

        public string @type { get; set; } = "users";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class UserInvitation
    {
        public class Attributes
        {
            public string? @email { get; set; }
            public string? @firstName { get; set; }
            public string? @lastName { get; set; }
            public string? @expirationDate { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Roles
            {
                ADMIN,
                FINANCE,
                ACCOUNT_HOLDER,
                SALES,
                MARKETING,
                APP_MANAGER,
                DEVELOPER,
                ACCESS_TO_REPORTS,
                CUSTOMER_SUPPORT,
                CREATE_APPS,
                CLOUD_MANAGED_DEVELOPER_ID,
                CLOUD_MANAGED_APP_DISTRIBUTION,
                GENERATE_INDIVIDUAL_KEYS,
            }

            public Roles[]? @roles { get; set; }
            public bool? @allAppsVisible { get; set; }
            public bool? @provisioningAllowed { get; set; }
        }

        public class Relationships
        {
            public class VisibleApps
            {
                public class Data
                {
                    public string @type { get; set; } = "apps";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public VisibleApps? @visibleApps { get; set; }
        }

        public string @type { get; set; } = "userInvitations";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class UserInvitationCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @email { get; set; } = "";
                public string @firstName { get; set; } = "";
                public string @lastName { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Roles
                {
                    ADMIN,
                    FINANCE,
                    ACCOUNT_HOLDER,
                    SALES,
                    MARKETING,
                    APP_MANAGER,
                    DEVELOPER,
                    ACCESS_TO_REPORTS,
                    CUSTOMER_SUPPORT,
                    CREATE_APPS,
                    CLOUD_MANAGED_DEVELOPER_ID,
                    CLOUD_MANAGED_APP_DISTRIBUTION,
                    GENERATE_INDIVIDUAL_KEYS,
                }

                public Roles[] @roles { get; set; } = { };
                public bool? @allAppsVisible { get; set; }
                public bool? @provisioningAllowed { get; set; }
            }

            public class Relationships
            {
                public class VisibleApps
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public VisibleApps? @visibleApps { get; set; }
            }

            public string @type { get; set; } = "userInvitations";
            public Attributes @attributes { get; set; } = new ();
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class UserInvitationResponse
    {
        public UserInvitation @data { get; set; } = new ();
        public App[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class UserInvitationsResponse
        : IHasNextLink
    {
        public UserInvitation[] @data { get; set; } = { };
        public App[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class UserResponse
    {
        public User @data { get; set; } = new ();
        public App[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum UserRole
    {
        ADMIN,
        FINANCE,
        ACCOUNT_HOLDER,
        SALES,
        MARKETING,
        APP_MANAGER,
        DEVELOPER,
        ACCESS_TO_REPORTS,
        CUSTOMER_SUPPORT,
        CREATE_APPS,
        CLOUD_MANAGED_DEVELOPER_ID,
        CLOUD_MANAGED_APP_DISTRIBUTION,
        GENERATE_INDIVIDUAL_KEYS,
    }

    public class UsersResponse
        : IHasNextLink
    {
        public User[] @data { get; set; } = { };
        public App[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class UserUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Roles
                {
                    ADMIN,
                    FINANCE,
                    ACCOUNT_HOLDER,
                    SALES,
                    MARKETING,
                    APP_MANAGER,
                    DEVELOPER,
                    ACCESS_TO_REPORTS,
                    CUSTOMER_SUPPORT,
                    CREATE_APPS,
                    CLOUD_MANAGED_DEVELOPER_ID,
                    CLOUD_MANAGED_APP_DISTRIBUTION,
                    GENERATE_INDIVIDUAL_KEYS,
                }

                public Roles[]? @roles { get; set; }
                public bool? @allAppsVisible { get; set; }
                public bool? @provisioningAllowed { get; set; }
            }

            public class Relationships
            {
                public class VisibleApps
                {
                    public class Data
                    {
                        public string @type { get; set; } = "apps";
                        public string @id { get; set; } = "";
                    }

                    public Data[]? @data { get; set; }
                }

                public VisibleApps? @visibleApps { get; set; }
            }

            public string @type { get; set; } = "users";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
            public Relationships? @relationships { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class UserVisibleAppsLinkagesRequest
    {
        public class Data
        {
            public string @type { get; set; } = "apps";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    public class UserVisibleAppsLinkagesResponse
        : IHasNextLink
    {
        public class Data
        {
            public string @type { get; set; } = "apps";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class WinBackOffer
    {
        public class Attributes
        {
            public string? @referenceName { get; set; }
            public string? @offerId { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Duration
            {
                THREE_DAYS,
                ONE_WEEK,
                TWO_WEEKS,
                ONE_MONTH,
                TWO_MONTHS,
                THREE_MONTHS,
                SIX_MONTHS,
                ONE_YEAR,
            }
            public Duration? @duration { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum OfferMode
            {
                PAY_AS_YOU_GO,
                PAY_UP_FRONT,
                FREE_TRIAL,
            }
            public OfferMode? @offerMode { get; set; }
            public int? @periodCount { get; set; }
            public int? @customerEligibilityPaidSubscriptionDurationInMonths { get; set; }
            public IntegerRange? @customerEligibilityTimeSinceLastSubscribedInMonths { get; set; }
            public int? @customerEligibilityWaitBetweenOffersInMonths { get; set; }
            public string? @startDate { get; set; }
            public string? @endDate { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum Priority
            {
                HIGH,
                NORMAL,
            }
            public Priority? @priority { get; set; }
            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
            public enum PromotionIntent
            {
                NOT_PROMOTED,
                USE_AUTO_GENERATED_ASSETS,
            }
            public PromotionIntent? @promotionIntent { get; set; }
        }

        public class Relationships
        {
            public class Prices
            {
                public class Data
                {
                    public string @type { get; set; } = "winBackOfferPrices";
                    public string @id { get; set; } = "";
                }

                public RelationshipLinks? @links { get; set; }
                public PagingInformation? @meta { get; set; }
                public Data[]? @data { get; set; }
            }

            public Prices? @prices { get; set; }
        }

        public string @type { get; set; } = "winBackOffers";
        public string @id { get; set; } = "";
        public Attributes? @attributes { get; set; }
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class WinBackOfferCreateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public string @referenceName { get; set; } = "";
                public string @offerId { get; set; } = "";
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Duration
                {
                    THREE_DAYS,
                    ONE_WEEK,
                    TWO_WEEKS,
                    ONE_MONTH,
                    TWO_MONTHS,
                    THREE_MONTHS,
                    SIX_MONTHS,
                    ONE_YEAR,
                }
                public Duration @duration { get; set; } = default;
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum OfferMode
                {
                    PAY_AS_YOU_GO,
                    PAY_UP_FRONT,
                    FREE_TRIAL,
                }
                public OfferMode @offerMode { get; set; } = default;
                public int @periodCount { get; set; } = 0;
                public int @customerEligibilityPaidSubscriptionDurationInMonths { get; set; } = 0;
                public IntegerRange @customerEligibilityTimeSinceLastSubscribedInMonths { get; set; } = new ();
                public int? @customerEligibilityWaitBetweenOffersInMonths { get; set; }
                public string @startDate { get; set; } = "";
                public string? @endDate { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Priority
                {
                    HIGH,
                    NORMAL,
                }
                public Priority @priority { get; set; } = default;
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum PromotionIntent
                {
                    NOT_PROMOTED,
                    USE_AUTO_GENERATED_ASSETS,
                }
                public PromotionIntent? @promotionIntent { get; set; }
            }

            public class Relationships
            {
                public class Subscription
                {
                    public class Data
                    {
                        public string @type { get; set; } = "subscriptions";
                        public string @id { get; set; } = "";
                    }

                    public Data @data { get; set; } = new ();
                }

                public class Prices
                {
                    public class Data
                    {
                        public string @type { get; set; } = "winBackOfferPrices";
                        public string @id { get; set; } = "";
                    }

                    public Data[] @data { get; set; } = { };
                }

                public Subscription @subscription { get; set; } = new ();
                public Prices @prices { get; set; } = new ();
            }

            public string @type { get; set; } = "winBackOffers";
            public Attributes @attributes { get; set; } = new ();
            public Relationships @relationships { get; set; } = new ();
        }

        public Data @data { get; set; } = new ();
        public WinBackOfferPriceInlineCreate[]? @included { get; set; }
    }

    public class WinBackOfferPrice
    {
        public class Relationships
        {
            public class Territory
            {
                public class Data
                {
                    public string @type { get; set; } = "territories";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public class SubscriptionPricePoint
            {
                public class Data
                {
                    public string @type { get; set; } = "subscriptionPricePoints";
                    public string @id { get; set; } = "";
                }

                public Data? @data { get; set; }
            }

            public Territory? @territory { get; set; }
            public SubscriptionPricePoint? @subscriptionPricePoint { get; set; }
        }

        public string @type { get; set; } = "winBackOfferPrices";
        public string @id { get; set; } = "";
        public Relationships? @relationships { get; set; }
        public ResourceLinks? @links { get; set; }
    }

    public class WinBackOfferPriceInlineCreate
    {
        public string @type { get; set; } = "winBackOfferPrices";
        public string? @id { get; set; }
    }

    public class WinBackOfferPricesResponse
        : IHasNextLink
    {
        public WinBackOfferPrice[] @data { get; set; } = { };
        public object[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class WinBackOfferResponse
    {
        public WinBackOffer @data { get; set; } = new ();
        public WinBackOfferPrice[]? @included { get; set; }
        public DocumentLinks @links { get; set; } = new ();
    }

    public class WinBackOffersResponse
        : IHasNextLink
    {
        public WinBackOffer[] @data { get; set; } = { };
        public WinBackOfferPrice[]? @included { get; set; }
        public PagedDocumentLinks @links { get; set; } = new ();
        public PagingInformation? @meta { get; set; }
    }

    public class WinBackOfferUpdateRequest
    {
        public class Data
        {
            public class Attributes
            {
                public int? @customerEligibilityPaidSubscriptionDurationInMonths { get; set; }
                public IntegerRange? @customerEligibilityTimeSinceLastSubscribedInMonths { get; set; }
                public int? @customerEligibilityWaitBetweenOffersInMonths { get; set; }
                public string? @startDate { get; set; }
                public string? @endDate { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Priority
                {
                    HIGH,
                    NORMAL,
                }
                public Priority? @priority { get; set; }
                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum PromotionIntent
                {
                    NOT_PROMOTED,
                    USE_AUTO_GENERATED_ASSETS,
                }
                public PromotionIntent? @promotionIntent { get; set; }
            }

            public string @type { get; set; } = "winBackOffers";
            public string @id { get; set; } = "";
            public Attributes? @attributes { get; set; }
        }

        public Data @data { get; set; } = new ();
    }

    public class xcodeMetrics
    {
        public class Insights
        {
            public MetricsInsight[]? @trendingUp { get; set; }
            public MetricsInsight[]? @regressions { get; set; }
        }

        public class ProductData
        {
            public class MetricCategories
            {
                public class Metrics
                {
                    public class GoalKeys
                    {
                        public string? @goalKey { get; set; }
                        public int? @lowerBound { get; set; }
                        public int? @upperBound { get; set; }
                    }

                    public class Unit
                    {
                        public string? @identifier { get; set; }
                        public string? @displayName { get; set; }
                    }

                    public class Datasets
                    {
                        public class FilterCriteria
                        {
                            public string? @percentile { get; set; }
                            public string? @device { get; set; }
                            public string? @deviceMarketingName { get; set; }
                        }

                        public class Points
                        {
                            public class PercentageBreakdown
                            {
                                public double? @value { get; set; }
                                public string? @subSystemLabel { get; set; }
                            }

                            public string? @version { get; set; }
                            public double? @value { get; set; }
                            public double? @errorMargin { get; set; }
                            public PercentageBreakdown? @percentageBreakdown { get; set; }
                            public string? @goal { get; set; }
                        }

                        public FilterCriteria? @filterCriteria { get; set; }
                        public Points[]? @points { get; set; }
                    }

                    public string? @identifier { get; set; }
                    public GoalKeys[]? @goalKeys { get; set; }
                    public Unit? @unit { get; set; }
                    public Datasets[]? @datasets { get; set; }
                }

                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                public enum Identifier
                {
                    HANG,
                    LAUNCH,
                    MEMORY,
                    DISK,
                    BATTERY,
                    TERMINATION,
                    ANIMATION,
                }
                public Identifier? @identifier { get; set; }
                public Metrics[]? @metrics { get; set; }
            }

            public string? @platform { get; set; }
            public MetricCategories[]? @metricCategories { get; set; }
        }

        public string? @version { get; set; }
        public Insights? @insights { get; set; }
        public ProductData[]? @productData { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Actors_getCollectionFieldsActors
    {
        actorType,
        userFirstName,
        userLastName,
        userEmail,
        apiKeyId,
    }

    // /v1/actors
    public Task<ActorsResponse> Actors_getCollection(string[] filterId, Actors_getCollectionFieldsActors[]? fieldsActors = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/actors";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsActors != null)
            uriBuilder.AddParameter("fields[actors]", string.Join(",", fieldsActors));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ActorsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Actors_getInstanceFieldsActors
    {
        actorType,
        userFirstName,
        userLastName,
        userEmail,
        apiKeyId,
    }

    // /v1/actors/{id}
    public Task<ActorResponse> Actors_getInstance(string id, Actors_getInstanceFieldsActors[]? fieldsActors = default, INestedLog? log = null)
    {
        string path = "/v1/actors/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsActors != null)
            uriBuilder.AddParameter("fields[actors]", string.Join(",", fieldsActors));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ActorResponse>(message, log);
    }

    // /v1/ageRatingDeclarations/{id}
    public Task<AgeRatingDeclarationResponse> AgeRatingDeclarations_updateInstance(string id, AgeRatingDeclarationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/ageRatingDeclarations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AgeRatingDeclarationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionDomains_getCollectionFieldsAlternativeDistributionDomains
    {
        domain,
        referenceName,
        createdDate,
    }

    // /v1/alternativeDistributionDomains
    public Task<AlternativeDistributionDomainsResponse> AlternativeDistributionDomains_getCollection(AlternativeDistributionDomains_getCollectionFieldsAlternativeDistributionDomains[]? fieldsAlternativeDistributionDomains = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionDomains";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionDomains != null)
            uriBuilder.AddParameter("fields[alternativeDistributionDomains]", string.Join(",", fieldsAlternativeDistributionDomains));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionDomainsResponse>(message, log);
    }

    // /v1/alternativeDistributionDomains
    public Task<AlternativeDistributionDomainResponse> AlternativeDistributionDomains_createInstance(AlternativeDistributionDomainCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionDomains";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AlternativeDistributionDomainResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionDomains_getInstanceFieldsAlternativeDistributionDomains
    {
        domain,
        referenceName,
        createdDate,
    }

    // /v1/alternativeDistributionDomains/{id}
    public Task<AlternativeDistributionDomainResponse> AlternativeDistributionDomains_getInstance(string id, AlternativeDistributionDomains_getInstanceFieldsAlternativeDistributionDomains[]? fieldsAlternativeDistributionDomains = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionDomains/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionDomains != null)
            uriBuilder.AddParameter("fields[alternativeDistributionDomains]", string.Join(",", fieldsAlternativeDistributionDomains));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionDomainResponse>(message, log);
    }

    // /v1/alternativeDistributionDomains/{id}
    public Task AlternativeDistributionDomains_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionDomains/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/alternativeDistributionKeys
    public Task<AlternativeDistributionKeysResponse> AlternativeDistributionKeys_getCollection(bool? existsApp = default, string[]? fieldsAlternativeDistributionKeys = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionKeys";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (existsApp.HasValue)
            uriBuilder.AddParameter("exists[app]", existsApp.Value.ToString());
        if (fieldsAlternativeDistributionKeys != null)
            uriBuilder.AddParameter("fields[alternativeDistributionKeys]", string.Join(",", fieldsAlternativeDistributionKeys));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionKeysResponse>(message, log);
    }

    // /v1/alternativeDistributionKeys
    public Task<AlternativeDistributionKeyResponse> AlternativeDistributionKeys_createInstance(AlternativeDistributionKeyCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionKeys";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AlternativeDistributionKeyResponse>(message, log);
    }

    // /v1/alternativeDistributionKeys/{id}
    public Task<AlternativeDistributionKeyResponse> AlternativeDistributionKeys_getInstance(string id, string[]? fieldsAlternativeDistributionKeys = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionKeys/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionKeys != null)
            uriBuilder.AddParameter("fields[alternativeDistributionKeys]", string.Join(",", fieldsAlternativeDistributionKeys));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionKeyResponse>(message, log);
    }

    // /v1/alternativeDistributionKeys/{id}
    public Task AlternativeDistributionKeys_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionKeys/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackageDeltas_getInstanceFieldsAlternativeDistributionPackageDeltas
    {
        url,
        urlExpirationDate,
        alternativeDistributionKeyBlob,
        fileChecksum,
    }

    // /v1/alternativeDistributionPackageDeltas/{id}
    public Task<AlternativeDistributionPackageDeltaResponse> AlternativeDistributionPackageDeltas_getInstance(string id, AlternativeDistributionPackageDeltas_getInstanceFieldsAlternativeDistributionPackageDeltas[]? fieldsAlternativeDistributionPackageDeltas = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionPackageDeltas/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionPackageDeltas != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageDeltas]", string.Join(",", fieldsAlternativeDistributionPackageDeltas));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionPackageDeltaResponse>(message, log);
    }

    // /v1/alternativeDistributionPackages
    public Task<AlternativeDistributionPackageResponse> AlternativeDistributionPackages_createInstance(AlternativeDistributionPackageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionPackages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AlternativeDistributionPackageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackages_getInstanceFieldsAlternativeDistributionPackageVersions
    {
        url,
        urlExpirationDate,
        version,
        fileChecksum,
        state,
        variants,
        deltas,
        alternativeDistributionPackage,
    }

    // /v1/alternativeDistributionPackages/{id}
    public Task<AlternativeDistributionPackageResponse> AlternativeDistributionPackages_getInstance(string id, string[]? fieldsAlternativeDistributionPackages = default, AlternativeDistributionPackages_getInstanceFieldsAlternativeDistributionPackageVersions[]? fieldsAlternativeDistributionPackageVersions = default, string[]? include = default, int? limitVersions = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionPackages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionPackages != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackages]", string.Join(",", fieldsAlternativeDistributionPackages));
        if (fieldsAlternativeDistributionPackageVersions != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageVersions]", string.Join(",", fieldsAlternativeDistributionPackageVersions));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitVersions.HasValue)
            uriBuilder.AddParameter("limit[versions]", limitVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionPackageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackages_versions_getToManyRelatedFilterState
    {
        COMPLETED,
        REPLACED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackages_versions_getToManyRelatedFieldsAlternativeDistributionPackageVersions
    {
        url,
        urlExpirationDate,
        version,
        fileChecksum,
        state,
        variants,
        deltas,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackages_versions_getToManyRelatedFieldsAlternativeDistributionPackageVariants
    {
        url,
        urlExpirationDate,
        alternativeDistributionKeyBlob,
        fileChecksum,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackages_versions_getToManyRelatedFieldsAlternativeDistributionPackageDeltas
    {
        url,
        urlExpirationDate,
        alternativeDistributionKeyBlob,
        fileChecksum,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackages_versions_getToManyRelatedInclude
    {
        variants,
        deltas,
        alternativeDistributionPackage,
    }

    // /v1/alternativeDistributionPackages/{id}/versions
    public Task<AlternativeDistributionPackageVersionsResponse> AlternativeDistributionPackages_versions_getToManyRelated(string id, AlternativeDistributionPackages_versions_getToManyRelatedFilterState[]? filterState = default, AlternativeDistributionPackages_versions_getToManyRelatedFieldsAlternativeDistributionPackageVersions[]? fieldsAlternativeDistributionPackageVersions = default, AlternativeDistributionPackages_versions_getToManyRelatedFieldsAlternativeDistributionPackageVariants[]? fieldsAlternativeDistributionPackageVariants = default, AlternativeDistributionPackages_versions_getToManyRelatedFieldsAlternativeDistributionPackageDeltas[]? fieldsAlternativeDistributionPackageDeltas = default, string[]? fieldsAlternativeDistributionPackages = default, int? limit = default, AlternativeDistributionPackages_versions_getToManyRelatedInclude[]? include = default, int? limitVariants = default, int? limitDeltas = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionPackages/{id}/versions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterState != null)
            uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
        if (fieldsAlternativeDistributionPackageVersions != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageVersions]", string.Join(",", fieldsAlternativeDistributionPackageVersions));
        if (fieldsAlternativeDistributionPackageVariants != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageVariants]", string.Join(",", fieldsAlternativeDistributionPackageVariants));
        if (fieldsAlternativeDistributionPackageDeltas != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageDeltas]", string.Join(",", fieldsAlternativeDistributionPackageDeltas));
        if (fieldsAlternativeDistributionPackages != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackages]", string.Join(",", fieldsAlternativeDistributionPackages));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitVariants.HasValue)
            uriBuilder.AddParameter("limit[variants]", limitVariants.Value.ToString());
        if (limitDeltas.HasValue)
            uriBuilder.AddParameter("limit[deltas]", limitDeltas.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionPackageVersionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackageVariants_getInstanceFieldsAlternativeDistributionPackageVariants
    {
        url,
        urlExpirationDate,
        alternativeDistributionKeyBlob,
        fileChecksum,
    }

    // /v1/alternativeDistributionPackageVariants/{id}
    public Task<AlternativeDistributionPackageVariantResponse> AlternativeDistributionPackageVariants_getInstance(string id, AlternativeDistributionPackageVariants_getInstanceFieldsAlternativeDistributionPackageVariants[]? fieldsAlternativeDistributionPackageVariants = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionPackageVariants/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionPackageVariants != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageVariants]", string.Join(",", fieldsAlternativeDistributionPackageVariants));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionPackageVariantResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackageVersions_getInstanceFieldsAlternativeDistributionPackageVersions
    {
        url,
        urlExpirationDate,
        version,
        fileChecksum,
        state,
        variants,
        deltas,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackageVersions_getInstanceFieldsAlternativeDistributionPackageVariants
    {
        url,
        urlExpirationDate,
        alternativeDistributionKeyBlob,
        fileChecksum,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackageVersions_getInstanceFieldsAlternativeDistributionPackageDeltas
    {
        url,
        urlExpirationDate,
        alternativeDistributionKeyBlob,
        fileChecksum,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackageVersions_getInstanceInclude
    {
        variants,
        deltas,
        alternativeDistributionPackage,
    }

    // /v1/alternativeDistributionPackageVersions/{id}
    public Task<AlternativeDistributionPackageVersionResponse> AlternativeDistributionPackageVersions_getInstance(string id, AlternativeDistributionPackageVersions_getInstanceFieldsAlternativeDistributionPackageVersions[]? fieldsAlternativeDistributionPackageVersions = default, AlternativeDistributionPackageVersions_getInstanceFieldsAlternativeDistributionPackageVariants[]? fieldsAlternativeDistributionPackageVariants = default, AlternativeDistributionPackageVersions_getInstanceFieldsAlternativeDistributionPackageDeltas[]? fieldsAlternativeDistributionPackageDeltas = default, AlternativeDistributionPackageVersions_getInstanceInclude[]? include = default, int? limitDeltas = default, int? limitVariants = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionPackageVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionPackageVersions != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageVersions]", string.Join(",", fieldsAlternativeDistributionPackageVersions));
        if (fieldsAlternativeDistributionPackageVariants != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageVariants]", string.Join(",", fieldsAlternativeDistributionPackageVariants));
        if (fieldsAlternativeDistributionPackageDeltas != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageDeltas]", string.Join(",", fieldsAlternativeDistributionPackageDeltas));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitDeltas.HasValue)
            uriBuilder.AddParameter("limit[deltas]", limitDeltas.Value.ToString());
        if (limitVariants.HasValue)
            uriBuilder.AddParameter("limit[variants]", limitVariants.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionPackageVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackageVersions_deltas_getToManyRelatedFieldsAlternativeDistributionPackageDeltas
    {
        url,
        urlExpirationDate,
        alternativeDistributionKeyBlob,
        fileChecksum,
    }

    // /v1/alternativeDistributionPackageVersions/{id}/deltas
    public Task<AlternativeDistributionPackageDeltasResponse> AlternativeDistributionPackageVersions_deltas_getToManyRelated(string id, AlternativeDistributionPackageVersions_deltas_getToManyRelatedFieldsAlternativeDistributionPackageDeltas[]? fieldsAlternativeDistributionPackageDeltas = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionPackageVersions/{id}/deltas";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionPackageDeltas != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageDeltas]", string.Join(",", fieldsAlternativeDistributionPackageDeltas));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionPackageDeltasResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AlternativeDistributionPackageVersions_variants_getToManyRelatedFieldsAlternativeDistributionPackageVariants
    {
        url,
        urlExpirationDate,
        alternativeDistributionKeyBlob,
        fileChecksum,
    }

    // /v1/alternativeDistributionPackageVersions/{id}/variants
    public Task<AlternativeDistributionPackageVariantsResponse> AlternativeDistributionPackageVersions_variants_getToManyRelated(string id, AlternativeDistributionPackageVersions_variants_getToManyRelatedFieldsAlternativeDistributionPackageVariants[]? fieldsAlternativeDistributionPackageVariants = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/alternativeDistributionPackageVersions/{id}/variants";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionPackageVariants != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageVariants]", string.Join(",", fieldsAlternativeDistributionPackageVariants));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionPackageVariantsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReportInstances_getInstanceFieldsAnalyticsReportInstances
    {
        granularity,
        processingDate,
        segments,
    }

    // /v1/analyticsReportInstances/{id}
    public Task<AnalyticsReportInstanceResponse> AnalyticsReportInstances_getInstance(string id, AnalyticsReportInstances_getInstanceFieldsAnalyticsReportInstances[]? fieldsAnalyticsReportInstances = default, INestedLog? log = null)
    {
        string path = "/v1/analyticsReportInstances/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAnalyticsReportInstances != null)
            uriBuilder.AddParameter("fields[analyticsReportInstances]", string.Join(",", fieldsAnalyticsReportInstances));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AnalyticsReportInstanceResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReportInstances_segments_getToManyRelatedFieldsAnalyticsReportSegments
    {
        checksum,
        sizeInBytes,
        url,
    }

    // /v1/analyticsReportInstances/{id}/segments
    public Task<AnalyticsReportSegmentsResponse> AnalyticsReportInstances_segments_getToManyRelated(string id, AnalyticsReportInstances_segments_getToManyRelatedFieldsAnalyticsReportSegments[]? fieldsAnalyticsReportSegments = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/analyticsReportInstances/{id}/segments";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAnalyticsReportSegments != null)
            uriBuilder.AddParameter("fields[analyticsReportSegments]", string.Join(",", fieldsAnalyticsReportSegments));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AnalyticsReportSegmentsResponse>(message, log);
    }

    // /v1/analyticsReportRequests
    public Task<AnalyticsReportRequestResponse> AnalyticsReportRequests_createInstance(AnalyticsReportRequestCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/analyticsReportRequests";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AnalyticsReportRequestResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReportRequests_getInstanceFieldsAnalyticsReportRequests
    {
        accessType,
        stoppedDueToInactivity,
        reports,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReportRequests_getInstanceFieldsAnalyticsReports
    {
        name,
        category,
        instances,
    }

    // /v1/analyticsReportRequests/{id}
    public Task<AnalyticsReportRequestResponse> AnalyticsReportRequests_getInstance(string id, AnalyticsReportRequests_getInstanceFieldsAnalyticsReportRequests[]? fieldsAnalyticsReportRequests = default, AnalyticsReportRequests_getInstanceFieldsAnalyticsReports[]? fieldsAnalyticsReports = default, string[]? include = default, int? limitReports = default, INestedLog? log = null)
    {
        string path = "/v1/analyticsReportRequests/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAnalyticsReportRequests != null)
            uriBuilder.AddParameter("fields[analyticsReportRequests]", string.Join(",", fieldsAnalyticsReportRequests));
        if (fieldsAnalyticsReports != null)
            uriBuilder.AddParameter("fields[analyticsReports]", string.Join(",", fieldsAnalyticsReports));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitReports.HasValue)
            uriBuilder.AddParameter("limit[reports]", limitReports.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AnalyticsReportRequestResponse>(message, log);
    }

    // /v1/analyticsReportRequests/{id}
    public Task AnalyticsReportRequests_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/analyticsReportRequests/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReportRequests_reports_getToManyRelatedFilterCategory
    {
        APP_USAGE,
        APP_STORE_ENGAGEMENT,
        COMMERCE,
        FRAMEWORK_USAGE,
        PERFORMANCE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReportRequests_reports_getToManyRelatedFieldsAnalyticsReports
    {
        name,
        category,
        instances,
    }

    // /v1/analyticsReportRequests/{id}/reports
    public Task<AnalyticsReportsResponse> AnalyticsReportRequests_reports_getToManyRelated(string id, string[]? filterName = default, AnalyticsReportRequests_reports_getToManyRelatedFilterCategory[]? filterCategory = default, AnalyticsReportRequests_reports_getToManyRelatedFieldsAnalyticsReports[]? fieldsAnalyticsReports = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/analyticsReportRequests/{id}/reports";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterName != null)
            uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
        if (filterCategory != null)
            uriBuilder.AddParameter("filter[category]", string.Join(",", filterCategory));
        if (fieldsAnalyticsReports != null)
            uriBuilder.AddParameter("fields[analyticsReports]", string.Join(",", fieldsAnalyticsReports));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AnalyticsReportsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReports_getInstanceFieldsAnalyticsReports
    {
        name,
        category,
        instances,
    }

    // /v1/analyticsReports/{id}
    public Task<AnalyticsReportResponse> AnalyticsReports_getInstance(string id, AnalyticsReports_getInstanceFieldsAnalyticsReports[]? fieldsAnalyticsReports = default, INestedLog? log = null)
    {
        string path = "/v1/analyticsReports/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAnalyticsReports != null)
            uriBuilder.AddParameter("fields[analyticsReports]", string.Join(",", fieldsAnalyticsReports));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AnalyticsReportResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReports_instances_getToManyRelatedFilterGranularity
    {
        DAILY,
        WEEKLY,
        MONTHLY,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReports_instances_getToManyRelatedFieldsAnalyticsReportInstances
    {
        granularity,
        processingDate,
        segments,
    }

    // /v1/analyticsReports/{id}/instances
    public Task<AnalyticsReportInstancesResponse> AnalyticsReports_instances_getToManyRelated(string id, AnalyticsReports_instances_getToManyRelatedFilterGranularity[]? filterGranularity = default, string[]? filterProcessingDate = default, AnalyticsReports_instances_getToManyRelatedFieldsAnalyticsReportInstances[]? fieldsAnalyticsReportInstances = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/analyticsReports/{id}/instances";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterGranularity != null)
            uriBuilder.AddParameter("filter[granularity]", string.Join(",", filterGranularity));
        if (filterProcessingDate != null)
            uriBuilder.AddParameter("filter[processingDate]", string.Join(",", filterProcessingDate));
        if (fieldsAnalyticsReportInstances != null)
            uriBuilder.AddParameter("fields[analyticsReportInstances]", string.Join(",", fieldsAnalyticsReportInstances));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AnalyticsReportInstancesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AnalyticsReportSegments_getInstanceFieldsAnalyticsReportSegments
    {
        checksum,
        sizeInBytes,
        url,
    }

    // /v1/analyticsReportSegments/{id}
    public Task<AnalyticsReportSegmentResponse> AnalyticsReportSegments_getInstance(string id, AnalyticsReportSegments_getInstanceFieldsAnalyticsReportSegments[]? fieldsAnalyticsReportSegments = default, INestedLog? log = null)
    {
        string path = "/v1/analyticsReportSegments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAnalyticsReportSegments != null)
            uriBuilder.AddParameter("fields[analyticsReportSegments]", string.Join(",", fieldsAnalyticsReportSegments));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AnalyticsReportSegmentResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCategories_getCollectionFilterPlatforms
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCategories_getCollectionFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCategories_getCollectionInclude
    {
        subcategories,
        parent,
    }

    // /v1/appCategories
    public Task<AppCategoriesResponse> AppCategories_getCollection(AppCategories_getCollectionFilterPlatforms[]? filterPlatforms = default, bool? existsParent = default, AppCategories_getCollectionFieldsAppCategories[]? fieldsAppCategories = default, int? limit = default, AppCategories_getCollectionInclude[]? include = default, int? limitSubcategories = default, INestedLog? log = null)
    {
        string path = "/v1/appCategories";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPlatforms != null)
            uriBuilder.AddParameter("filter[platforms]", string.Join(",", filterPlatforms));
        if (existsParent.HasValue)
            uriBuilder.AddParameter("exists[parent]", existsParent.Value.ToString());
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubcategories.HasValue)
            uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoriesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCategories_getInstanceFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCategories_getInstanceInclude
    {
        subcategories,
        parent,
    }

    // /v1/appCategories/{id}
    public Task<AppCategoryResponse> AppCategories_getInstance(string id, AppCategories_getInstanceFieldsAppCategories[]? fieldsAppCategories = default, AppCategories_getInstanceInclude[]? include = default, int? limitSubcategories = default, INestedLog? log = null)
    {
        string path = "/v1/appCategories/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubcategories.HasValue)
            uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCategories_parent_getToOneRelatedFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    // /v1/appCategories/{id}/parent
    public Task<AppCategoryWithoutIncludesResponse> AppCategories_parent_getToOneRelated(string id, AppCategories_parent_getToOneRelatedFieldsAppCategories[]? fieldsAppCategories = default, INestedLog? log = null)
    {
        string path = "/v1/appCategories/{id}/parent";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoryWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCategories_subcategories_getToManyRelatedFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    // /v1/appCategories/{id}/subcategories
    public Task<AppCategoriesWithoutIncludesResponse> AppCategories_subcategories_getToManyRelated(string id, AppCategories_subcategories_getToManyRelatedFieldsAppCategories[]? fieldsAppCategories = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/appCategories/{id}/subcategories";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoriesWithoutIncludesResponse>(message, log);
    }

    // /v1/appClipAdvancedExperienceImages
    public Task<AppClipAdvancedExperienceImageResponse> AppClipAdvancedExperienceImages_createInstance(AppClipAdvancedExperienceImageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipAdvancedExperienceImages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipAdvancedExperienceImageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipAdvancedExperienceImages_getInstanceFieldsAppClipAdvancedExperienceImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
    }

    // /v1/appClipAdvancedExperienceImages/{id}
    public Task<AppClipAdvancedExperienceImageResponse> AppClipAdvancedExperienceImages_getInstance(string id, AppClipAdvancedExperienceImages_getInstanceFieldsAppClipAdvancedExperienceImages[]? fieldsAppClipAdvancedExperienceImages = default, INestedLog? log = null)
    {
        string path = "/v1/appClipAdvancedExperienceImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipAdvancedExperienceImages != null)
            uriBuilder.AddParameter("fields[appClipAdvancedExperienceImages]", string.Join(",", fieldsAppClipAdvancedExperienceImages));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipAdvancedExperienceImageResponse>(message, log);
    }

    // /v1/appClipAdvancedExperienceImages/{id}
    public Task<AppClipAdvancedExperienceImageResponse> AppClipAdvancedExperienceImages_updateInstance(string id, AppClipAdvancedExperienceImageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipAdvancedExperienceImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipAdvancedExperienceImageResponse>(message, log);
    }

    // /v1/appClipAdvancedExperiences
    public Task<AppClipAdvancedExperienceResponse> AppClipAdvancedExperiences_createInstance(AppClipAdvancedExperienceCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipAdvancedExperiences";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipAdvancedExperienceResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipAdvancedExperiences_getInstanceFieldsAppClipAdvancedExperiences
    {
        link,
        version,
        status,
        action,
        isPoweredBy,
        place,
        placeStatus,
        businessCategory,
        defaultLanguage,
        appClip,
        headerImage,
        localizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipAdvancedExperiences_getInstanceInclude
    {
        appClip,
        headerImage,
        localizations,
    }

    // /v1/appClipAdvancedExperiences/{id}
    public Task<AppClipAdvancedExperienceResponse> AppClipAdvancedExperiences_getInstance(string id, AppClipAdvancedExperiences_getInstanceFieldsAppClipAdvancedExperiences[]? fieldsAppClipAdvancedExperiences = default, AppClipAdvancedExperiences_getInstanceInclude[]? include = default, int? limitLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appClipAdvancedExperiences/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipAdvancedExperiences != null)
            uriBuilder.AddParameter("fields[appClipAdvancedExperiences]", string.Join(",", fieldsAppClipAdvancedExperiences));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipAdvancedExperienceResponse>(message, log);
    }

    // /v1/appClipAdvancedExperiences/{id}
    public Task<AppClipAdvancedExperienceResponse> AppClipAdvancedExperiences_updateInstance(string id, AppClipAdvancedExperienceUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipAdvancedExperiences/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipAdvancedExperienceResponse>(message, log);
    }

    // /v1/appClipAppStoreReviewDetails
    public Task<AppClipAppStoreReviewDetailResponse> AppClipAppStoreReviewDetails_createInstance(AppClipAppStoreReviewDetailCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipAppStoreReviewDetails";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipAppStoreReviewDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipAppStoreReviewDetails_getInstanceFieldsAppClipAppStoreReviewDetails
    {
        invocationUrls,
        appClipDefaultExperience,
    }

    // /v1/appClipAppStoreReviewDetails/{id}
    public Task<AppClipAppStoreReviewDetailResponse> AppClipAppStoreReviewDetails_getInstance(string id, AppClipAppStoreReviewDetails_getInstanceFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appClipAppStoreReviewDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipAppStoreReviewDetailResponse>(message, log);
    }

    // /v1/appClipAppStoreReviewDetails/{id}
    public Task<AppClipAppStoreReviewDetailResponse> AppClipAppStoreReviewDetails_updateInstance(string id, AppClipAppStoreReviewDetailUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipAppStoreReviewDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipAppStoreReviewDetailResponse>(message, log);
    }

    // /v1/appClipDefaultExperienceLocalizations
    public Task<AppClipDefaultExperienceLocalizationResponse> AppClipDefaultExperienceLocalizations_createInstance(AppClipDefaultExperienceLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperienceLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipDefaultExperienceLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperienceLocalizations_getInstanceFieldsAppClipDefaultExperienceLocalizations
    {
        locale,
        subtitle,
        appClipDefaultExperience,
        appClipHeaderImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperienceLocalizations_getInstanceFieldsAppClipHeaderImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        appClipDefaultExperienceLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperienceLocalizations_getInstanceInclude
    {
        appClipDefaultExperience,
        appClipHeaderImage,
    }

    // /v1/appClipDefaultExperienceLocalizations/{id}
    public Task<AppClipDefaultExperienceLocalizationResponse> AppClipDefaultExperienceLocalizations_getInstance(string id, AppClipDefaultExperienceLocalizations_getInstanceFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, AppClipDefaultExperienceLocalizations_getInstanceFieldsAppClipHeaderImages[]? fieldsAppClipHeaderImages = default, AppClipDefaultExperienceLocalizations_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperienceLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipDefaultExperienceLocalizations != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
        if (fieldsAppClipHeaderImages != null)
            uriBuilder.AddParameter("fields[appClipHeaderImages]", string.Join(",", fieldsAppClipHeaderImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipDefaultExperienceLocalizationResponse>(message, log);
    }

    // /v1/appClipDefaultExperienceLocalizations/{id}
    public Task<AppClipDefaultExperienceLocalizationResponse> AppClipDefaultExperienceLocalizations_updateInstance(string id, AppClipDefaultExperienceLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperienceLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipDefaultExperienceLocalizationResponse>(message, log);
    }

    // /v1/appClipDefaultExperienceLocalizations/{id}
    public Task AppClipDefaultExperienceLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperienceLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperienceLocalizations_appClipHeaderImage_getToOneRelatedFieldsAppClipHeaderImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        appClipDefaultExperienceLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperienceLocalizations_appClipHeaderImage_getToOneRelatedFieldsAppClipDefaultExperienceLocalizations
    {
        locale,
        subtitle,
        appClipDefaultExperience,
        appClipHeaderImage,
    }

    // /v1/appClipDefaultExperienceLocalizations/{id}/appClipHeaderImage
    public Task<AppClipHeaderImageResponse> AppClipDefaultExperienceLocalizations_appClipHeaderImage_getToOneRelated(string id, AppClipDefaultExperienceLocalizations_appClipHeaderImage_getToOneRelatedFieldsAppClipHeaderImages[]? fieldsAppClipHeaderImages = default, AppClipDefaultExperienceLocalizations_appClipHeaderImage_getToOneRelatedFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperienceLocalizations/{id}/appClipHeaderImage";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipHeaderImages != null)
            uriBuilder.AddParameter("fields[appClipHeaderImages]", string.Join(",", fieldsAppClipHeaderImages));
        if (fieldsAppClipDefaultExperienceLocalizations != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipHeaderImageResponse>(message, log);
    }

    // /v1/appClipDefaultExperiences
    public Task<AppClipDefaultExperienceResponse> AppClipDefaultExperiences_createInstance(AppClipDefaultExperienceCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperiences";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipDefaultExperienceResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_getInstanceFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_getInstanceFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_getInstanceFieldsAppClipDefaultExperienceLocalizations
    {
        locale,
        subtitle,
        appClipDefaultExperience,
        appClipHeaderImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_getInstanceFieldsAppClipAppStoreReviewDetails
    {
        invocationUrls,
        appClipDefaultExperience,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_getInstanceInclude
    {
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    // /v1/appClipDefaultExperiences/{id}
    public Task<AppClipDefaultExperienceResponse> AppClipDefaultExperiences_getInstance(string id, AppClipDefaultExperiences_getInstanceFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, AppClipDefaultExperiences_getInstanceFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppClipDefaultExperiences_getInstanceFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, AppClipDefaultExperiences_getInstanceFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, AppClipDefaultExperiences_getInstanceInclude[]? include = default, int? limitAppClipDefaultExperienceLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperiences/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppClipDefaultExperienceLocalizations != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
        if (fieldsAppClipAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppClipDefaultExperienceLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipDefaultExperienceResponse>(message, log);
    }

    // /v1/appClipDefaultExperiences/{id}
    public Task<AppClipDefaultExperienceResponse> AppClipDefaultExperiences_updateInstance(string id, AppClipDefaultExperienceUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperiences/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipDefaultExperienceResponse>(message, log);
    }

    // /v1/appClipDefaultExperiences/{id}
    public Task AppClipDefaultExperiences_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperiences/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_appClipAppStoreReviewDetail_getToOneRelatedFieldsAppClipAppStoreReviewDetails
    {
        invocationUrls,
        appClipDefaultExperience,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_appClipAppStoreReviewDetail_getToOneRelatedFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    // /v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail
    public Task<AppClipAppStoreReviewDetailResponse> AppClipDefaultExperiences_appClipAppStoreReviewDetail_getToOneRelated(string id, AppClipDefaultExperiences_appClipAppStoreReviewDetail_getToOneRelatedFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, AppClipDefaultExperiences_appClipAppStoreReviewDetail_getToOneRelatedFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipAppStoreReviewDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_appClipDefaultExperienceLocalizations_getToManyRelatedFieldsAppClipDefaultExperienceLocalizations
    {
        locale,
        subtitle,
        appClipDefaultExperience,
        appClipHeaderImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_appClipDefaultExperienceLocalizations_getToManyRelatedFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_appClipDefaultExperienceLocalizations_getToManyRelatedFieldsAppClipHeaderImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        appClipDefaultExperienceLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_appClipDefaultExperienceLocalizations_getToManyRelatedInclude
    {
        appClipDefaultExperience,
        appClipHeaderImage,
    }

    // /v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations
    public Task<AppClipDefaultExperienceLocalizationsResponse> AppClipDefaultExperiences_appClipDefaultExperienceLocalizations_getToManyRelated(string id, string[]? filterLocale = default, AppClipDefaultExperiences_appClipDefaultExperienceLocalizations_getToManyRelatedFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, AppClipDefaultExperiences_appClipDefaultExperienceLocalizations_getToManyRelatedFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, AppClipDefaultExperiences_appClipDefaultExperienceLocalizations_getToManyRelatedFieldsAppClipHeaderImages[]? fieldsAppClipHeaderImages = default, int? limit = default, AppClipDefaultExperiences_appClipDefaultExperienceLocalizations_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLocale != null)
            uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
        if (fieldsAppClipDefaultExperienceLocalizations != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (fieldsAppClipHeaderImages != null)
            uriBuilder.AddParameter("fields[appClipHeaderImages]", string.Join(",", fieldsAppClipHeaderImages));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipDefaultExperienceLocalizationsResponse>(message, log);
    }

    // /v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion
    public Task<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelationship(string id, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse>(message, log);
    }

    public class AppClipDefaultExperiences_releaseWithAppStoreVersion_updateToOneRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appStoreVersions";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    // /v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion
    public Task AppClipDefaultExperiences_releaseWithAppStoreVersion_updateToOneRelationship(string id, AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAgeRatingDeclarations
    {
        alcoholTobaccoOrDrugUseOrReferences,
        contests,
        gamblingAndContests,
        gambling,
        gamblingSimulated,
        kidsAgeBand,
        lootBox,
        medicalOrTreatmentInformation,
        profanityOrCrudeHumor,
        sexualContentGraphicAndNudity,
        sexualContentOrNudity,
        horrorOrFearThemes,
        matureOrSuggestiveThemes,
        unrestrictedWebAccess,
        violenceCartoonOrFantasy,
        violenceRealisticProlongedGraphicOrSadistic,
        violenceRealistic,
        ageRatingOverride,
        koreaAgeRatingOverride,
        seventeenPlus,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreVersionPhasedReleases
    {
        phasedReleaseState,
        startDate,
        totalPauseDuration,
        currentDayNumber,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsRoutingAppCoverages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        appStoreVersion,
        appStoreReviewAttachments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
        platform,
        app,
        latestControlVersion,
        controlVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedInclude
    {
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        alternativeDistributionPackage,
    }

    // /v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion
    public Task<AppStoreVersionResponse> AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelated(string id, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsApps[]? fieldsApps = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, string[]? fieldsAppStoreVersionSubmissions = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, string[]? fieldsAlternativeDistributionPackages = default, AppClipDefaultExperiences_releaseWithAppStoreVersion_getToOneRelatedInclude[]? include = default, int? limitAppStoreVersionLocalizations = default, int? limitAppStoreVersionExperimentsV2 = default, INestedLog? log = null)
    {
        string path = "/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAgeRatingDeclarations != null)
            uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsAppStoreVersionPhasedReleases != null)
            uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsRoutingAppCoverages != null)
            uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
        if (fieldsAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
        if (fieldsAppStoreVersionSubmissions != null)
            uriBuilder.AddParameter("fields[appStoreVersionSubmissions]", string.Join(",", fieldsAppStoreVersionSubmissions));
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAlternativeDistributionPackages != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackages]", string.Join(",", fieldsAlternativeDistributionPackages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations.Value.ToString());
        if (limitAppStoreVersionExperimentsV2.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionResponse>(message, log);
    }

    // /v1/appClipHeaderImages
    public Task<AppClipHeaderImageResponse> AppClipHeaderImages_createInstance(AppClipHeaderImageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipHeaderImages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipHeaderImageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClipHeaderImages_getInstanceFieldsAppClipHeaderImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        appClipDefaultExperienceLocalization,
    }

    // /v1/appClipHeaderImages/{id}
    public Task<AppClipHeaderImageResponse> AppClipHeaderImages_getInstance(string id, AppClipHeaderImages_getInstanceFieldsAppClipHeaderImages[]? fieldsAppClipHeaderImages = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appClipHeaderImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipHeaderImages != null)
            uriBuilder.AddParameter("fields[appClipHeaderImages]", string.Join(",", fieldsAppClipHeaderImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipHeaderImageResponse>(message, log);
    }

    // /v1/appClipHeaderImages/{id}
    public Task<AppClipHeaderImageResponse> AppClipHeaderImages_updateInstance(string id, AppClipHeaderImageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appClipHeaderImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppClipHeaderImageResponse>(message, log);
    }

    // /v1/appClipHeaderImages/{id}
    public Task AppClipHeaderImages_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appClipHeaderImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_getInstanceFieldsAppClips
    {
        bundleId,
        app,
        appClipDefaultExperiences,
        appClipAdvancedExperiences,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_getInstanceFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_getInstanceInclude
    {
        app,
        appClipDefaultExperiences,
    }

    // /v1/appClips/{id}
    public Task<AppClipResponse> AppClips_getInstance(string id, AppClips_getInstanceFieldsAppClips[]? fieldsAppClips = default, AppClips_getInstanceFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, AppClips_getInstanceInclude[]? include = default, int? limitAppClipDefaultExperiences = default, INestedLog? log = null)
    {
        string path = "/v1/appClips/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClips != null)
            uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppClipDefaultExperiences.HasValue)
            uriBuilder.AddParameter("limit[appClipDefaultExperiences]", limitAppClipDefaultExperiences.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipAdvancedExperiences_getToManyRelatedFilterStatus
    {
        RECEIVED,
        DEACTIVATED,
        APP_TRANSFER_IN_PROGRESS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipAdvancedExperiences_getToManyRelatedFilterPlaceStatus
    {
        PENDING,
        MATCHED,
        NO_MATCH,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipAdvancedExperiences_getToManyRelatedFilterAction
    {
        OPEN,
        VIEW,
        PLAY,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipAdvancedExperiences_getToManyRelatedFieldsAppClipAdvancedExperiences
    {
        link,
        version,
        status,
        action,
        isPoweredBy,
        place,
        placeStatus,
        businessCategory,
        defaultLanguage,
        appClip,
        headerImage,
        localizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipAdvancedExperiences_getToManyRelatedFieldsAppClips
    {
        bundleId,
        app,
        appClipDefaultExperiences,
        appClipAdvancedExperiences,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipAdvancedExperiences_getToManyRelatedFieldsAppClipAdvancedExperienceImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipAdvancedExperiences_getToManyRelatedFieldsAppClipAdvancedExperienceLocalizations
    {
        language,
        title,
        subtitle,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipAdvancedExperiences_getToManyRelatedInclude
    {
        appClip,
        headerImage,
        localizations,
    }

    // /v1/appClips/{id}/appClipAdvancedExperiences
    public Task<AppClipAdvancedExperiencesResponse> AppClips_appClipAdvancedExperiences_getToManyRelated(string id, AppClips_appClipAdvancedExperiences_getToManyRelatedFilterStatus[]? filterStatus = default, AppClips_appClipAdvancedExperiences_getToManyRelatedFilterPlaceStatus[]? filterPlaceStatus = default, AppClips_appClipAdvancedExperiences_getToManyRelatedFilterAction[]? filterAction = default, AppClips_appClipAdvancedExperiences_getToManyRelatedFieldsAppClipAdvancedExperiences[]? fieldsAppClipAdvancedExperiences = default, AppClips_appClipAdvancedExperiences_getToManyRelatedFieldsAppClips[]? fieldsAppClips = default, AppClips_appClipAdvancedExperiences_getToManyRelatedFieldsAppClipAdvancedExperienceImages[]? fieldsAppClipAdvancedExperienceImages = default, AppClips_appClipAdvancedExperiences_getToManyRelatedFieldsAppClipAdvancedExperienceLocalizations[]? fieldsAppClipAdvancedExperienceLocalizations = default, int? limit = default, AppClips_appClipAdvancedExperiences_getToManyRelatedInclude[]? include = default, int? limitLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appClips/{id}/appClipAdvancedExperiences";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterStatus != null)
            uriBuilder.AddParameter("filter[status]", string.Join(",", filterStatus));
        if (filterPlaceStatus != null)
            uriBuilder.AddParameter("filter[placeStatus]", string.Join(",", filterPlaceStatus));
        if (filterAction != null)
            uriBuilder.AddParameter("filter[action]", string.Join(",", filterAction));
        if (fieldsAppClipAdvancedExperiences != null)
            uriBuilder.AddParameter("fields[appClipAdvancedExperiences]", string.Join(",", fieldsAppClipAdvancedExperiences));
        if (fieldsAppClips != null)
            uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
        if (fieldsAppClipAdvancedExperienceImages != null)
            uriBuilder.AddParameter("fields[appClipAdvancedExperienceImages]", string.Join(",", fieldsAppClipAdvancedExperienceImages));
        if (fieldsAppClipAdvancedExperienceLocalizations != null)
            uriBuilder.AddParameter("fields[appClipAdvancedExperienceLocalizations]", string.Join(",", fieldsAppClipAdvancedExperienceLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipAdvancedExperiencesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppClips
    {
        bundleId,
        app,
        appClipDefaultExperiences,
        appClipAdvancedExperiences,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppClipDefaultExperienceLocalizations
    {
        locale,
        subtitle,
        appClipDefaultExperience,
        appClipHeaderImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppClipAppStoreReviewDetails
    {
        invocationUrls,
        appClipDefaultExperience,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppClips_appClipDefaultExperiences_getToManyRelatedInclude
    {
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    // /v1/appClips/{id}/appClipDefaultExperiences
    public Task<AppClipDefaultExperiencesResponse> AppClips_appClipDefaultExperiences_getToManyRelated(string id, bool? existsReleaseWithAppStoreVersion = default, AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppClips[]? fieldsAppClips = default, AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, AppClips_appClipDefaultExperiences_getToManyRelatedFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, int? limit = default, AppClips_appClipDefaultExperiences_getToManyRelatedInclude[]? include = default, int? limitAppClipDefaultExperienceLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appClips/{id}/appClipDefaultExperiences";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (existsReleaseWithAppStoreVersion.HasValue)
            uriBuilder.AddParameter("exists[releaseWithAppStoreVersion]", existsReleaseWithAppStoreVersion.Value.ToString());
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (fieldsAppClips != null)
            uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppClipDefaultExperienceLocalizations != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
        if (fieldsAppClipAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppClipDefaultExperienceLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipDefaultExperiencesResponse>(message, log);
    }

    // /v1/appCustomProductPageLocalizations
    public Task<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizations_createInstance(AppCustomProductPageLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppCustomProductPageLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_getInstanceFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_getInstanceFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_getInstanceFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_getInstanceInclude
    {
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    // /v1/appCustomProductPageLocalizations/{id}
    public Task<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizations_getInstance(string id, AppCustomProductPageLocalizations_getInstanceFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, AppCustomProductPageLocalizations_getInstanceFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppCustomProductPageLocalizations_getInstanceFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, AppCustomProductPageLocalizations_getInstanceInclude[]? include = default, int? limitAppPreviewSets = default, int? limitAppScreenshotSets = default, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppPreviewSets.HasValue)
            uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());
        if (limitAppScreenshotSets.HasValue)
            uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCustomProductPageLocalizationResponse>(message, log);
    }

    // /v1/appCustomProductPageLocalizations/{id}
    public Task<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizations_updateInstance(string id, AppCustomProductPageLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppCustomProductPageLocalizationResponse>(message, log);
    }

    // /v1/appCustomProductPageLocalizations/{id}
    public Task AppCustomProductPageLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFilterPreviewType
    {
        IPHONE_67,
        IPHONE_61,
        IPHONE_65,
        IPHONE_58,
        IPHONE_55,
        IPHONE_47,
        IPHONE_40,
        IPHONE_35,
        IPAD_PRO_3GEN_129,
        IPAD_PRO_3GEN_11,
        IPAD_PRO_129,
        IPAD_105,
        IPAD_97,
        DESKTOP,
        APPLE_TV,
        APPLE_VISION_PRO,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviews
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        previewFrameTimeCode,
        mimeType,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appPreviewSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedInclude
    {
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    // /v1/appCustomProductPageLocalizations/{id}/appPreviewSets
    public Task<AppPreviewSetsResponse> AppCustomProductPageLocalizations_appPreviewSets_getToManyRelated(string id, AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFilterPreviewType[]? filterPreviewType = default, string[]? filterAppStoreVersionLocalization = default, string[]? filterAppStoreVersionExperimentTreatmentLocalization = default, AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviews[]? fieldsAppPreviews = default, int? limit = default, AppCustomProductPageLocalizations_appPreviewSets_getToManyRelatedInclude[]? include = default, int? limitAppPreviews = default, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageLocalizations/{id}/appPreviewSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPreviewType != null)
            uriBuilder.AddParameter("filter[previewType]", string.Join(",", filterPreviewType));
        if (filterAppStoreVersionLocalization != null)
            uriBuilder.AddParameter("filter[appStoreVersionLocalization]", string.Join(",", filterAppStoreVersionLocalization));
        if (filterAppStoreVersionExperimentTreatmentLocalization != null)
            uriBuilder.AddParameter("filter[appStoreVersionExperimentTreatmentLocalization]", string.Join(",", filterAppStoreVersionExperimentTreatmentLocalization));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (fieldsAppPreviews != null)
            uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppPreviews.HasValue)
            uriBuilder.AddParameter("limit[appPreviews]", limitAppPreviews.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPreviewSetsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFilterScreenshotDisplayType
    {
        APP_IPHONE_67,
        APP_IPHONE_61,
        APP_IPHONE_65,
        APP_IPHONE_58,
        APP_IPHONE_55,
        APP_IPHONE_47,
        APP_IPHONE_40,
        APP_IPHONE_35,
        APP_IPAD_PRO_3GEN_129,
        APP_IPAD_PRO_3GEN_11,
        APP_IPAD_PRO_129,
        APP_IPAD_105,
        APP_IPAD_97,
        APP_DESKTOP,
        APP_WATCH_ULTRA,
        APP_WATCH_SERIES_10,
        APP_WATCH_SERIES_7,
        APP_WATCH_SERIES_4,
        APP_WATCH_SERIES_3,
        APP_APPLE_TV,
        APP_APPLE_VISION_PRO,
        IMESSAGE_APP_IPHONE_67,
        IMESSAGE_APP_IPHONE_61,
        IMESSAGE_APP_IPHONE_65,
        IMESSAGE_APP_IPHONE_58,
        IMESSAGE_APP_IPHONE_55,
        IMESSAGE_APP_IPHONE_47,
        IMESSAGE_APP_IPHONE_40,
        IMESSAGE_APP_IPAD_PRO_3GEN_129,
        IMESSAGE_APP_IPAD_PRO_3GEN_11,
        IMESSAGE_APP_IPAD_PRO_129,
        IMESSAGE_APP_IPAD_105,
        IMESSAGE_APP_IPAD_97,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        appScreenshotSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedInclude
    {
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    // /v1/appCustomProductPageLocalizations/{id}/appScreenshotSets
    public Task<AppScreenshotSetsResponse> AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelated(string id, AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFilterScreenshotDisplayType[]? filterScreenshotDisplayType = default, string[]? filterAppStoreVersionLocalization = default, string[]? filterAppStoreVersionExperimentTreatmentLocalization = default, AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshots[]? fieldsAppScreenshots = default, int? limit = default, AppCustomProductPageLocalizations_appScreenshotSets_getToManyRelatedInclude[]? include = default, int? limitAppScreenshots = default, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageLocalizations/{id}/appScreenshotSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterScreenshotDisplayType != null)
            uriBuilder.AddParameter("filter[screenshotDisplayType]", string.Join(",", filterScreenshotDisplayType));
        if (filterAppStoreVersionLocalization != null)
            uriBuilder.AddParameter("filter[appStoreVersionLocalization]", string.Join(",", filterAppStoreVersionLocalization));
        if (filterAppStoreVersionExperimentTreatmentLocalization != null)
            uriBuilder.AddParameter("filter[appStoreVersionExperimentTreatmentLocalization]", string.Join(",", filterAppStoreVersionExperimentTreatmentLocalization));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (fieldsAppScreenshots != null)
            uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppScreenshots.HasValue)
            uriBuilder.AddParameter("limit[appScreenshots]", limitAppScreenshots.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppScreenshotSetsResponse>(message, log);
    }

    // /v1/appCustomProductPages
    public Task<AppCustomProductPageResponse> AppCustomProductPages_createInstance(AppCustomProductPageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppCustomProductPageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPages_getInstanceFieldsAppCustomProductPages
    {
        name,
        url,
        visible,
        app,
        appCustomProductPageVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPages_getInstanceFieldsAppCustomProductPageVersions
    {
        version,
        state,
        deepLink,
        appCustomProductPage,
        appCustomProductPageLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPages_getInstanceInclude
    {
        app,
        appCustomProductPageVersions,
    }

    // /v1/appCustomProductPages/{id}
    public Task<AppCustomProductPageResponse> AppCustomProductPages_getInstance(string id, AppCustomProductPages_getInstanceFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, AppCustomProductPages_getInstanceFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, AppCustomProductPages_getInstanceInclude[]? include = default, int? limitAppCustomProductPageVersions = default, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCustomProductPages != null)
            uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
        if (fieldsAppCustomProductPageVersions != null)
            uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppCustomProductPageVersions.HasValue)
            uriBuilder.AddParameter("limit[appCustomProductPageVersions]", limitAppCustomProductPageVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCustomProductPageResponse>(message, log);
    }

    // /v1/appCustomProductPages/{id}
    public Task<AppCustomProductPageResponse> AppCustomProductPages_updateInstance(string id, AppCustomProductPageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppCustomProductPageResponse>(message, log);
    }

    // /v1/appCustomProductPages/{id}
    public Task AppCustomProductPages_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedFilterState
    {
        PREPARE_FOR_SUBMISSION,
        READY_FOR_REVIEW,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        ACCEPTED,
        APPROVED,
        REPLACED_WITH_NEW_VERSION,
        REJECTED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedFieldsAppCustomProductPageVersions
    {
        version,
        state,
        deepLink,
        appCustomProductPage,
        appCustomProductPageLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedFieldsAppCustomProductPages
    {
        name,
        url,
        visible,
        app,
        appCustomProductPageVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedInclude
    {
        appCustomProductPage,
        appCustomProductPageLocalizations,
    }

    // /v1/appCustomProductPages/{id}/appCustomProductPageVersions
    public Task<AppCustomProductPageVersionsResponse> AppCustomProductPages_appCustomProductPageVersions_getToManyRelated(string id, AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedFilterState[]? filterState = default, AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, int? limit = default, AppCustomProductPages_appCustomProductPageVersions_getToManyRelatedInclude[]? include = default, int? limitAppCustomProductPageLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPages/{id}/appCustomProductPageVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterState != null)
            uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
        if (fieldsAppCustomProductPageVersions != null)
            uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
        if (fieldsAppCustomProductPages != null)
            uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppCustomProductPageLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appCustomProductPageLocalizations]", limitAppCustomProductPageLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCustomProductPageVersionsResponse>(message, log);
    }

    // /v1/appCustomProductPageVersions
    public Task<AppCustomProductPageVersionResponse> AppCustomProductPageVersions_createInstance(AppCustomProductPageVersionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageVersions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppCustomProductPageVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageVersions_getInstanceFieldsAppCustomProductPageVersions
    {
        version,
        state,
        deepLink,
        appCustomProductPage,
        appCustomProductPageLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageVersions_getInstanceFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageVersions_getInstanceInclude
    {
        appCustomProductPage,
        appCustomProductPageLocalizations,
    }

    // /v1/appCustomProductPageVersions/{id}
    public Task<AppCustomProductPageVersionResponse> AppCustomProductPageVersions_getInstance(string id, AppCustomProductPageVersions_getInstanceFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, AppCustomProductPageVersions_getInstanceFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, AppCustomProductPageVersions_getInstanceInclude[]? include = default, int? limitAppCustomProductPageLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCustomProductPageVersions != null)
            uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppCustomProductPageLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appCustomProductPageLocalizations]", limitAppCustomProductPageLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCustomProductPageVersionResponse>(message, log);
    }

    // /v1/appCustomProductPageVersions/{id}
    public Task<AppCustomProductPageVersionResponse> AppCustomProductPageVersions_updateInstance(string id, AppCustomProductPageVersionUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppCustomProductPageVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedFieldsAppCustomProductPageVersions
    {
        version,
        state,
        deepLink,
        appCustomProductPage,
        appCustomProductPageLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedInclude
    {
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    // /v1/appCustomProductPageVersions/{id}/appCustomProductPageLocalizations
    public Task<AppCustomProductPageLocalizationsResponse> AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelated(string id, string[]? filterLocale = default, AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limit = default, AppCustomProductPageVersions_appCustomProductPageLocalizations_getToManyRelatedInclude[]? include = default, int? limitAppScreenshotSets = default, int? limitAppPreviewSets = default, INestedLog? log = null)
    {
        string path = "/v1/appCustomProductPageVersions/{id}/appCustomProductPageLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLocale != null)
            uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (fieldsAppCustomProductPageVersions != null)
            uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppScreenshotSets.HasValue)
            uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());
        if (limitAppPreviewSets.HasValue)
            uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCustomProductPageLocalizationsResponse>(message, log);
    }

    // /v1/appEncryptionDeclarationDocuments
    public Task<AppEncryptionDeclarationDocumentResponse> AppEncryptionDeclarationDocuments_createInstance(AppEncryptionDeclarationDocumentCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEncryptionDeclarationDocuments";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEncryptionDeclarationDocumentResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarationDocuments_getInstanceFieldsAppEncryptionDeclarationDocuments
    {
        fileSize,
        fileName,
        assetToken,
        downloadUrl,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
    }

    // /v1/appEncryptionDeclarationDocuments/{id}
    public Task<AppEncryptionDeclarationDocumentResponse> AppEncryptionDeclarationDocuments_getInstance(string id, AppEncryptionDeclarationDocuments_getInstanceFieldsAppEncryptionDeclarationDocuments[]? fieldsAppEncryptionDeclarationDocuments = default, INestedLog? log = null)
    {
        string path = "/v1/appEncryptionDeclarationDocuments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEncryptionDeclarationDocuments != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarationDocuments]", string.Join(",", fieldsAppEncryptionDeclarationDocuments));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEncryptionDeclarationDocumentResponse>(message, log);
    }

    // /v1/appEncryptionDeclarationDocuments/{id}
    public Task<AppEncryptionDeclarationDocumentResponse> AppEncryptionDeclarationDocuments_updateInstance(string id, AppEncryptionDeclarationDocumentUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEncryptionDeclarationDocuments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEncryptionDeclarationDocumentResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarations_getCollectionFilterPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarations_getCollectionFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarations_getCollectionFieldsAppEncryptionDeclarationDocuments
    {
        fileSize,
        fileName,
        assetToken,
        downloadUrl,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarations_getCollectionInclude
    {
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    // /v1/appEncryptionDeclarations
    public Task<AppEncryptionDeclarationsResponse> AppEncryptionDeclarations_getCollection(AppEncryptionDeclarations_getCollectionFilterPlatform[]? filterPlatform = default, string[]? filterApp = default, string[]? filterBuilds = default, AppEncryptionDeclarations_getCollectionFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, AppEncryptionDeclarations_getCollectionFieldsAppEncryptionDeclarationDocuments[]? fieldsAppEncryptionDeclarationDocuments = default, int? limit = default, AppEncryptionDeclarations_getCollectionInclude[]? include = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/appEncryptionDeclarations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (filterBuilds != null)
            uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
        if (fieldsAppEncryptionDeclarationDocuments != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarationDocuments]", string.Join(",", fieldsAppEncryptionDeclarationDocuments));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEncryptionDeclarationsResponse>(message, log);
    }

    // /v1/appEncryptionDeclarations
    public Task<AppEncryptionDeclarationResponse> AppEncryptionDeclarations_createInstance(AppEncryptionDeclarationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEncryptionDeclarations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEncryptionDeclarationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarations_getInstanceFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarations_getInstanceFieldsAppEncryptionDeclarationDocuments
    {
        fileSize,
        fileName,
        assetToken,
        downloadUrl,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarations_getInstanceInclude
    {
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    // /v1/appEncryptionDeclarations/{id}
    public Task<AppEncryptionDeclarationResponse> AppEncryptionDeclarations_getInstance(string id, AppEncryptionDeclarations_getInstanceFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, AppEncryptionDeclarations_getInstanceFieldsAppEncryptionDeclarationDocuments[]? fieldsAppEncryptionDeclarationDocuments = default, AppEncryptionDeclarations_getInstanceInclude[]? include = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/appEncryptionDeclarations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
        if (fieldsAppEncryptionDeclarationDocuments != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarationDocuments]", string.Join(",", fieldsAppEncryptionDeclarationDocuments));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEncryptionDeclarationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarations_app_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/appEncryptionDeclarations/{id}/app
    [Obsolete]
    public Task<AppWithoutIncludesResponse> AppEncryptionDeclarations_app_getToOneRelated(string id, AppEncryptionDeclarations_app_getToOneRelatedFieldsApps[]? fieldsApps = default, INestedLog? log = null)
    {
        string path = "/v1/appEncryptionDeclarations/{id}/app";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEncryptionDeclarations_appEncryptionDeclarationDocument_getToOneRelatedFieldsAppEncryptionDeclarationDocuments
    {
        fileSize,
        fileName,
        assetToken,
        downloadUrl,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
    }

    // /v1/appEncryptionDeclarations/{id}/appEncryptionDeclarationDocument
    public Task<AppEncryptionDeclarationDocumentResponse> AppEncryptionDeclarations_appEncryptionDeclarationDocument_getToOneRelated(string id, AppEncryptionDeclarations_appEncryptionDeclarationDocument_getToOneRelatedFieldsAppEncryptionDeclarationDocuments[]? fieldsAppEncryptionDeclarationDocuments = default, INestedLog? log = null)
    {
        string path = "/v1/appEncryptionDeclarations/{id}/appEncryptionDeclarationDocument";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEncryptionDeclarationDocuments != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarationDocuments]", string.Join(",", fieldsAppEncryptionDeclarationDocuments));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEncryptionDeclarationDocumentResponse>(message, log);
    }

    public class AppEncryptionDeclarations_builds_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/appEncryptionDeclarations/{id}/relationships/builds
    [Obsolete]
    public Task AppEncryptionDeclarations_builds_createToManyRelationship(string id, AppEncryptionDeclarationBuildsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEncryptionDeclarations/{id}/relationships/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/appEventLocalizations
    public Task<AppEventLocalizationResponse> AppEventLocalizations_createInstance(AppEventLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEventLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEventLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventLocalizations_getInstanceFieldsAppEventLocalizations
    {
        locale,
        name,
        shortDescription,
        longDescription,
        appEvent,
        appEventScreenshots,
        appEventVideoClips,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventLocalizations_getInstanceFieldsAppEventScreenshots
    {
        fileSize,
        fileName,
        imageAsset,
        assetToken,
        uploadOperations,
        assetDeliveryState,
        appEventAssetType,
        appEventLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventLocalizations_getInstanceFieldsAppEventVideoClips
    {
        fileSize,
        fileName,
        previewFrameTimeCode,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appEventAssetType,
        appEventLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventLocalizations_getInstanceInclude
    {
        appEvent,
        appEventScreenshots,
        appEventVideoClips,
    }

    // /v1/appEventLocalizations/{id}
    public Task<AppEventLocalizationResponse> AppEventLocalizations_getInstance(string id, AppEventLocalizations_getInstanceFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, AppEventLocalizations_getInstanceFieldsAppEventScreenshots[]? fieldsAppEventScreenshots = default, AppEventLocalizations_getInstanceFieldsAppEventVideoClips[]? fieldsAppEventVideoClips = default, AppEventLocalizations_getInstanceInclude[]? include = default, int? limitAppEventScreenshots = default, int? limitAppEventVideoClips = default, INestedLog? log = null)
    {
        string path = "/v1/appEventLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEventLocalizations != null)
            uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
        if (fieldsAppEventScreenshots != null)
            uriBuilder.AddParameter("fields[appEventScreenshots]", string.Join(",", fieldsAppEventScreenshots));
        if (fieldsAppEventVideoClips != null)
            uriBuilder.AddParameter("fields[appEventVideoClips]", string.Join(",", fieldsAppEventVideoClips));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppEventScreenshots.HasValue)
            uriBuilder.AddParameter("limit[appEventScreenshots]", limitAppEventScreenshots.Value.ToString());
        if (limitAppEventVideoClips.HasValue)
            uriBuilder.AddParameter("limit[appEventVideoClips]", limitAppEventVideoClips.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEventLocalizationResponse>(message, log);
    }

    // /v1/appEventLocalizations/{id}
    public Task<AppEventLocalizationResponse> AppEventLocalizations_updateInstance(string id, AppEventLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEventLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEventLocalizationResponse>(message, log);
    }

    // /v1/appEventLocalizations/{id}
    public Task AppEventLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appEventLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventLocalizations_appEventScreenshots_getToManyRelatedFieldsAppEventScreenshots
    {
        fileSize,
        fileName,
        imageAsset,
        assetToken,
        uploadOperations,
        assetDeliveryState,
        appEventAssetType,
        appEventLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventLocalizations_appEventScreenshots_getToManyRelatedFieldsAppEventLocalizations
    {
        locale,
        name,
        shortDescription,
        longDescription,
        appEvent,
        appEventScreenshots,
        appEventVideoClips,
    }

    // /v1/appEventLocalizations/{id}/appEventScreenshots
    public Task<AppEventScreenshotsResponse> AppEventLocalizations_appEventScreenshots_getToManyRelated(string id, AppEventLocalizations_appEventScreenshots_getToManyRelatedFieldsAppEventScreenshots[]? fieldsAppEventScreenshots = default, AppEventLocalizations_appEventScreenshots_getToManyRelatedFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appEventLocalizations/{id}/appEventScreenshots";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEventScreenshots != null)
            uriBuilder.AddParameter("fields[appEventScreenshots]", string.Join(",", fieldsAppEventScreenshots));
        if (fieldsAppEventLocalizations != null)
            uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEventScreenshotsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventLocalizations_appEventVideoClips_getToManyRelatedFieldsAppEventVideoClips
    {
        fileSize,
        fileName,
        previewFrameTimeCode,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appEventAssetType,
        appEventLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventLocalizations_appEventVideoClips_getToManyRelatedFieldsAppEventLocalizations
    {
        locale,
        name,
        shortDescription,
        longDescription,
        appEvent,
        appEventScreenshots,
        appEventVideoClips,
    }

    // /v1/appEventLocalizations/{id}/appEventVideoClips
    public Task<AppEventVideoClipsResponse> AppEventLocalizations_appEventVideoClips_getToManyRelated(string id, AppEventLocalizations_appEventVideoClips_getToManyRelatedFieldsAppEventVideoClips[]? fieldsAppEventVideoClips = default, AppEventLocalizations_appEventVideoClips_getToManyRelatedFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appEventLocalizations/{id}/appEventVideoClips";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEventVideoClips != null)
            uriBuilder.AddParameter("fields[appEventVideoClips]", string.Join(",", fieldsAppEventVideoClips));
        if (fieldsAppEventLocalizations != null)
            uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEventVideoClipsResponse>(message, log);
    }

    // /v1/appEvents
    public Task<AppEventResponse> AppEvents_createInstance(AppEventCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEvents";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEventResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEvents_getInstanceFieldsAppEvents
    {
        referenceName,
        badge,
        eventState,
        deepLink,
        purchaseRequirement,
        primaryLocale,
        priority,
        purpose,
        territorySchedules,
        archivedTerritorySchedules,
        localizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEvents_getInstanceFieldsAppEventLocalizations
    {
        locale,
        name,
        shortDescription,
        longDescription,
        appEvent,
        appEventScreenshots,
        appEventVideoClips,
    }

    // /v1/appEvents/{id}
    public Task<AppEventResponse> AppEvents_getInstance(string id, AppEvents_getInstanceFieldsAppEvents[]? fieldsAppEvents = default, AppEvents_getInstanceFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, string[]? include = default, int? limitLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appEvents/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEvents != null)
            uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
        if (fieldsAppEventLocalizations != null)
            uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEventResponse>(message, log);
    }

    // /v1/appEvents/{id}
    public Task<AppEventResponse> AppEvents_updateInstance(string id, AppEventUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEvents/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEventResponse>(message, log);
    }

    // /v1/appEvents/{id}
    public Task AppEvents_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appEvents/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEvents_localizations_getToManyRelatedFieldsAppEventLocalizations
    {
        locale,
        name,
        shortDescription,
        longDescription,
        appEvent,
        appEventScreenshots,
        appEventVideoClips,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEvents_localizations_getToManyRelatedFieldsAppEvents
    {
        referenceName,
        badge,
        eventState,
        deepLink,
        purchaseRequirement,
        primaryLocale,
        priority,
        purpose,
        territorySchedules,
        archivedTerritorySchedules,
        localizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEvents_localizations_getToManyRelatedFieldsAppEventScreenshots
    {
        fileSize,
        fileName,
        imageAsset,
        assetToken,
        uploadOperations,
        assetDeliveryState,
        appEventAssetType,
        appEventLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEvents_localizations_getToManyRelatedFieldsAppEventVideoClips
    {
        fileSize,
        fileName,
        previewFrameTimeCode,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appEventAssetType,
        appEventLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEvents_localizations_getToManyRelatedInclude
    {
        appEvent,
        appEventScreenshots,
        appEventVideoClips,
    }

    // /v1/appEvents/{id}/localizations
    public Task<AppEventLocalizationsResponse> AppEvents_localizations_getToManyRelated(string id, AppEvents_localizations_getToManyRelatedFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, AppEvents_localizations_getToManyRelatedFieldsAppEvents[]? fieldsAppEvents = default, AppEvents_localizations_getToManyRelatedFieldsAppEventScreenshots[]? fieldsAppEventScreenshots = default, AppEvents_localizations_getToManyRelatedFieldsAppEventVideoClips[]? fieldsAppEventVideoClips = default, int? limit = default, AppEvents_localizations_getToManyRelatedInclude[]? include = default, int? limitAppEventScreenshots = default, int? limitAppEventVideoClips = default, INestedLog? log = null)
    {
        string path = "/v1/appEvents/{id}/localizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEventLocalizations != null)
            uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
        if (fieldsAppEvents != null)
            uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
        if (fieldsAppEventScreenshots != null)
            uriBuilder.AddParameter("fields[appEventScreenshots]", string.Join(",", fieldsAppEventScreenshots));
        if (fieldsAppEventVideoClips != null)
            uriBuilder.AddParameter("fields[appEventVideoClips]", string.Join(",", fieldsAppEventVideoClips));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppEventScreenshots.HasValue)
            uriBuilder.AddParameter("limit[appEventScreenshots]", limitAppEventScreenshots.Value.ToString());
        if (limitAppEventVideoClips.HasValue)
            uriBuilder.AddParameter("limit[appEventVideoClips]", limitAppEventVideoClips.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEventLocalizationsResponse>(message, log);
    }

    // /v1/appEventScreenshots
    public Task<AppEventScreenshotResponse> AppEventScreenshots_createInstance(AppEventScreenshotCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEventScreenshots";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEventScreenshotResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventScreenshots_getInstanceFieldsAppEventScreenshots
    {
        fileSize,
        fileName,
        imageAsset,
        assetToken,
        uploadOperations,
        assetDeliveryState,
        appEventAssetType,
        appEventLocalization,
    }

    // /v1/appEventScreenshots/{id}
    public Task<AppEventScreenshotResponse> AppEventScreenshots_getInstance(string id, AppEventScreenshots_getInstanceFieldsAppEventScreenshots[]? fieldsAppEventScreenshots = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appEventScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEventScreenshots != null)
            uriBuilder.AddParameter("fields[appEventScreenshots]", string.Join(",", fieldsAppEventScreenshots));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEventScreenshotResponse>(message, log);
    }

    // /v1/appEventScreenshots/{id}
    public Task<AppEventScreenshotResponse> AppEventScreenshots_updateInstance(string id, AppEventScreenshotUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEventScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEventScreenshotResponse>(message, log);
    }

    // /v1/appEventScreenshots/{id}
    public Task AppEventScreenshots_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appEventScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/appEventVideoClips
    public Task<AppEventVideoClipResponse> AppEventVideoClips_createInstance(AppEventVideoClipCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEventVideoClips";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEventVideoClipResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppEventVideoClips_getInstanceFieldsAppEventVideoClips
    {
        fileSize,
        fileName,
        previewFrameTimeCode,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appEventAssetType,
        appEventLocalization,
    }

    // /v1/appEventVideoClips/{id}
    public Task<AppEventVideoClipResponse> AppEventVideoClips_getInstance(string id, AppEventVideoClips_getInstanceFieldsAppEventVideoClips[]? fieldsAppEventVideoClips = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appEventVideoClips/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEventVideoClips != null)
            uriBuilder.AddParameter("fields[appEventVideoClips]", string.Join(",", fieldsAppEventVideoClips));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEventVideoClipResponse>(message, log);
    }

    // /v1/appEventVideoClips/{id}
    public Task<AppEventVideoClipResponse> AppEventVideoClips_updateInstance(string id, AppEventVideoClipUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appEventVideoClips/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppEventVideoClipResponse>(message, log);
    }

    // /v1/appEventVideoClips/{id}
    public Task AppEventVideoClips_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appEventVideoClips/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/appInfoLocalizations
    public Task<AppInfoLocalizationResponse> AppInfoLocalizations_createInstance(AppInfoLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appInfoLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppInfoLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfoLocalizations_getInstanceFieldsAppInfoLocalizations
    {
        locale,
        name,
        subtitle,
        privacyPolicyUrl,
        privacyChoicesUrl,
        privacyPolicyText,
        appInfo,
    }

    // /v1/appInfoLocalizations/{id}
    public Task<AppInfoLocalizationResponse> AppInfoLocalizations_getInstance(string id, AppInfoLocalizations_getInstanceFieldsAppInfoLocalizations[]? fieldsAppInfoLocalizations = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appInfoLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppInfoLocalizations != null)
            uriBuilder.AddParameter("fields[appInfoLocalizations]", string.Join(",", fieldsAppInfoLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppInfoLocalizationResponse>(message, log);
    }

    // /v1/appInfoLocalizations/{id}
    public Task<AppInfoLocalizationResponse> AppInfoLocalizations_updateInstance(string id, AppInfoLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appInfoLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppInfoLocalizationResponse>(message, log);
    }

    // /v1/appInfoLocalizations/{id}
    public Task AppInfoLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appInfoLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_getInstanceFieldsAppInfos
    {
        appStoreState,
        state,
        appStoreAgeRating,
        australiaAgeRating,
        brazilAgeRating,
        brazilAgeRatingV2,
        franceAgeRating,
        koreaAgeRating,
        kidsAgeBand,
        app,
        ageRatingDeclaration,
        appInfoLocalizations,
        primaryCategory,
        primarySubcategoryOne,
        primarySubcategoryTwo,
        secondaryCategory,
        secondarySubcategoryOne,
        secondarySubcategoryTwo,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_getInstanceFieldsAgeRatingDeclarations
    {
        alcoholTobaccoOrDrugUseOrReferences,
        contests,
        gamblingAndContests,
        gambling,
        gamblingSimulated,
        kidsAgeBand,
        lootBox,
        medicalOrTreatmentInformation,
        profanityOrCrudeHumor,
        sexualContentGraphicAndNudity,
        sexualContentOrNudity,
        horrorOrFearThemes,
        matureOrSuggestiveThemes,
        unrestrictedWebAccess,
        violenceCartoonOrFantasy,
        violenceRealisticProlongedGraphicOrSadistic,
        violenceRealistic,
        ageRatingOverride,
        koreaAgeRatingOverride,
        seventeenPlus,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_getInstanceFieldsAppInfoLocalizations
    {
        locale,
        name,
        subtitle,
        privacyPolicyUrl,
        privacyChoicesUrl,
        privacyPolicyText,
        appInfo,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_getInstanceFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_getInstanceInclude
    {
        app,
        ageRatingDeclaration,
        appInfoLocalizations,
        primaryCategory,
        primarySubcategoryOne,
        primarySubcategoryTwo,
        secondaryCategory,
        secondarySubcategoryOne,
        secondarySubcategoryTwo,
    }

    // /v1/appInfos/{id}
    public Task<AppInfoResponse> AppInfos_getInstance(string id, AppInfos_getInstanceFieldsAppInfos[]? fieldsAppInfos = default, AppInfos_getInstanceFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, AppInfos_getInstanceFieldsAppInfoLocalizations[]? fieldsAppInfoLocalizations = default, AppInfos_getInstanceFieldsAppCategories[]? fieldsAppCategories = default, AppInfos_getInstanceInclude[]? include = default, int? limitAppInfoLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppInfos != null)
            uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
        if (fieldsAgeRatingDeclarations != null)
            uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
        if (fieldsAppInfoLocalizations != null)
            uriBuilder.AddParameter("fields[appInfoLocalizations]", string.Join(",", fieldsAppInfoLocalizations));
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppInfoLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appInfoLocalizations]", limitAppInfoLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppInfoResponse>(message, log);
    }

    // /v1/appInfos/{id}
    public Task<AppInfoResponse> AppInfos_updateInstance(string id, AppInfoUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppInfoResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_ageRatingDeclaration_getToOneRelatedFieldsAgeRatingDeclarations
    {
        alcoholTobaccoOrDrugUseOrReferences,
        contests,
        gamblingAndContests,
        gambling,
        gamblingSimulated,
        kidsAgeBand,
        lootBox,
        medicalOrTreatmentInformation,
        profanityOrCrudeHumor,
        sexualContentGraphicAndNudity,
        sexualContentOrNudity,
        horrorOrFearThemes,
        matureOrSuggestiveThemes,
        unrestrictedWebAccess,
        violenceCartoonOrFantasy,
        violenceRealisticProlongedGraphicOrSadistic,
        violenceRealistic,
        ageRatingOverride,
        koreaAgeRatingOverride,
        seventeenPlus,
    }

    // /v1/appInfos/{id}/ageRatingDeclaration
    public Task<AgeRatingDeclarationResponse> AppInfos_ageRatingDeclaration_getToOneRelated(string id, AppInfos_ageRatingDeclaration_getToOneRelatedFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}/ageRatingDeclaration";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAgeRatingDeclarations != null)
            uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AgeRatingDeclarationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_appInfoLocalizations_getToManyRelatedFieldsAppInfoLocalizations
    {
        locale,
        name,
        subtitle,
        privacyPolicyUrl,
        privacyChoicesUrl,
        privacyPolicyText,
        appInfo,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_appInfoLocalizations_getToManyRelatedFieldsAppInfos
    {
        appStoreState,
        state,
        appStoreAgeRating,
        australiaAgeRating,
        brazilAgeRating,
        brazilAgeRatingV2,
        franceAgeRating,
        koreaAgeRating,
        kidsAgeBand,
        app,
        ageRatingDeclaration,
        appInfoLocalizations,
        primaryCategory,
        primarySubcategoryOne,
        primarySubcategoryTwo,
        secondaryCategory,
        secondarySubcategoryOne,
        secondarySubcategoryTwo,
    }

    // /v1/appInfos/{id}/appInfoLocalizations
    public Task<AppInfoLocalizationsResponse> AppInfos_appInfoLocalizations_getToManyRelated(string id, string[]? filterLocale = default, AppInfos_appInfoLocalizations_getToManyRelatedFieldsAppInfoLocalizations[]? fieldsAppInfoLocalizations = default, AppInfos_appInfoLocalizations_getToManyRelatedFieldsAppInfos[]? fieldsAppInfos = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}/appInfoLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLocale != null)
            uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
        if (fieldsAppInfoLocalizations != null)
            uriBuilder.AddParameter("fields[appInfoLocalizations]", string.Join(",", fieldsAppInfoLocalizations));
        if (fieldsAppInfos != null)
            uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppInfoLocalizationsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_primaryCategory_getToOneRelatedFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_primaryCategory_getToOneRelatedInclude
    {
        subcategories,
        parent,
    }

    // /v1/appInfos/{id}/primaryCategory
    public Task<AppCategoryResponse> AppInfos_primaryCategory_getToOneRelated(string id, AppInfos_primaryCategory_getToOneRelatedFieldsAppCategories[]? fieldsAppCategories = default, AppInfos_primaryCategory_getToOneRelatedInclude[]? include = default, int? limitSubcategories = default, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}/primaryCategory";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubcategories.HasValue)
            uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_primarySubcategoryOne_getToOneRelatedFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_primarySubcategoryOne_getToOneRelatedInclude
    {
        subcategories,
        parent,
    }

    // /v1/appInfos/{id}/primarySubcategoryOne
    public Task<AppCategoryResponse> AppInfos_primarySubcategoryOne_getToOneRelated(string id, AppInfos_primarySubcategoryOne_getToOneRelatedFieldsAppCategories[]? fieldsAppCategories = default, AppInfos_primarySubcategoryOne_getToOneRelatedInclude[]? include = default, int? limitSubcategories = default, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}/primarySubcategoryOne";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubcategories.HasValue)
            uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_primarySubcategoryTwo_getToOneRelatedFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_primarySubcategoryTwo_getToOneRelatedInclude
    {
        subcategories,
        parent,
    }

    // /v1/appInfos/{id}/primarySubcategoryTwo
    public Task<AppCategoryResponse> AppInfos_primarySubcategoryTwo_getToOneRelated(string id, AppInfos_primarySubcategoryTwo_getToOneRelatedFieldsAppCategories[]? fieldsAppCategories = default, AppInfos_primarySubcategoryTwo_getToOneRelatedInclude[]? include = default, int? limitSubcategories = default, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}/primarySubcategoryTwo";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubcategories.HasValue)
            uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_secondaryCategory_getToOneRelatedFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_secondaryCategory_getToOneRelatedInclude
    {
        subcategories,
        parent,
    }

    // /v1/appInfos/{id}/secondaryCategory
    public Task<AppCategoryResponse> AppInfos_secondaryCategory_getToOneRelated(string id, AppInfos_secondaryCategory_getToOneRelatedFieldsAppCategories[]? fieldsAppCategories = default, AppInfos_secondaryCategory_getToOneRelatedInclude[]? include = default, int? limitSubcategories = default, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}/secondaryCategory";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubcategories.HasValue)
            uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_secondarySubcategoryOne_getToOneRelatedFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_secondarySubcategoryOne_getToOneRelatedInclude
    {
        subcategories,
        parent,
    }

    // /v1/appInfos/{id}/secondarySubcategoryOne
    public Task<AppCategoryResponse> AppInfos_secondarySubcategoryOne_getToOneRelated(string id, AppInfos_secondarySubcategoryOne_getToOneRelatedFieldsAppCategories[]? fieldsAppCategories = default, AppInfos_secondarySubcategoryOne_getToOneRelatedInclude[]? include = default, int? limitSubcategories = default, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}/secondarySubcategoryOne";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubcategories.HasValue)
            uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_secondarySubcategoryTwo_getToOneRelatedFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppInfos_secondarySubcategoryTwo_getToOneRelatedInclude
    {
        subcategories,
        parent,
    }

    // /v1/appInfos/{id}/secondarySubcategoryTwo
    public Task<AppCategoryResponse> AppInfos_secondarySubcategoryTwo_getToOneRelated(string id, AppInfos_secondarySubcategoryTwo_getToOneRelatedFieldsAppCategories[]? fieldsAppCategories = default, AppInfos_secondarySubcategoryTwo_getToOneRelatedInclude[]? include = default, int? limitSubcategories = default, INestedLog? log = null)
    {
        string path = "/v1/appInfos/{id}/secondarySubcategoryTwo";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubcategories.HasValue)
            uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCategoryResponse>(message, log);
    }

    // /v1/appPreviews
    public Task<AppPreviewResponse> AppPreviews_createInstance(AppPreviewCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appPreviews";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppPreviewResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPreviews_getInstanceFieldsAppPreviews
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        previewFrameTimeCode,
        mimeType,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appPreviewSet,
    }

    // /v1/appPreviews/{id}
    public Task<AppPreviewResponse> AppPreviews_getInstance(string id, AppPreviews_getInstanceFieldsAppPreviews[]? fieldsAppPreviews = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appPreviews/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppPreviews != null)
            uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPreviewResponse>(message, log);
    }

    // /v1/appPreviews/{id}
    public Task<AppPreviewResponse> AppPreviews_updateInstance(string id, AppPreviewUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appPreviews/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppPreviewResponse>(message, log);
    }

    // /v1/appPreviews/{id}
    public Task AppPreviews_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appPreviews/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/appPreviewSets
    public Task<AppPreviewSetResponse> AppPreviewSets_createInstance(AppPreviewSetCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appPreviewSets";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppPreviewSetResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPreviewSets_getInstanceFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPreviewSets_getInstanceFieldsAppPreviews
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        previewFrameTimeCode,
        mimeType,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appPreviewSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPreviewSets_getInstanceInclude
    {
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    // /v1/appPreviewSets/{id}
    public Task<AppPreviewSetResponse> AppPreviewSets_getInstance(string id, AppPreviewSets_getInstanceFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, AppPreviewSets_getInstanceFieldsAppPreviews[]? fieldsAppPreviews = default, AppPreviewSets_getInstanceInclude[]? include = default, int? limitAppPreviews = default, INestedLog? log = null)
    {
        string path = "/v1/appPreviewSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (fieldsAppPreviews != null)
            uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppPreviews.HasValue)
            uriBuilder.AddParameter("limit[appPreviews]", limitAppPreviews.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPreviewSetResponse>(message, log);
    }

    // /v1/appPreviewSets/{id}
    public Task AppPreviewSets_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appPreviewSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPreviewSets_appPreviews_getToManyRelatedFieldsAppPreviews
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        previewFrameTimeCode,
        mimeType,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appPreviewSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPreviewSets_appPreviews_getToManyRelatedFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    // /v1/appPreviewSets/{id}/appPreviews
    public Task<AppPreviewsResponse> AppPreviewSets_appPreviews_getToManyRelated(string id, AppPreviewSets_appPreviews_getToManyRelatedFieldsAppPreviews[]? fieldsAppPreviews = default, AppPreviewSets_appPreviews_getToManyRelatedFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appPreviewSets/{id}/appPreviews";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppPreviews != null)
            uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPreviewsResponse>(message, log);
    }

    // /v1/appPreviewSets/{id}/relationships/appPreviews
    public Task<AppPreviewSetAppPreviewsLinkagesResponse> AppPreviewSets_appPreviews_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/appPreviewSets/{id}/relationships/appPreviews";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPreviewSetAppPreviewsLinkagesResponse>(message, log);
    }

    public class AppPreviewSets_appPreviews_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appPreviews";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/appPreviewSets/{id}/relationships/appPreviews
    public Task AppPreviewSets_appPreviews_replaceToManyRelationship(string id, AppPreviewSetAppPreviewsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/appPreviewSets/{id}/relationships/appPreviews";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/appPriceSchedules
    public Task<AppPriceScheduleResponse> AppPriceSchedules_createInstance(AppPriceScheduleCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appPriceSchedules";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppPriceScheduleResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPriceSchedules_getInstanceFieldsAppPriceSchedules
    {
        app,
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPriceSchedules_getInstanceFieldsAppPrices
    {
        manual,
        startDate,
        endDate,
        appPricePoint,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPriceSchedules_getInstanceInclude
    {
        app,
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    // /v1/appPriceSchedules/{id}
    public Task<AppPriceScheduleResponse> AppPriceSchedules_getInstance(string id, AppPriceSchedules_getInstanceFieldsAppPriceSchedules[]? fieldsAppPriceSchedules = default, string[]? fieldsTerritories = default, AppPriceSchedules_getInstanceFieldsAppPrices[]? fieldsAppPrices = default, AppPriceSchedules_getInstanceInclude[]? include = default, int? limitAutomaticPrices = default, int? limitManualPrices = default, INestedLog? log = null)
    {
        string path = "/v1/appPriceSchedules/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppPriceSchedules != null)
            uriBuilder.AddParameter("fields[appPriceSchedules]", string.Join(",", fieldsAppPriceSchedules));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (fieldsAppPrices != null)
            uriBuilder.AddParameter("fields[appPrices]", string.Join(",", fieldsAppPrices));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAutomaticPrices.HasValue)
            uriBuilder.AddParameter("limit[automaticPrices]", limitAutomaticPrices.Value.ToString());
        if (limitManualPrices.HasValue)
            uriBuilder.AddParameter("limit[manualPrices]", limitManualPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPriceScheduleResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPriceSchedules_automaticPrices_getToManyRelatedFieldsAppPrices
    {
        manual,
        startDate,
        endDate,
        appPricePoint,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPriceSchedules_automaticPrices_getToManyRelatedFieldsAppPricePoints
    {
        customerPrice,
        proceeds,
        app,
        equalizations,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPriceSchedules_automaticPrices_getToManyRelatedInclude
    {
        appPricePoint,
        territory,
    }

    // /v1/appPriceSchedules/{id}/automaticPrices
    public Task<AppPricesV2Response> AppPriceSchedules_automaticPrices_getToManyRelated(string id, string[]? filterStartDate = default, string[]? filterEndDate = default, string[]? filterTerritory = default, AppPriceSchedules_automaticPrices_getToManyRelatedFieldsAppPrices[]? fieldsAppPrices = default, AppPriceSchedules_automaticPrices_getToManyRelatedFieldsAppPricePoints[]? fieldsAppPricePoints = default, string[]? fieldsTerritories = default, int? limit = default, AppPriceSchedules_automaticPrices_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appPriceSchedules/{id}/automaticPrices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterStartDate != null)
            uriBuilder.AddParameter("filter[startDate]", string.Join(",", filterStartDate));
        if (filterEndDate != null)
            uriBuilder.AddParameter("filter[endDate]", string.Join(",", filterEndDate));
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsAppPrices != null)
            uriBuilder.AddParameter("fields[appPrices]", string.Join(",", fieldsAppPrices));
        if (fieldsAppPricePoints != null)
            uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPricesV2Response>(message, log);
    }

    // /v1/appPriceSchedules/{id}/baseTerritory
    public Task<TerritoryResponse> AppPriceSchedules_baseTerritory_getToOneRelated(string id, string[]? fieldsTerritories = default, INestedLog? log = null)
    {
        string path = "/v1/appPriceSchedules/{id}/baseTerritory";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<TerritoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPriceSchedules_manualPrices_getToManyRelatedFieldsAppPrices
    {
        manual,
        startDate,
        endDate,
        appPricePoint,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPriceSchedules_manualPrices_getToManyRelatedFieldsAppPricePoints
    {
        customerPrice,
        proceeds,
        app,
        equalizations,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPriceSchedules_manualPrices_getToManyRelatedInclude
    {
        appPricePoint,
        territory,
    }

    // /v1/appPriceSchedules/{id}/manualPrices
    public Task<AppPricesV2Response> AppPriceSchedules_manualPrices_getToManyRelated(string id, string[]? filterStartDate = default, string[]? filterEndDate = default, string[]? filterTerritory = default, AppPriceSchedules_manualPrices_getToManyRelatedFieldsAppPrices[]? fieldsAppPrices = default, AppPriceSchedules_manualPrices_getToManyRelatedFieldsAppPricePoints[]? fieldsAppPricePoints = default, string[]? fieldsTerritories = default, int? limit = default, AppPriceSchedules_manualPrices_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appPriceSchedules/{id}/manualPrices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterStartDate != null)
            uriBuilder.AddParameter("filter[startDate]", string.Join(",", filterStartDate));
        if (filterEndDate != null)
            uriBuilder.AddParameter("filter[endDate]", string.Join(",", filterEndDate));
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsAppPrices != null)
            uriBuilder.AddParameter("fields[appPrices]", string.Join(",", fieldsAppPrices));
        if (fieldsAppPricePoints != null)
            uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPricesV2Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFilterAppStoreVersionsAppStoreState
    {
        ACCEPTED,
        DEVELOPER_REMOVED_FROM_SALE,
        DEVELOPER_REJECTED,
        IN_REVIEW,
        INVALID_BINARY,
        METADATA_REJECTED,
        PENDING_APPLE_RELEASE,
        PENDING_CONTRACT,
        PENDING_DEVELOPER_RELEASE,
        PREPARE_FOR_SUBMISSION,
        PREORDER_READY_FOR_SALE,
        PROCESSING_FOR_APP_STORE,
        READY_FOR_REVIEW,
        READY_FOR_SALE,
        REJECTED,
        REMOVED_FROM_SALE,
        WAITING_FOR_EXPORT_COMPLIANCE,
        WAITING_FOR_REVIEW,
        REPLACED_WITH_NEW_VERSION,
        NOT_APPLICABLE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFilterAppStoreVersionsPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFilterAppStoreVersionsAppVersionState
    {
        ACCEPTED,
        DEVELOPER_REJECTED,
        IN_REVIEW,
        INVALID_BINARY,
        METADATA_REJECTED,
        PENDING_APPLE_RELEASE,
        PENDING_DEVELOPER_RELEASE,
        PREPARE_FOR_SUBMISSION,
        PROCESSING_FOR_DISTRIBUTION,
        READY_FOR_DISTRIBUTION,
        READY_FOR_REVIEW,
        REJECTED,
        REPLACED_WITH_NEW_VERSION,
        WAITING_FOR_EXPORT_COMPLIANCE,
        WAITING_FOR_REVIEW,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFilterReviewSubmissionsState
    {
        READY_FOR_REVIEW,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        UNRESOLVED_ISSUES,
        CANCELING,
        COMPLETING,
        COMPLETE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFilterReviewSubmissionsPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionSort
    {
        name,
        [EnumMember(Value = "-name")]
        nameDescending,
        bundleId,
        [EnumMember(Value = "-bundleId")]
        bundleIdDescending,
        sku,
        [EnumMember(Value = "-sku")]
        skuDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsBetaAppLocalizations
    {
        feedbackEmail,
        marketingUrl,
        privacyPolicyUrl,
        tvOsPrivacyPolicy,
        description,
        locale,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsBetaLicenseAgreements
    {
        agreementText,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsBetaAppReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsAppInfos
    {
        appStoreState,
        state,
        appStoreAgeRating,
        australiaAgeRating,
        brazilAgeRating,
        brazilAgeRatingV2,
        franceAgeRating,
        koreaAgeRating,
        kidsAgeBand,
        app,
        ageRatingDeclaration,
        appInfoLocalizations,
        primaryCategory,
        primarySubcategoryOne,
        primarySubcategoryTwo,
        secondaryCategory,
        secondarySubcategoryOne,
        secondarySubcategoryTwo,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsAppClips
    {
        bundleId,
        app,
        appClipDefaultExperiences,
        appClipAdvancedExperiences,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsEndUserLicenseAgreements
    {
        agreementText,
        app,
        territories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsInAppPurchases
    {
        referenceName,
        productId,
        inAppPurchaseType,
        state,
        apps,
        name,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsSubscriptionGroups
    {
        referenceName,
        subscriptions,
        subscriptionGroupLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsAppCustomProductPages
    {
        name,
        url,
        visible,
        app,
        appCustomProductPageVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsAppEvents
    {
        referenceName,
        badge,
        eventState,
        deepLink,
        purchaseRequirement,
        primaryLocale,
        priority,
        purpose,
        territorySchedules,
        archivedTerritorySchedules,
        localizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsReviewSubmissions
    {
        platform,
        submittedDate,
        state,
        app,
        items,
        appStoreVersionForReview,
        submittedByActor,
        lastUpdatedByActor,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsSubscriptionGracePeriods
    {
        optIn,
        sandboxOptIn,
        duration,
        renewalType,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionFieldsAppStoreVersionExperiments
    {
        name,
        platform,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        app,
        latestControlVersion,
        controlVersions,
        appStoreVersionExperimentTreatments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getCollectionInclude
    {
        appEncryptionDeclarations,
        ciProduct,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        endUserLicenseAgreement,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
    }

    // /v1/apps
    public Task<AppsResponse> Apps_getCollection(string[]? filterName = default, string[]? filterBundleId = default, string[]? filterSku = default, Apps_getCollectionFilterAppStoreVersionsAppStoreState[]? filterAppStoreVersionsAppStoreState = default, Apps_getCollectionFilterAppStoreVersionsPlatform[]? filterAppStoreVersionsPlatform = default, Apps_getCollectionFilterAppStoreVersionsAppVersionState[]? filterAppStoreVersionsAppVersionState = default, Apps_getCollectionFilterReviewSubmissionsState[]? filterReviewSubmissionsState = default, Apps_getCollectionFilterReviewSubmissionsPlatform[]? filterReviewSubmissionsPlatform = default, string[]? filterAppStoreVersions = default, string[]? filterId = default, Apps_getCollectionSort[]? sort = default, Apps_getCollectionFieldsApps[]? fieldsApps = default, Apps_getCollectionFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, Apps_getCollectionFieldsCiProducts[]? fieldsCiProducts = default, Apps_getCollectionFieldsBetaGroups[]? fieldsBetaGroups = default, Apps_getCollectionFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, Apps_getCollectionFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, Apps_getCollectionFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, Apps_getCollectionFieldsBuilds[]? fieldsBuilds = default, Apps_getCollectionFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, Apps_getCollectionFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, Apps_getCollectionFieldsAppInfos[]? fieldsAppInfos = default, Apps_getCollectionFieldsAppClips[]? fieldsAppClips = default, Apps_getCollectionFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default, Apps_getCollectionFieldsInAppPurchases[]? fieldsInAppPurchases = default, Apps_getCollectionFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, Apps_getCollectionFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, Apps_getCollectionFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, Apps_getCollectionFieldsAppEvents[]? fieldsAppEvents = default, Apps_getCollectionFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, Apps_getCollectionFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default, Apps_getCollectionFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, Apps_getCollectionFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, int? limit = default, Apps_getCollectionInclude[]? include = default, int? limitAppClips = default, int? limitAppCustomProductPages = default, int? limitAppEncryptionDeclarations = default, int? limitAppEvents = default, int? limitAppInfos = default, int? limitAppStoreVersionExperimentsV2 = default, int? limitAppStoreVersions = default, int? limitBetaAppLocalizations = default, int? limitBetaGroups = default, int? limitBuilds = default, int? limitInAppPurchasesV2 = default, int? limitPreReleaseVersions = default, int? limitPromotedPurchases = default, int? limitReviewSubmissions = default, int? limitSubscriptionGroups = default, INestedLog? log = null)
    {
        string path = "/v1/apps";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterName != null)
            uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
        if (filterBundleId != null)
            uriBuilder.AddParameter("filter[bundleId]", string.Join(",", filterBundleId));
        if (filterSku != null)
            uriBuilder.AddParameter("filter[sku]", string.Join(",", filterSku));
        if (filterAppStoreVersionsAppStoreState != null)
            uriBuilder.AddParameter("filter[appStoreVersions.appStoreState]", string.Join(",", filterAppStoreVersionsAppStoreState));
        if (filterAppStoreVersionsPlatform != null)
            uriBuilder.AddParameter("filter[appStoreVersions.platform]", string.Join(",", filterAppStoreVersionsPlatform));
        if (filterAppStoreVersionsAppVersionState != null)
            uriBuilder.AddParameter("filter[appStoreVersions.appVersionState]", string.Join(",", filterAppStoreVersionsAppVersionState));
        if (filterReviewSubmissionsState != null)
            uriBuilder.AddParameter("filter[reviewSubmissions.state]", string.Join(",", filterReviewSubmissionsState));
        if (filterReviewSubmissionsPlatform != null)
            uriBuilder.AddParameter("filter[reviewSubmissions.platform]", string.Join(",", filterReviewSubmissionsPlatform));
        if (filterAppStoreVersions != null)
            uriBuilder.AddParameter("filter[appStoreVersions]", string.Join(",", filterAppStoreVersions));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
        if (fieldsBetaAppLocalizations != null)
            uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsBetaLicenseAgreements != null)
            uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
        if (fieldsBetaAppReviewDetails != null)
            uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
        if (fieldsAppInfos != null)
            uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
        if (fieldsAppClips != null)
            uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
        if (fieldsEndUserLicenseAgreements != null)
            uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (fieldsSubscriptionGroups != null)
            uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
        if (fieldsAppCustomProductPages != null)
            uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsAppEvents != null)
            uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
        if (fieldsReviewSubmissions != null)
            uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
        if (fieldsSubscriptionGracePeriods != null)
            uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppClips.HasValue)
            uriBuilder.AddParameter("limit[appClips]", limitAppClips.Value.ToString());
        if (limitAppCustomProductPages.HasValue)
            uriBuilder.AddParameter("limit[appCustomProductPages]", limitAppCustomProductPages.Value.ToString());
        if (limitAppEncryptionDeclarations.HasValue)
            uriBuilder.AddParameter("limit[appEncryptionDeclarations]", limitAppEncryptionDeclarations.Value.ToString());
        if (limitAppEvents.HasValue)
            uriBuilder.AddParameter("limit[appEvents]", limitAppEvents.Value.ToString());
        if (limitAppInfos.HasValue)
            uriBuilder.AddParameter("limit[appInfos]", limitAppInfos.Value.ToString());
        if (limitAppStoreVersionExperimentsV2.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2.Value.ToString());
        if (limitAppStoreVersions.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersions]", limitAppStoreVersions.Value.ToString());
        if (limitBetaAppLocalizations.HasValue)
            uriBuilder.AddParameter("limit[betaAppLocalizations]", limitBetaAppLocalizations.Value.ToString());
        if (limitBetaGroups.HasValue)
            uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());
        if (limitInAppPurchasesV2.HasValue)
            uriBuilder.AddParameter("limit[inAppPurchasesV2]", limitInAppPurchasesV2.Value.ToString());
        if (limitPreReleaseVersions.HasValue)
            uriBuilder.AddParameter("limit[preReleaseVersions]", limitPreReleaseVersions.Value.ToString());
        if (limitPromotedPurchases.HasValue)
            uriBuilder.AddParameter("limit[promotedPurchases]", limitPromotedPurchases.Value.ToString());
        if (limitReviewSubmissions.HasValue)
            uriBuilder.AddParameter("limit[reviewSubmissions]", limitReviewSubmissions.Value.ToString());
        if (limitSubscriptionGroups.HasValue)
            uriBuilder.AddParameter("limit[subscriptionGroups]", limitSubscriptionGroups.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsBetaAppLocalizations
    {
        feedbackEmail,
        marketingUrl,
        privacyPolicyUrl,
        tvOsPrivacyPolicy,
        description,
        locale,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsBetaLicenseAgreements
    {
        agreementText,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsBetaAppReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsAppInfos
    {
        appStoreState,
        state,
        appStoreAgeRating,
        australiaAgeRating,
        brazilAgeRating,
        brazilAgeRatingV2,
        franceAgeRating,
        koreaAgeRating,
        kidsAgeBand,
        app,
        ageRatingDeclaration,
        appInfoLocalizations,
        primaryCategory,
        primarySubcategoryOne,
        primarySubcategoryTwo,
        secondaryCategory,
        secondarySubcategoryOne,
        secondarySubcategoryTwo,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsAppClips
    {
        bundleId,
        app,
        appClipDefaultExperiences,
        appClipAdvancedExperiences,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsEndUserLicenseAgreements
    {
        agreementText,
        app,
        territories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsInAppPurchases
    {
        referenceName,
        productId,
        inAppPurchaseType,
        state,
        apps,
        name,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsSubscriptionGroups
    {
        referenceName,
        subscriptions,
        subscriptionGroupLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsAppCustomProductPages
    {
        name,
        url,
        visible,
        app,
        appCustomProductPageVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsAppEvents
    {
        referenceName,
        badge,
        eventState,
        deepLink,
        purchaseRequirement,
        primaryLocale,
        priority,
        purpose,
        territorySchedules,
        archivedTerritorySchedules,
        localizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsReviewSubmissions
    {
        platform,
        submittedDate,
        state,
        app,
        items,
        appStoreVersionForReview,
        submittedByActor,
        lastUpdatedByActor,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsSubscriptionGracePeriods
    {
        optIn,
        sandboxOptIn,
        duration,
        renewalType,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceFieldsAppStoreVersionExperiments
    {
        name,
        platform,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        app,
        latestControlVersion,
        controlVersions,
        appStoreVersionExperimentTreatments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_getInstanceInclude
    {
        appEncryptionDeclarations,
        ciProduct,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        endUserLicenseAgreement,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
    }

    // /v1/apps/{id}
    public Task<AppResponse> Apps_getInstance(string id, Apps_getInstanceFieldsApps[]? fieldsApps = default, Apps_getInstanceFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, Apps_getInstanceFieldsCiProducts[]? fieldsCiProducts = default, Apps_getInstanceFieldsBetaGroups[]? fieldsBetaGroups = default, Apps_getInstanceFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, Apps_getInstanceFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, Apps_getInstanceFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, Apps_getInstanceFieldsBuilds[]? fieldsBuilds = default, Apps_getInstanceFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, Apps_getInstanceFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, Apps_getInstanceFieldsAppInfos[]? fieldsAppInfos = default, Apps_getInstanceFieldsAppClips[]? fieldsAppClips = default, Apps_getInstanceFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default, Apps_getInstanceFieldsInAppPurchases[]? fieldsInAppPurchases = default, Apps_getInstanceFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, Apps_getInstanceFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, Apps_getInstanceFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, Apps_getInstanceFieldsAppEvents[]? fieldsAppEvents = default, Apps_getInstanceFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, Apps_getInstanceFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default, Apps_getInstanceFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, Apps_getInstanceFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, Apps_getInstanceInclude[]? include = default, int? limitAppClips = default, int? limitAppCustomProductPages = default, int? limitAppEncryptionDeclarations = default, int? limitAppEvents = default, int? limitAppInfos = default, int? limitAppStoreVersionExperimentsV2 = default, int? limitAppStoreVersions = default, int? limitBetaAppLocalizations = default, int? limitBetaGroups = default, int? limitBuilds = default, int? limitInAppPurchasesV2 = default, int? limitPreReleaseVersions = default, int? limitPromotedPurchases = default, int? limitReviewSubmissions = default, int? limitSubscriptionGroups = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
        if (fieldsBetaAppLocalizations != null)
            uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsBetaLicenseAgreements != null)
            uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
        if (fieldsBetaAppReviewDetails != null)
            uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
        if (fieldsAppInfos != null)
            uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
        if (fieldsAppClips != null)
            uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
        if (fieldsEndUserLicenseAgreements != null)
            uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (fieldsSubscriptionGroups != null)
            uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
        if (fieldsAppCustomProductPages != null)
            uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsAppEvents != null)
            uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
        if (fieldsReviewSubmissions != null)
            uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
        if (fieldsSubscriptionGracePeriods != null)
            uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppClips.HasValue)
            uriBuilder.AddParameter("limit[appClips]", limitAppClips.Value.ToString());
        if (limitAppCustomProductPages.HasValue)
            uriBuilder.AddParameter("limit[appCustomProductPages]", limitAppCustomProductPages.Value.ToString());
        if (limitAppEncryptionDeclarations.HasValue)
            uriBuilder.AddParameter("limit[appEncryptionDeclarations]", limitAppEncryptionDeclarations.Value.ToString());
        if (limitAppEvents.HasValue)
            uriBuilder.AddParameter("limit[appEvents]", limitAppEvents.Value.ToString());
        if (limitAppInfos.HasValue)
            uriBuilder.AddParameter("limit[appInfos]", limitAppInfos.Value.ToString());
        if (limitAppStoreVersionExperimentsV2.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2.Value.ToString());
        if (limitAppStoreVersions.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersions]", limitAppStoreVersions.Value.ToString());
        if (limitBetaAppLocalizations.HasValue)
            uriBuilder.AddParameter("limit[betaAppLocalizations]", limitBetaAppLocalizations.Value.ToString());
        if (limitBetaGroups.HasValue)
            uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());
        if (limitInAppPurchasesV2.HasValue)
            uriBuilder.AddParameter("limit[inAppPurchasesV2]", limitInAppPurchasesV2.Value.ToString());
        if (limitPreReleaseVersions.HasValue)
            uriBuilder.AddParameter("limit[preReleaseVersions]", limitPreReleaseVersions.Value.ToString());
        if (limitPromotedPurchases.HasValue)
            uriBuilder.AddParameter("limit[promotedPurchases]", limitPromotedPurchases.Value.ToString());
        if (limitReviewSubmissions.HasValue)
            uriBuilder.AddParameter("limit[reviewSubmissions]", limitReviewSubmissions.Value.ToString());
        if (limitSubscriptionGroups.HasValue)
            uriBuilder.AddParameter("limit[subscriptionGroups]", limitSubscriptionGroups.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppResponse>(message, log);
    }

    // /v1/apps/{id}
    public Task<AppResponse> Apps_updateInstance(string id, AppUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppResponse>(message, log);
    }

    // /v1/apps/{id}/alternativeDistributionKey
    public Task<AlternativeDistributionKeyResponse> Apps_alternativeDistributionKey_getToOneRelated(string id, string[]? fieldsAlternativeDistributionKeys = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/alternativeDistributionKey";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionKeys != null)
            uriBuilder.AddParameter("fields[alternativeDistributionKeys]", string.Join(",", fieldsAlternativeDistributionKeys));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionKeyResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_analyticsReportRequests_getToManyRelatedFilterAccessType
    {
        ONE_TIME_SNAPSHOT,
        ONGOING,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_analyticsReportRequests_getToManyRelatedFieldsAnalyticsReportRequests
    {
        accessType,
        stoppedDueToInactivity,
        reports,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_analyticsReportRequests_getToManyRelatedFieldsAnalyticsReports
    {
        name,
        category,
        instances,
    }

    // /v1/apps/{id}/analyticsReportRequests
    public Task<AnalyticsReportRequestsResponse> Apps_analyticsReportRequests_getToManyRelated(string id, Apps_analyticsReportRequests_getToManyRelatedFilterAccessType[]? filterAccessType = default, Apps_analyticsReportRequests_getToManyRelatedFieldsAnalyticsReportRequests[]? fieldsAnalyticsReportRequests = default, Apps_analyticsReportRequests_getToManyRelatedFieldsAnalyticsReports[]? fieldsAnalyticsReports = default, int? limit = default, string[]? include = default, int? limitReports = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/analyticsReportRequests";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterAccessType != null)
            uriBuilder.AddParameter("filter[accessType]", string.Join(",", filterAccessType));
        if (fieldsAnalyticsReportRequests != null)
            uriBuilder.AddParameter("fields[analyticsReportRequests]", string.Join(",", fieldsAnalyticsReportRequests));
        if (fieldsAnalyticsReports != null)
            uriBuilder.AddParameter("fields[analyticsReports]", string.Join(",", fieldsAnalyticsReports));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitReports.HasValue)
            uriBuilder.AddParameter("limit[reports]", limitReports.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AnalyticsReportRequestsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appAvailabilityV2_getToOneRelatedFieldsAppAvailabilities
    {
        availableInNewTerritories,
        territoryAvailabilities,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appAvailabilityV2_getToOneRelatedFieldsTerritoryAvailabilities
    {
        available,
        releaseDate,
        preOrderEnabled,
        preOrderPublishDate,
        contentStatuses,
        territory,
    }

    // /v1/apps/{id}/appAvailabilityV2
    public Task<AppAvailabilityV2Response> Apps_appAvailabilityV2_getToOneRelated(string id, Apps_appAvailabilityV2_getToOneRelatedFieldsAppAvailabilities[]? fieldsAppAvailabilities = default, Apps_appAvailabilityV2_getToOneRelatedFieldsTerritoryAvailabilities[]? fieldsTerritoryAvailabilities = default, string[]? include = default, int? limitTerritoryAvailabilities = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appAvailabilityV2";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppAvailabilities != null)
            uriBuilder.AddParameter("fields[appAvailabilities]", string.Join(",", fieldsAppAvailabilities));
        if (fieldsTerritoryAvailabilities != null)
            uriBuilder.AddParameter("fields[territoryAvailabilities]", string.Join(",", fieldsTerritoryAvailabilities));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitTerritoryAvailabilities.HasValue)
            uriBuilder.AddParameter("limit[territoryAvailabilities]", limitTerritoryAvailabilities.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppAvailabilityV2Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appClips_getToManyRelatedFieldsAppClips
    {
        bundleId,
        app,
        appClipDefaultExperiences,
        appClipAdvancedExperiences,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appClips_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appClips_getToManyRelatedFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appClips_getToManyRelatedInclude
    {
        app,
        appClipDefaultExperiences,
    }

    // /v1/apps/{id}/appClips
    public Task<AppClipsResponse> Apps_appClips_getToManyRelated(string id, string[]? filterBundleId = default, Apps_appClips_getToManyRelatedFieldsAppClips[]? fieldsAppClips = default, Apps_appClips_getToManyRelatedFieldsApps[]? fieldsApps = default, Apps_appClips_getToManyRelatedFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, int? limit = default, Apps_appClips_getToManyRelatedInclude[]? include = default, int? limitAppClipDefaultExperiences = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appClips";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterBundleId != null)
            uriBuilder.AddParameter("filter[bundleId]", string.Join(",", filterBundleId));
        if (fieldsAppClips != null)
            uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppClipDefaultExperiences.HasValue)
            uriBuilder.AddParameter("limit[appClipDefaultExperiences]", limitAppClipDefaultExperiences.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appCustomProductPages_getToManyRelatedFieldsAppCustomProductPages
    {
        name,
        url,
        visible,
        app,
        appCustomProductPageVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appCustomProductPages_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appCustomProductPages_getToManyRelatedFieldsAppCustomProductPageVersions
    {
        version,
        state,
        deepLink,
        appCustomProductPage,
        appCustomProductPageLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appCustomProductPages_getToManyRelatedInclude
    {
        app,
        appCustomProductPageVersions,
    }

    // /v1/apps/{id}/appCustomProductPages
    public Task<AppCustomProductPagesResponse> Apps_appCustomProductPages_getToManyRelated(string id, string[]? filterVisible = default, Apps_appCustomProductPages_getToManyRelatedFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, Apps_appCustomProductPages_getToManyRelatedFieldsApps[]? fieldsApps = default, Apps_appCustomProductPages_getToManyRelatedFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, int? limit = default, Apps_appCustomProductPages_getToManyRelatedInclude[]? include = default, int? limitAppCustomProductPageVersions = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appCustomProductPages";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterVisible != null)
            uriBuilder.AddParameter("filter[visible]", string.Join(",", filterVisible));
        if (fieldsAppCustomProductPages != null)
            uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAppCustomProductPageVersions != null)
            uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppCustomProductPageVersions.HasValue)
            uriBuilder.AddParameter("limit[appCustomProductPageVersions]", limitAppCustomProductPageVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppCustomProductPagesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appEncryptionDeclarations_getToManyRelatedFilterPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appEncryptionDeclarations_getToManyRelatedFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appEncryptionDeclarations_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appEncryptionDeclarations_getToManyRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appEncryptionDeclarations_getToManyRelatedFieldsAppEncryptionDeclarationDocuments
    {
        fileSize,
        fileName,
        assetToken,
        downloadUrl,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appEncryptionDeclarations_getToManyRelatedInclude
    {
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    // /v1/apps/{id}/appEncryptionDeclarations
    public Task<AppEncryptionDeclarationsResponse> Apps_appEncryptionDeclarations_getToManyRelated(string id, Apps_appEncryptionDeclarations_getToManyRelatedFilterPlatform[]? filterPlatform = default, string[]? filterBuilds = default, Apps_appEncryptionDeclarations_getToManyRelatedFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, Apps_appEncryptionDeclarations_getToManyRelatedFieldsApps[]? fieldsApps = default, Apps_appEncryptionDeclarations_getToManyRelatedFieldsBuilds[]? fieldsBuilds = default, Apps_appEncryptionDeclarations_getToManyRelatedFieldsAppEncryptionDeclarationDocuments[]? fieldsAppEncryptionDeclarationDocuments = default, int? limit = default, Apps_appEncryptionDeclarations_getToManyRelatedInclude[]? include = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appEncryptionDeclarations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterBuilds != null)
            uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsAppEncryptionDeclarationDocuments != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarationDocuments]", string.Join(",", fieldsAppEncryptionDeclarationDocuments));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEncryptionDeclarationsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appEvents_getToManyRelatedFilterEventState
    {
        DRAFT,
        READY_FOR_REVIEW,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        REJECTED,
        ACCEPTED,
        APPROVED,
        PUBLISHED,
        PAST,
        ARCHIVED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appEvents_getToManyRelatedFieldsAppEvents
    {
        referenceName,
        badge,
        eventState,
        deepLink,
        purchaseRequirement,
        primaryLocale,
        priority,
        purpose,
        territorySchedules,
        archivedTerritorySchedules,
        localizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appEvents_getToManyRelatedFieldsAppEventLocalizations
    {
        locale,
        name,
        shortDescription,
        longDescription,
        appEvent,
        appEventScreenshots,
        appEventVideoClips,
    }

    // /v1/apps/{id}/appEvents
    public Task<AppEventsResponse> Apps_appEvents_getToManyRelated(string id, Apps_appEvents_getToManyRelatedFilterEventState[]? filterEventState = default, string[]? filterId = default, Apps_appEvents_getToManyRelatedFieldsAppEvents[]? fieldsAppEvents = default, Apps_appEvents_getToManyRelatedFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, int? limit = default, string[]? include = default, int? limitLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appEvents";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterEventState != null)
            uriBuilder.AddParameter("filter[eventState]", string.Join(",", filterEventState));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsAppEvents != null)
            uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
        if (fieldsAppEventLocalizations != null)
            uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEventsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appInfos_getToManyRelatedFieldsAppInfos
    {
        appStoreState,
        state,
        appStoreAgeRating,
        australiaAgeRating,
        brazilAgeRating,
        brazilAgeRatingV2,
        franceAgeRating,
        koreaAgeRating,
        kidsAgeBand,
        app,
        ageRatingDeclaration,
        appInfoLocalizations,
        primaryCategory,
        primarySubcategoryOne,
        primarySubcategoryTwo,
        secondaryCategory,
        secondarySubcategoryOne,
        secondarySubcategoryTwo,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appInfos_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appInfos_getToManyRelatedFieldsAgeRatingDeclarations
    {
        alcoholTobaccoOrDrugUseOrReferences,
        contests,
        gamblingAndContests,
        gambling,
        gamblingSimulated,
        kidsAgeBand,
        lootBox,
        medicalOrTreatmentInformation,
        profanityOrCrudeHumor,
        sexualContentGraphicAndNudity,
        sexualContentOrNudity,
        horrorOrFearThemes,
        matureOrSuggestiveThemes,
        unrestrictedWebAccess,
        violenceCartoonOrFantasy,
        violenceRealisticProlongedGraphicOrSadistic,
        violenceRealistic,
        ageRatingOverride,
        koreaAgeRatingOverride,
        seventeenPlus,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appInfos_getToManyRelatedFieldsAppInfoLocalizations
    {
        locale,
        name,
        subtitle,
        privacyPolicyUrl,
        privacyChoicesUrl,
        privacyPolicyText,
        appInfo,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appInfos_getToManyRelatedFieldsAppCategories
    {
        platforms,
        subcategories,
        parent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appInfos_getToManyRelatedInclude
    {
        app,
        ageRatingDeclaration,
        appInfoLocalizations,
        primaryCategory,
        primarySubcategoryOne,
        primarySubcategoryTwo,
        secondaryCategory,
        secondarySubcategoryOne,
        secondarySubcategoryTwo,
    }

    // /v1/apps/{id}/appInfos
    public Task<AppInfosResponse> Apps_appInfos_getToManyRelated(string id, Apps_appInfos_getToManyRelatedFieldsAppInfos[]? fieldsAppInfos = default, Apps_appInfos_getToManyRelatedFieldsApps[]? fieldsApps = default, Apps_appInfos_getToManyRelatedFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, Apps_appInfos_getToManyRelatedFieldsAppInfoLocalizations[]? fieldsAppInfoLocalizations = default, Apps_appInfos_getToManyRelatedFieldsAppCategories[]? fieldsAppCategories = default, int? limit = default, Apps_appInfos_getToManyRelatedInclude[]? include = default, int? limitAppInfoLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appInfos";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppInfos != null)
            uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAgeRatingDeclarations != null)
            uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
        if (fieldsAppInfoLocalizations != null)
            uriBuilder.AddParameter("fields[appInfoLocalizations]", string.Join(",", fieldsAppInfoLocalizations));
        if (fieldsAppCategories != null)
            uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppInfoLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appInfoLocalizations]", limitAppInfoLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppInfosResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appPricePoints_getToManyRelatedFieldsAppPricePoints
    {
        customerPrice,
        proceeds,
        app,
        equalizations,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appPricePoints_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appPricePoints_getToManyRelatedInclude
    {
        app,
        territory,
    }

    // /v1/apps/{id}/appPricePoints
    public Task<AppPricePointsV3Response> Apps_appPricePoints_getToManyRelated(string id, string[]? filterTerritory = default, Apps_appPricePoints_getToManyRelatedFieldsAppPricePoints[]? fieldsAppPricePoints = default, Apps_appPricePoints_getToManyRelatedFieldsApps[]? fieldsApps = default, string[]? fieldsTerritories = default, int? limit = default, Apps_appPricePoints_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appPricePoints";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsAppPricePoints != null)
            uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPricePointsV3Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appPriceSchedule_getToOneRelatedFieldsAppPriceSchedules
    {
        app,
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appPriceSchedule_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appPriceSchedule_getToOneRelatedFieldsAppPrices
    {
        manual,
        startDate,
        endDate,
        appPricePoint,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appPriceSchedule_getToOneRelatedInclude
    {
        app,
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    // /v1/apps/{id}/appPriceSchedule
    public Task<AppPriceScheduleResponse> Apps_appPriceSchedule_getToOneRelated(string id, Apps_appPriceSchedule_getToOneRelatedFieldsAppPriceSchedules[]? fieldsAppPriceSchedules = default, Apps_appPriceSchedule_getToOneRelatedFieldsApps[]? fieldsApps = default, string[]? fieldsTerritories = default, Apps_appPriceSchedule_getToOneRelatedFieldsAppPrices[]? fieldsAppPrices = default, Apps_appPriceSchedule_getToOneRelatedInclude[]? include = default, int? limitManualPrices = default, int? limitAutomaticPrices = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appPriceSchedule";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppPriceSchedules != null)
            uriBuilder.AddParameter("fields[appPriceSchedules]", string.Join(",", fieldsAppPriceSchedules));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (fieldsAppPrices != null)
            uriBuilder.AddParameter("fields[appPrices]", string.Join(",", fieldsAppPrices));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitManualPrices.HasValue)
            uriBuilder.AddParameter("limit[manualPrices]", limitManualPrices.Value.ToString());
        if (limitAutomaticPrices.HasValue)
            uriBuilder.AddParameter("limit[automaticPrices]", limitAutomaticPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPriceScheduleResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersionExperimentsV2_getToManyRelatedFilterState
    {
        PREPARE_FOR_SUBMISSION,
        READY_FOR_REVIEW,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        ACCEPTED,
        APPROVED,
        REJECTED,
        COMPLETED,
        STOPPED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersionExperiments
    {
        name,
        platform,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        app,
        latestControlVersion,
        controlVersions,
        appStoreVersionExperimentTreatments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersionExperimentsV2_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersionExperimentTreatments
    {
        name,
        appIcon,
        appIconName,
        promotedDate,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersionExperimentsV2_getToManyRelatedInclude
    {
        app,
        latestControlVersion,
        controlVersions,
        appStoreVersionExperimentTreatments,
    }

    // /v1/apps/{id}/appStoreVersionExperimentsV2
    public Task<AppStoreVersionExperimentsV2Response> Apps_appStoreVersionExperimentsV2_getToManyRelated(string id, Apps_appStoreVersionExperimentsV2_getToManyRelatedFilterState[]? filterState = default, Apps_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, Apps_appStoreVersionExperimentsV2_getToManyRelatedFieldsApps[]? fieldsApps = default, Apps_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, Apps_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, int? limit = default, Apps_appStoreVersionExperimentsV2_getToManyRelatedInclude[]? include = default, int? limitControlVersions = default, int? limitAppStoreVersionExperimentTreatments = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appStoreVersionExperimentsV2";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterState != null)
            uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppStoreVersionExperimentTreatments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitControlVersions.HasValue)
            uriBuilder.AddParameter("limit[controlVersions]", limitControlVersions.Value.ToString());
        if (limitAppStoreVersionExperimentTreatments.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentsV2Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFilterPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFilterAppStoreState
    {
        ACCEPTED,
        DEVELOPER_REMOVED_FROM_SALE,
        DEVELOPER_REJECTED,
        IN_REVIEW,
        INVALID_BINARY,
        METADATA_REJECTED,
        PENDING_APPLE_RELEASE,
        PENDING_CONTRACT,
        PENDING_DEVELOPER_RELEASE,
        PREPARE_FOR_SUBMISSION,
        PREORDER_READY_FOR_SALE,
        PROCESSING_FOR_APP_STORE,
        READY_FOR_REVIEW,
        READY_FOR_SALE,
        REJECTED,
        REMOVED_FROM_SALE,
        WAITING_FOR_EXPORT_COMPLIANCE,
        WAITING_FOR_REVIEW,
        REPLACED_WITH_NEW_VERSION,
        NOT_APPLICABLE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFilterAppVersionState
    {
        ACCEPTED,
        DEVELOPER_REJECTED,
        IN_REVIEW,
        INVALID_BINARY,
        METADATA_REJECTED,
        PENDING_APPLE_RELEASE,
        PENDING_DEVELOPER_RELEASE,
        PREPARE_FOR_SUBMISSION,
        PROCESSING_FOR_DISTRIBUTION,
        READY_FOR_DISTRIBUTION,
        READY_FOR_REVIEW,
        REJECTED,
        REPLACED_WITH_NEW_VERSION,
        WAITING_FOR_EXPORT_COMPLIANCE,
        WAITING_FOR_REVIEW,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsAgeRatingDeclarations
    {
        alcoholTobaccoOrDrugUseOrReferences,
        contests,
        gamblingAndContests,
        gambling,
        gamblingSimulated,
        kidsAgeBand,
        lootBox,
        medicalOrTreatmentInformation,
        profanityOrCrudeHumor,
        sexualContentGraphicAndNudity,
        sexualContentOrNudity,
        horrorOrFearThemes,
        matureOrSuggestiveThemes,
        unrestrictedWebAccess,
        violenceCartoonOrFantasy,
        violenceRealisticProlongedGraphicOrSadistic,
        violenceRealistic,
        ageRatingOverride,
        koreaAgeRatingOverride,
        seventeenPlus,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsAppStoreVersionPhasedReleases
    {
        phasedReleaseState,
        startDate,
        totalPauseDuration,
        currentDayNumber,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsRoutingAppCoverages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsAppStoreReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        appStoreVersion,
        appStoreReviewAttachments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
        platform,
        app,
        latestControlVersion,
        controlVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_appStoreVersions_getToManyRelatedInclude
    {
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        alternativeDistributionPackage,
    }

    // /v1/apps/{id}/appStoreVersions
    public Task<AppStoreVersionsResponse> Apps_appStoreVersions_getToManyRelated(string id, Apps_appStoreVersions_getToManyRelatedFilterPlatform[]? filterPlatform = default, string[]? filterVersionString = default, Apps_appStoreVersions_getToManyRelatedFilterAppStoreState[]? filterAppStoreState = default, Apps_appStoreVersions_getToManyRelatedFilterAppVersionState[]? filterAppVersionState = default, string[]? filterId = default, Apps_appStoreVersions_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, Apps_appStoreVersions_getToManyRelatedFieldsApps[]? fieldsApps = default, Apps_appStoreVersions_getToManyRelatedFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, Apps_appStoreVersions_getToManyRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, Apps_appStoreVersions_getToManyRelatedFieldsBuilds[]? fieldsBuilds = default, Apps_appStoreVersions_getToManyRelatedFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, Apps_appStoreVersions_getToManyRelatedFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, Apps_appStoreVersions_getToManyRelatedFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, Apps_appStoreVersions_getToManyRelatedFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, string[]? fieldsAppStoreVersionSubmissions = default, Apps_appStoreVersions_getToManyRelatedFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, Apps_appStoreVersions_getToManyRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, string[]? fieldsAlternativeDistributionPackages = default, int? limit = default, Apps_appStoreVersions_getToManyRelatedInclude[]? include = default, int? limitAppStoreVersionLocalizations = default, int? limitAppStoreVersionExperimentsV2 = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/appStoreVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterVersionString != null)
            uriBuilder.AddParameter("filter[versionString]", string.Join(",", filterVersionString));
        if (filterAppStoreState != null)
            uriBuilder.AddParameter("filter[appStoreState]", string.Join(",", filterAppStoreState));
        if (filterAppVersionState != null)
            uriBuilder.AddParameter("filter[appVersionState]", string.Join(",", filterAppVersionState));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAgeRatingDeclarations != null)
            uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsAppStoreVersionPhasedReleases != null)
            uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsRoutingAppCoverages != null)
            uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
        if (fieldsAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
        if (fieldsAppStoreVersionSubmissions != null)
            uriBuilder.AddParameter("fields[appStoreVersionSubmissions]", string.Join(",", fieldsAppStoreVersionSubmissions));
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAlternativeDistributionPackages != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackages]", string.Join(",", fieldsAlternativeDistributionPackages));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations.Value.ToString());
        if (limitAppStoreVersionExperimentsV2.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_betaAppLocalizations_getToManyRelatedFieldsBetaAppLocalizations
    {
        feedbackEmail,
        marketingUrl,
        privacyPolicyUrl,
        tvOsPrivacyPolicy,
        description,
        locale,
        app,
    }

    // /v1/apps/{id}/betaAppLocalizations
    public Task<BetaAppLocalizationsWithoutIncludesResponse> Apps_betaAppLocalizations_getToManyRelated(string id, Apps_betaAppLocalizations_getToManyRelatedFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/betaAppLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaAppLocalizations != null)
            uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppLocalizationsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_betaAppReviewDetail_getToOneRelatedFieldsBetaAppReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        app,
    }

    // /v1/apps/{id}/betaAppReviewDetail
    public Task<BetaAppReviewDetailWithoutIncludesResponse> Apps_betaAppReviewDetail_getToOneRelated(string id, Apps_betaAppReviewDetail_getToOneRelatedFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/betaAppReviewDetail";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaAppReviewDetails != null)
            uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppReviewDetailWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_betaGroups_getToManyRelatedFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    // /v1/apps/{id}/betaGroups
    public Task<BetaGroupsWithoutIncludesResponse> Apps_betaGroups_getToManyRelated(string id, Apps_betaGroups_getToManyRelatedFieldsBetaGroups[]? fieldsBetaGroups = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/betaGroups";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaGroupsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_betaLicenseAgreement_getToOneRelatedFieldsBetaLicenseAgreements
    {
        agreementText,
        app,
    }

    // /v1/apps/{id}/betaLicenseAgreement
    public Task<BetaLicenseAgreementWithoutIncludesResponse> Apps_betaLicenseAgreement_getToOneRelated(string id, Apps_betaLicenseAgreement_getToOneRelatedFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/betaLicenseAgreement";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaLicenseAgreements != null)
            uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaLicenseAgreementWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_builds_getToManyRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/apps/{id}/builds
    public Task<BuildsWithoutIncludesResponse> Apps_builds_getToManyRelated(string id, Apps_builds_getToManyRelatedFieldsBuilds[]? fieldsBuilds = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_ciProduct_getToOneRelatedFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_ciProduct_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_ciProduct_getToOneRelatedFieldsBundleIds
    {
        name,
        platform,
        identifier,
        seedId,
        profiles,
        bundleIdCapabilities,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_ciProduct_getToOneRelatedFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_ciProduct_getToOneRelatedInclude
    {
        app,
        bundleId,
        primaryRepositories,
    }

    // /v1/apps/{id}/ciProduct
    public Task<CiProductResponse> Apps_ciProduct_getToOneRelated(string id, Apps_ciProduct_getToOneRelatedFieldsCiProducts[]? fieldsCiProducts = default, Apps_ciProduct_getToOneRelatedFieldsApps[]? fieldsApps = default, Apps_ciProduct_getToOneRelatedFieldsBundleIds[]? fieldsBundleIds = default, Apps_ciProduct_getToOneRelatedFieldsScmRepositories[]? fieldsScmRepositories = default, Apps_ciProduct_getToOneRelatedInclude[]? include = default, int? limitPrimaryRepositories = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/ciProduct";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsBundleIds != null)
            uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitPrimaryRepositories.HasValue)
            uriBuilder.AddParameter("limit[primaryRepositories]", limitPrimaryRepositories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiProductResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_customerReviews_getToManyRelatedFilterTerritory
    {
        ABW,
        AFG,
        AGO,
        AIA,
        ALB,
        AND,
        ANT,
        ARE,
        ARG,
        ARM,
        ASM,
        ATG,
        AUS,
        AUT,
        AZE,
        BDI,
        BEL,
        BEN,
        BES,
        BFA,
        BGD,
        BGR,
        BHR,
        BHS,
        BIH,
        BLR,
        BLZ,
        BMU,
        BOL,
        BRA,
        BRB,
        BRN,
        BTN,
        BWA,
        CAF,
        CAN,
        CHE,
        CHL,
        CHN,
        CIV,
        CMR,
        COD,
        COG,
        COK,
        COL,
        COM,
        CPV,
        CRI,
        CUB,
        CUW,
        CXR,
        CYM,
        CYP,
        CZE,
        DEU,
        DJI,
        DMA,
        DNK,
        DOM,
        DZA,
        ECU,
        EGY,
        ERI,
        ESP,
        EST,
        ETH,
        FIN,
        FJI,
        FLK,
        FRA,
        FRO,
        FSM,
        GAB,
        GBR,
        GEO,
        GGY,
        GHA,
        GIB,
        GIN,
        GLP,
        GMB,
        GNB,
        GNQ,
        GRC,
        GRD,
        GRL,
        GTM,
        GUF,
        GUM,
        GUY,
        HKG,
        HND,
        HRV,
        HTI,
        HUN,
        IDN,
        IMN,
        IND,
        IRL,
        IRQ,
        ISL,
        ISR,
        ITA,
        JAM,
        JEY,
        JOR,
        JPN,
        KAZ,
        KEN,
        KGZ,
        KHM,
        KIR,
        KNA,
        KOR,
        KWT,
        LAO,
        LBN,
        LBR,
        LBY,
        LCA,
        LIE,
        LKA,
        LSO,
        LTU,
        LUX,
        LVA,
        MAC,
        MAR,
        MCO,
        MDA,
        MDG,
        MDV,
        MEX,
        MHL,
        MKD,
        MLI,
        MLT,
        MMR,
        MNE,
        MNG,
        MNP,
        MOZ,
        MRT,
        MSR,
        MTQ,
        MUS,
        MWI,
        MYS,
        MYT,
        NAM,
        NCL,
        NER,
        NFK,
        NGA,
        NIC,
        NIU,
        NLD,
        NOR,
        NPL,
        NRU,
        NZL,
        OMN,
        PAK,
        PAN,
        PER,
        PHL,
        PLW,
        PNG,
        POL,
        PRI,
        PRT,
        PRY,
        PSE,
        PYF,
        QAT,
        REU,
        ROU,
        RUS,
        RWA,
        SAU,
        SEN,
        SGP,
        SHN,
        SLB,
        SLE,
        SLV,
        SMR,
        SOM,
        SPM,
        SRB,
        SSD,
        STP,
        SUR,
        SVK,
        SVN,
        SWE,
        SWZ,
        SXM,
        SYC,
        TCA,
        TCD,
        TGO,
        THA,
        TJK,
        TKM,
        TLS,
        TON,
        TTO,
        TUN,
        TUR,
        TUV,
        TWN,
        TZA,
        UGA,
        UKR,
        UMI,
        URY,
        USA,
        UZB,
        VAT,
        VCT,
        VEN,
        VGB,
        VIR,
        VNM,
        VUT,
        WLF,
        WSM,
        YEM,
        ZAF,
        ZMB,
        ZWE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_customerReviews_getToManyRelatedSort
    {
        rating,
        [EnumMember(Value = "-rating")]
        ratingDescending,
        createdDate,
        [EnumMember(Value = "-createdDate")]
        createdDateDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_customerReviews_getToManyRelatedFieldsCustomerReviews
    {
        rating,
        title,
        body,
        reviewerNickname,
        createdDate,
        territory,
        response,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_customerReviews_getToManyRelatedFieldsCustomerReviewResponses
    {
        responseBody,
        lastModifiedDate,
        state,
        review,
    }

    // /v1/apps/{id}/customerReviews
    public Task<CustomerReviewsResponse> Apps_customerReviews_getToManyRelated(string id, Apps_customerReviews_getToManyRelatedFilterTerritory[]? filterTerritory = default, string[]? filterRating = default, bool? existsPublishedResponse = default, Apps_customerReviews_getToManyRelatedSort[]? sort = default, Apps_customerReviews_getToManyRelatedFieldsCustomerReviews[]? fieldsCustomerReviews = default, Apps_customerReviews_getToManyRelatedFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/customerReviews";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (filterRating != null)
            uriBuilder.AddParameter("filter[rating]", string.Join(",", filterRating));
        if (existsPublishedResponse.HasValue)
            uriBuilder.AddParameter("exists[publishedResponse]", existsPublishedResponse.Value.ToString());
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsCustomerReviews != null)
            uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
        if (fieldsCustomerReviewResponses != null)
            uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CustomerReviewsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_endUserLicenseAgreement_getToOneRelatedFieldsEndUserLicenseAgreements
    {
        agreementText,
        app,
        territories,
    }

    // /v1/apps/{id}/endUserLicenseAgreement
    public Task<EndUserLicenseAgreementWithoutIncludesResponse> Apps_endUserLicenseAgreement_getToOneRelated(string id, Apps_endUserLicenseAgreement_getToOneRelatedFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/endUserLicenseAgreement";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsEndUserLicenseAgreements != null)
            uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<EndUserLicenseAgreementWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterDetail_getToOneRelatedInclude
    {
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    // /v1/apps/{id}/gameCenterDetail
    public Task<GameCenterDetailResponse> Apps_gameCenterDetail_getToOneRelated(string id, Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, Apps_gameCenterDetail_getToOneRelatedFieldsApps[]? fieldsApps = default, Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, Apps_gameCenterDetail_getToOneRelatedFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, Apps_gameCenterDetail_getToOneRelatedInclude[]? include = default, int? limitGameCenterAppVersions = default, int? limitGameCenterLeaderboards = default, int? limitGameCenterLeaderboardSets = default, int? limitGameCenterAchievements = default, int? limitAchievementReleases = default, int? limitLeaderboardReleases = default, int? limitLeaderboardSetReleases = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/gameCenterDetail";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterAppVersions.HasValue)
            uriBuilder.AddParameter("limit[gameCenterAppVersions]", limitGameCenterAppVersions.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitGameCenterAchievements.HasValue)
            uriBuilder.AddParameter("limit[gameCenterAchievements]", limitGameCenterAchievements.Value.ToString());
        if (limitAchievementReleases.HasValue)
            uriBuilder.AddParameter("limit[achievementReleases]", limitAchievementReleases.Value.ToString());
        if (limitLeaderboardReleases.HasValue)
            uriBuilder.AddParameter("limit[leaderboardReleases]", limitLeaderboardReleases.Value.ToString());
        if (limitLeaderboardSetReleases.HasValue)
            uriBuilder.AddParameter("limit[leaderboardSetReleases]", limitLeaderboardSetReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterEnabledVersions_getToManyRelatedFilterPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterEnabledVersions_getToManyRelatedSort
    {
        versionString,
        [EnumMember(Value = "-versionString")]
        versionStringDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterEnabledVersions_getToManyRelatedFieldsGameCenterEnabledVersions
    {
        platform,
        versionString,
        iconAsset,
        compatibleVersions,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterEnabledVersions_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_gameCenterEnabledVersions_getToManyRelatedInclude
    {
        compatibleVersions,
        app,
    }

    // /v1/apps/{id}/gameCenterEnabledVersions
    [Obsolete]
    public Task<GameCenterEnabledVersionsResponse> Apps_gameCenterEnabledVersions_getToManyRelated(string id, Apps_gameCenterEnabledVersions_getToManyRelatedFilterPlatform[]? filterPlatform = default, string[]? filterVersionString = default, string[]? filterId = default, Apps_gameCenterEnabledVersions_getToManyRelatedSort[]? sort = default, Apps_gameCenterEnabledVersions_getToManyRelatedFieldsGameCenterEnabledVersions[]? fieldsGameCenterEnabledVersions = default, Apps_gameCenterEnabledVersions_getToManyRelatedFieldsApps[]? fieldsApps = default, int? limit = default, Apps_gameCenterEnabledVersions_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/gameCenterEnabledVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterVersionString != null)
            uriBuilder.AddParameter("filter[versionString]", string.Join(",", filterVersionString));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsGameCenterEnabledVersions != null)
            uriBuilder.AddParameter("fields[gameCenterEnabledVersions]", string.Join(",", fieldsGameCenterEnabledVersions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterEnabledVersionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchases_getToManyRelatedFilterInAppPurchaseType
    {
        AUTOMATICALLY_RENEWABLE_SUBSCRIPTION,
        NON_CONSUMABLE,
        CONSUMABLE,
        NON_RENEWING_SUBSCRIPTION,
        FREE_SUBSCRIPTION,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchases_getToManyRelatedSort
    {
        referenceName,
        [EnumMember(Value = "-referenceName")]
        referenceNameDescending,
        productId,
        [EnumMember(Value = "-productId")]
        productIdDescending,
        inAppPurchaseType,
        [EnumMember(Value = "-inAppPurchaseType")]
        inAppPurchaseTypeDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchases_getToManyRelatedFieldsInAppPurchases
    {
        referenceName,
        productId,
        inAppPurchaseType,
        state,
        apps,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchases_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/apps/{id}/inAppPurchases
    [Obsolete]
    public Task<InAppPurchasesResponse> Apps_inAppPurchases_getToManyRelated(string id, Apps_inAppPurchases_getToManyRelatedFilterInAppPurchaseType[]? filterInAppPurchaseType = default, string[]? filterCanBeSubmitted = default, Apps_inAppPurchases_getToManyRelatedSort[]? sort = default, Apps_inAppPurchases_getToManyRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, Apps_inAppPurchases_getToManyRelatedFieldsApps[]? fieldsApps = default, int? limit = default, string[]? include = default, int? limitApps = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/inAppPurchases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterInAppPurchaseType != null)
            uriBuilder.AddParameter("filter[inAppPurchaseType]", string.Join(",", filterInAppPurchaseType));
        if (filterCanBeSubmitted != null)
            uriBuilder.AddParameter("filter[canBeSubmitted]", string.Join(",", filterCanBeSubmitted));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitApps.HasValue)
            uriBuilder.AddParameter("limit[apps]", limitApps.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchasesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFilterState
    {
        MISSING_METADATA,
        WAITING_FOR_UPLOAD,
        PROCESSING_CONTENT,
        READY_TO_SUBMIT,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        DEVELOPER_ACTION_NEEDED,
        PENDING_BINARY_APPROVAL,
        APPROVED,
        DEVELOPER_REMOVED_FROM_SALE,
        REMOVED_FROM_SALE,
        REJECTED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFilterInAppPurchaseType
    {
        CONSUMABLE,
        NON_CONSUMABLE,
        NON_RENEWING_SUBSCRIPTION,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedSort
    {
        name,
        [EnumMember(Value = "-name")]
        nameDescending,
        inAppPurchaseType,
        [EnumMember(Value = "-inAppPurchaseType")]
        inAppPurchaseTypeDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchases
    {
        name,
        productId,
        inAppPurchaseType,
        state,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseLocalizations
    {
        name,
        locale,
        description,
        state,
        inAppPurchaseV2,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseContents
    {
        fileName,
        fileSize,
        url,
        lastModifiedDate,
        inAppPurchaseV2,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        inAppPurchaseV2,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchasePriceSchedules
    {
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseAvailabilities
    {
        availableInNewTerritories,
        availableTerritories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        uploadOperations,
        state,
        inAppPurchase,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_inAppPurchasesV2_getToManyRelatedInclude
    {
        inAppPurchaseLocalizations,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    // /v1/apps/{id}/inAppPurchasesV2
    public Task<InAppPurchasesV2Response> Apps_inAppPurchasesV2_getToManyRelated(string id, string[]? filterProductId = default, string[]? filterName = default, Apps_inAppPurchasesV2_getToManyRelatedFilterState[]? filterState = default, Apps_inAppPurchasesV2_getToManyRelatedFilterInAppPurchaseType[]? filterInAppPurchaseType = default, Apps_inAppPurchasesV2_getToManyRelatedSort[]? sort = default, Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseLocalizations[]? fieldsInAppPurchaseLocalizations = default, Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseContents[]? fieldsInAppPurchaseContents = default, Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshots[]? fieldsInAppPurchaseAppStoreReviewScreenshots = default, Apps_inAppPurchasesV2_getToManyRelatedFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchasePriceSchedules[]? fieldsInAppPurchasePriceSchedules = default, Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseAvailabilities[]? fieldsInAppPurchaseAvailabilities = default, Apps_inAppPurchasesV2_getToManyRelatedFieldsInAppPurchaseImages[]? fieldsInAppPurchaseImages = default, int? limit = default, Apps_inAppPurchasesV2_getToManyRelatedInclude[]? include = default, int? limitInAppPurchaseLocalizations = default, int? limitImages = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/inAppPurchasesV2";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterProductId != null)
            uriBuilder.AddParameter("filter[productId]", string.Join(",", filterProductId));
        if (filterName != null)
            uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
        if (filterState != null)
            uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
        if (filterInAppPurchaseType != null)
            uriBuilder.AddParameter("filter[inAppPurchaseType]", string.Join(",", filterInAppPurchaseType));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (fieldsInAppPurchaseLocalizations != null)
            uriBuilder.AddParameter("fields[inAppPurchaseLocalizations]", string.Join(",", fieldsInAppPurchaseLocalizations));
        if (fieldsInAppPurchaseContents != null)
            uriBuilder.AddParameter("fields[inAppPurchaseContents]", string.Join(",", fieldsInAppPurchaseContents));
        if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            uriBuilder.AddParameter("fields[inAppPurchaseAppStoreReviewScreenshots]", string.Join(",", fieldsInAppPurchaseAppStoreReviewScreenshots));
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsInAppPurchasePriceSchedules != null)
            uriBuilder.AddParameter("fields[inAppPurchasePriceSchedules]", string.Join(",", fieldsInAppPurchasePriceSchedules));
        if (fieldsInAppPurchaseAvailabilities != null)
            uriBuilder.AddParameter("fields[inAppPurchaseAvailabilities]", string.Join(",", fieldsInAppPurchaseAvailabilities));
        if (fieldsInAppPurchaseImages != null)
            uriBuilder.AddParameter("fields[inAppPurchaseImages]", string.Join(",", fieldsInAppPurchaseImages));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitInAppPurchaseLocalizations.HasValue)
            uriBuilder.AddParameter("limit[inAppPurchaseLocalizations]", limitInAppPurchaseLocalizations.Value.ToString());
        if (limitImages.HasValue)
            uriBuilder.AddParameter("limit[images]", limitImages.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchasesV2Response>(message, log);
    }

    // /v1/apps/{id}/marketplaceSearchDetail
    public Task<MarketplaceSearchDetailResponse> Apps_marketplaceSearchDetail_getToOneRelated(string id, string[]? fieldsMarketplaceSearchDetails = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/marketplaceSearchDetail";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsMarketplaceSearchDetails != null)
            uriBuilder.AddParameter("fields[marketplaceSearchDetails]", string.Join(",", fieldsMarketplaceSearchDetails));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<MarketplaceSearchDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_betaTesterUsages_getMetricsPeriod
    {
        P7D,
        P30D,
        P90D,
        P365D,
    }

    // /v1/apps/{id}/metrics/betaTesterUsages
    public Task<AppsBetaTesterUsagesV1MetricResponse> Apps_betaTesterUsages_getMetrics(string id, Apps_betaTesterUsages_getMetricsPeriod? period = default, string[]? groupBy = default, string? filterBetaTesters = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/metrics/betaTesterUsages";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (period.HasValue)
            uriBuilder.AddParameter("period", period.Value.ToString());
        if (groupBy != null)
            uriBuilder.AddParameter("groupBy", string.Join(",", groupBy));
        if (filterBetaTesters != null)
            uriBuilder.AddParameter("filter[betaTesters]", filterBetaTesters);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppsBetaTesterUsagesV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_perfPowerMetrics_getToManyRelatedFilterMetricType
    {
        DISK,
        HANG,
        BATTERY,
        LAUNCH,
        MEMORY,
        ANIMATION,
        TERMINATION,
    }

    // /v1/apps/{id}/perfPowerMetrics
    public Task Apps_perfPowerMetrics_getToManyRelated(string id, string[]? filterPlatform = default, Apps_perfPowerMetrics_getToManyRelatedFilterMetricType[]? filterMetricType = default, string[]? filterDeviceType = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/perfPowerMetrics";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterMetricType != null)
            uriBuilder.AddParameter("filter[metricType]", string.Join(",", filterMetricType));
        if (filterDeviceType != null)
            uriBuilder.AddParameter("filter[deviceType]", string.Join(",", filterDeviceType));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_preReleaseVersions_getToManyRelatedFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    // /v1/apps/{id}/preReleaseVersions
    public Task<PreReleaseVersionsWithoutIncludesResponse> Apps_preReleaseVersions_getToManyRelated(string id, Apps_preReleaseVersions_getToManyRelatedFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/preReleaseVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PreReleaseVersionsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_promotedPurchases_getToManyRelatedFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_promotedPurchases_getToManyRelatedFieldsInAppPurchases
    {
        name,
        productId,
        inAppPurchaseType,
        state,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_promotedPurchases_getToManyRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_promotedPurchases_getToManyRelatedFieldsPromotedPurchaseImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        assetType,
        uploadOperations,
        state,
        promotedPurchase,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_promotedPurchases_getToManyRelatedInclude
    {
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    // /v1/apps/{id}/promotedPurchases
    public Task<PromotedPurchasesResponse> Apps_promotedPurchases_getToManyRelated(string id, Apps_promotedPurchases_getToManyRelatedFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, Apps_promotedPurchases_getToManyRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, Apps_promotedPurchases_getToManyRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, Apps_promotedPurchases_getToManyRelatedFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, int? limit = default, Apps_promotedPurchases_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/promotedPurchases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsPromotedPurchaseImages != null)
            uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PromotedPurchasesResponse>(message, log);
    }

    public class Apps_betaTesters_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/apps/{id}/relationships/betaTesters
    public Task Apps_betaTesters_deleteToManyRelationship(string id, AppBetaTestersLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/relationships/betaTesters";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/apps/{id}/relationships/promotedPurchases
    public Task<AppPromotedPurchasesLinkagesResponse> Apps_promotedPurchases_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/relationships/promotedPurchases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPromotedPurchasesLinkagesResponse>(message, log);
    }

    public class Apps_promotedPurchases_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "promotedPurchases";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/apps/{id}/relationships/promotedPurchases
    public Task Apps_promotedPurchases_replaceToManyRelationship(string id, AppPromotedPurchasesLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/relationships/promotedPurchases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_reviewSubmissions_getToManyRelatedFilterPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_reviewSubmissions_getToManyRelatedFilterState
    {
        READY_FOR_REVIEW,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        UNRESOLVED_ISSUES,
        CANCELING,
        COMPLETING,
        COMPLETE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_reviewSubmissions_getToManyRelatedFieldsReviewSubmissions
    {
        platform,
        submittedDate,
        state,
        app,
        items,
        appStoreVersionForReview,
        submittedByActor,
        lastUpdatedByActor,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_reviewSubmissions_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_reviewSubmissions_getToManyRelatedFieldsReviewSubmissionItems
    {
        state,
        appStoreVersion,
        appCustomProductPageVersion,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appEvent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_reviewSubmissions_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_reviewSubmissions_getToManyRelatedFieldsActors
    {
        actorType,
        userFirstName,
        userLastName,
        userEmail,
        apiKeyId,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_reviewSubmissions_getToManyRelatedInclude
    {
        app,
        items,
        appStoreVersionForReview,
        submittedByActor,
        lastUpdatedByActor,
    }

    // /v1/apps/{id}/reviewSubmissions
    public Task<ReviewSubmissionsResponse> Apps_reviewSubmissions_getToManyRelated(string id, Apps_reviewSubmissions_getToManyRelatedFilterPlatform[]? filterPlatform = default, Apps_reviewSubmissions_getToManyRelatedFilterState[]? filterState = default, Apps_reviewSubmissions_getToManyRelatedFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, Apps_reviewSubmissions_getToManyRelatedFieldsApps[]? fieldsApps = default, Apps_reviewSubmissions_getToManyRelatedFieldsReviewSubmissionItems[]? fieldsReviewSubmissionItems = default, Apps_reviewSubmissions_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, Apps_reviewSubmissions_getToManyRelatedFieldsActors[]? fieldsActors = default, int? limit = default, Apps_reviewSubmissions_getToManyRelatedInclude[]? include = default, int? limitItems = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/reviewSubmissions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterState != null)
            uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
        if (fieldsReviewSubmissions != null)
            uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsReviewSubmissionItems != null)
            uriBuilder.AddParameter("fields[reviewSubmissionItems]", string.Join(",", fieldsReviewSubmissionItems));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsActors != null)
            uriBuilder.AddParameter("fields[actors]", string.Join(",", fieldsActors));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitItems.HasValue)
            uriBuilder.AddParameter("limit[items]", limitItems.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ReviewSubmissionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_subscriptionGracePeriod_getToOneRelatedFieldsSubscriptionGracePeriods
    {
        optIn,
        sandboxOptIn,
        duration,
        renewalType,
    }

    // /v1/apps/{id}/subscriptionGracePeriod
    public Task<SubscriptionGracePeriodResponse> Apps_subscriptionGracePeriod_getToOneRelated(string id, Apps_subscriptionGracePeriod_getToOneRelatedFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/subscriptionGracePeriod";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionGracePeriods != null)
            uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionGracePeriodResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_subscriptionGroups_getToManyRelatedFilterSubscriptionsState
    {
        MISSING_METADATA,
        READY_TO_SUBMIT,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        DEVELOPER_ACTION_NEEDED,
        PENDING_BINARY_APPROVAL,
        APPROVED,
        DEVELOPER_REMOVED_FROM_SALE,
        REMOVED_FROM_SALE,
        REJECTED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_subscriptionGroups_getToManyRelatedSort
    {
        referenceName,
        [EnumMember(Value = "-referenceName")]
        referenceNameDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_subscriptionGroups_getToManyRelatedFieldsSubscriptionGroups
    {
        referenceName,
        subscriptions,
        subscriptionGroupLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_subscriptionGroups_getToManyRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_subscriptionGroups_getToManyRelatedFieldsSubscriptionGroupLocalizations
    {
        name,
        customAppName,
        locale,
        state,
        subscriptionGroup,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Apps_subscriptionGroups_getToManyRelatedInclude
    {
        subscriptions,
        subscriptionGroupLocalizations,
    }

    // /v1/apps/{id}/subscriptionGroups
    public Task<SubscriptionGroupsResponse> Apps_subscriptionGroups_getToManyRelated(string id, string[]? filterReferenceName = default, Apps_subscriptionGroups_getToManyRelatedFilterSubscriptionsState[]? filterSubscriptionsState = default, Apps_subscriptionGroups_getToManyRelatedSort[]? sort = default, Apps_subscriptionGroups_getToManyRelatedFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, Apps_subscriptionGroups_getToManyRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, Apps_subscriptionGroups_getToManyRelatedFieldsSubscriptionGroupLocalizations[]? fieldsSubscriptionGroupLocalizations = default, int? limit = default, Apps_subscriptionGroups_getToManyRelatedInclude[]? include = default, int? limitSubscriptions = default, int? limitSubscriptionGroupLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/apps/{id}/subscriptionGroups";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterReferenceName != null)
            uriBuilder.AddParameter("filter[referenceName]", string.Join(",", filterReferenceName));
        if (filterSubscriptionsState != null)
            uriBuilder.AddParameter("filter[subscriptions.state]", string.Join(",", filterSubscriptionsState));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsSubscriptionGroups != null)
            uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsSubscriptionGroupLocalizations != null)
            uriBuilder.AddParameter("fields[subscriptionGroupLocalizations]", string.Join(",", fieldsSubscriptionGroupLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubscriptions.HasValue)
            uriBuilder.AddParameter("limit[subscriptions]", limitSubscriptions.Value.ToString());
        if (limitSubscriptionGroupLocalizations.HasValue)
            uriBuilder.AddParameter("limit[subscriptionGroupLocalizations]", limitSubscriptionGroupLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionGroupsResponse>(message, log);
    }

    // /v1/appScreenshots
    public Task<AppScreenshotResponse> AppScreenshots_createInstance(AppScreenshotCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appScreenshots";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppScreenshotResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppScreenshots_getInstanceFieldsAppScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        appScreenshotSet,
    }

    // /v1/appScreenshots/{id}
    public Task<AppScreenshotResponse> AppScreenshots_getInstance(string id, AppScreenshots_getInstanceFieldsAppScreenshots[]? fieldsAppScreenshots = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppScreenshots != null)
            uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppScreenshotResponse>(message, log);
    }

    // /v1/appScreenshots/{id}
    public Task<AppScreenshotResponse> AppScreenshots_updateInstance(string id, AppScreenshotUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppScreenshotResponse>(message, log);
    }

    // /v1/appScreenshots/{id}
    public Task AppScreenshots_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/appScreenshotSets
    public Task<AppScreenshotSetResponse> AppScreenshotSets_createInstance(AppScreenshotSetCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appScreenshotSets";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppScreenshotSetResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppScreenshotSets_getInstanceFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppScreenshotSets_getInstanceFieldsAppScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        appScreenshotSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppScreenshotSets_getInstanceInclude
    {
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    // /v1/appScreenshotSets/{id}
    public Task<AppScreenshotSetResponse> AppScreenshotSets_getInstance(string id, AppScreenshotSets_getInstanceFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppScreenshotSets_getInstanceFieldsAppScreenshots[]? fieldsAppScreenshots = default, AppScreenshotSets_getInstanceInclude[]? include = default, int? limitAppScreenshots = default, INestedLog? log = null)
    {
        string path = "/v1/appScreenshotSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppScreenshots != null)
            uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppScreenshots.HasValue)
            uriBuilder.AddParameter("limit[appScreenshots]", limitAppScreenshots.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppScreenshotSetResponse>(message, log);
    }

    // /v1/appScreenshotSets/{id}
    public Task AppScreenshotSets_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appScreenshotSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppScreenshotSets_appScreenshots_getToManyRelatedFieldsAppScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        appScreenshotSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppScreenshotSets_appScreenshots_getToManyRelatedFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    // /v1/appScreenshotSets/{id}/appScreenshots
    public Task<AppScreenshotsResponse> AppScreenshotSets_appScreenshots_getToManyRelated(string id, AppScreenshotSets_appScreenshots_getToManyRelatedFieldsAppScreenshots[]? fieldsAppScreenshots = default, AppScreenshotSets_appScreenshots_getToManyRelatedFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appScreenshotSets/{id}/appScreenshots";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppScreenshots != null)
            uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppScreenshotsResponse>(message, log);
    }

    // /v1/appScreenshotSets/{id}/relationships/appScreenshots
    public Task<AppScreenshotSetAppScreenshotsLinkagesResponse> AppScreenshotSets_appScreenshots_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/appScreenshotSets/{id}/relationships/appScreenshots";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppScreenshotSetAppScreenshotsLinkagesResponse>(message, log);
    }

    public class AppScreenshotSets_appScreenshots_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appScreenshots";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/appScreenshotSets/{id}/relationships/appScreenshots
    public Task AppScreenshotSets_appScreenshots_replaceToManyRelationship(string id, AppScreenshotSetAppScreenshotsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/appScreenshotSets/{id}/relationships/appScreenshots";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/appStoreReviewAttachments
    public Task<AppStoreReviewAttachmentResponse> AppStoreReviewAttachments_createInstance(AppStoreReviewAttachmentCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreReviewAttachments";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreReviewAttachmentResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreReviewAttachments_getInstanceFieldsAppStoreReviewAttachments
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreReviewDetail,
    }

    // /v1/appStoreReviewAttachments/{id}
    public Task<AppStoreReviewAttachmentResponse> AppStoreReviewAttachments_getInstance(string id, AppStoreReviewAttachments_getInstanceFieldsAppStoreReviewAttachments[]? fieldsAppStoreReviewAttachments = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreReviewAttachments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreReviewAttachments != null)
            uriBuilder.AddParameter("fields[appStoreReviewAttachments]", string.Join(",", fieldsAppStoreReviewAttachments));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreReviewAttachmentResponse>(message, log);
    }

    // /v1/appStoreReviewAttachments/{id}
    public Task<AppStoreReviewAttachmentResponse> AppStoreReviewAttachments_updateInstance(string id, AppStoreReviewAttachmentUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreReviewAttachments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreReviewAttachmentResponse>(message, log);
    }

    // /v1/appStoreReviewAttachments/{id}
    public Task AppStoreReviewAttachments_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreReviewAttachments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/appStoreReviewDetails
    public Task<AppStoreReviewDetailResponse> AppStoreReviewDetails_createInstance(AppStoreReviewDetailCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreReviewDetails";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreReviewDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreReviewDetails_getInstanceFieldsAppStoreReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        appStoreVersion,
        appStoreReviewAttachments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreReviewDetails_getInstanceFieldsAppStoreReviewAttachments
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreReviewDetails_getInstanceInclude
    {
        appStoreVersion,
        appStoreReviewAttachments,
    }

    // /v1/appStoreReviewDetails/{id}
    public Task<AppStoreReviewDetailResponse> AppStoreReviewDetails_getInstance(string id, AppStoreReviewDetails_getInstanceFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, AppStoreReviewDetails_getInstanceFieldsAppStoreReviewAttachments[]? fieldsAppStoreReviewAttachments = default, AppStoreReviewDetails_getInstanceInclude[]? include = default, int? limitAppStoreReviewAttachments = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreReviewDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
        if (fieldsAppStoreReviewAttachments != null)
            uriBuilder.AddParameter("fields[appStoreReviewAttachments]", string.Join(",", fieldsAppStoreReviewAttachments));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreReviewAttachments.HasValue)
            uriBuilder.AddParameter("limit[appStoreReviewAttachments]", limitAppStoreReviewAttachments.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreReviewDetailResponse>(message, log);
    }

    // /v1/appStoreReviewDetails/{id}
    public Task<AppStoreReviewDetailResponse> AppStoreReviewDetails_updateInstance(string id, AppStoreReviewDetailUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreReviewDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreReviewDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreReviewDetails_appStoreReviewAttachments_getToManyRelatedFieldsAppStoreReviewAttachments
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreReviewDetails_appStoreReviewAttachments_getToManyRelatedFieldsAppStoreReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        appStoreVersion,
        appStoreReviewAttachments,
    }

    // /v1/appStoreReviewDetails/{id}/appStoreReviewAttachments
    public Task<AppStoreReviewAttachmentsResponse> AppStoreReviewDetails_appStoreReviewAttachments_getToManyRelated(string id, AppStoreReviewDetails_appStoreReviewAttachments_getToManyRelatedFieldsAppStoreReviewAttachments[]? fieldsAppStoreReviewAttachments = default, AppStoreReviewDetails_appStoreReviewAttachments_getToManyRelatedFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreReviewDetails/{id}/appStoreReviewAttachments";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreReviewAttachments != null)
            uriBuilder.AddParameter("fields[appStoreReviewAttachments]", string.Join(",", fieldsAppStoreReviewAttachments));
        if (fieldsAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreReviewAttachmentsResponse>(message, log);
    }

    // /v1/appStoreVersionExperiments
    [Obsolete]
    public Task<AppStoreVersionExperimentResponse> AppStoreVersionExperiments_createInstance(AppStoreVersionExperimentCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperiments";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionExperimentResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperiments_getInstanceFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperiments_getInstanceFieldsAppStoreVersionExperimentTreatments
    {
        name,
        appIcon,
        appIconName,
        promotedDate,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperiments_getInstanceInclude
    {
        appStoreVersion,
        appStoreVersionExperimentTreatments,
    }

    // /v1/appStoreVersionExperiments/{id}
    [Obsolete]
    public Task<AppStoreVersionExperimentResponse> AppStoreVersionExperiments_getInstance(string id, AppStoreVersionExperiments_getInstanceFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, AppStoreVersionExperiments_getInstanceFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, AppStoreVersionExperiments_getInstanceInclude[]? include = default, int? limitAppStoreVersionExperimentTreatments = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperiments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAppStoreVersionExperimentTreatments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionExperimentTreatments.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentResponse>(message, log);
    }

    // /v1/appStoreVersionExperiments/{id}
    [Obsolete]
    public Task<AppStoreVersionExperimentResponse> AppStoreVersionExperiments_updateInstance(string id, AppStoreVersionExperimentUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperiments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionExperimentResponse>(message, log);
    }

    // /v1/appStoreVersionExperiments/{id}
    [Obsolete]
    public Task AppStoreVersionExperiments_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperiments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperiments_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperimentTreatments
    {
        name,
        appIcon,
        appIconName,
        promotedDate,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperiments_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
        platform,
        app,
        latestControlVersion,
        controlVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperiments_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperiments_appStoreVersionExperimentTreatments_getToManyRelatedInclude
    {
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    // /v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments
    [Obsolete]
    public Task<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperiments_appStoreVersionExperimentTreatments_getToManyRelated(string id, AppStoreVersionExperiments_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, AppStoreVersionExperiments_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, AppStoreVersionExperiments_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, int? limit = default, AppStoreVersionExperiments_appStoreVersionExperimentTreatments_getToManyRelatedInclude[]? include = default, int? limitAppStoreVersionExperimentTreatmentLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersionExperimentTreatments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionExperimentTreatmentLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatmentLocalizations]", limitAppStoreVersionExperimentTreatmentLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentTreatmentsResponse>(message, log);
    }

    // /v1/appStoreVersionExperimentTreatmentLocalizations
    public Task<AppStoreVersionExperimentTreatmentLocalizationResponse> AppStoreVersionExperimentTreatmentLocalizations_createInstance(AppStoreVersionExperimentTreatmentLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatmentLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionExperimentTreatmentLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_getInstanceFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_getInstanceFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_getInstanceFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_getInstanceInclude
    {
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    // /v1/appStoreVersionExperimentTreatmentLocalizations/{id}
    public Task<AppStoreVersionExperimentTreatmentLocalizationResponse> AppStoreVersionExperimentTreatmentLocalizations_getInstance(string id, AppStoreVersionExperimentTreatmentLocalizations_getInstanceFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, AppStoreVersionExperimentTreatmentLocalizations_getInstanceFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppStoreVersionExperimentTreatmentLocalizations_getInstanceFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, AppStoreVersionExperimentTreatmentLocalizations_getInstanceInclude[]? include = default, int? limitAppPreviewSets = default, int? limitAppScreenshotSets = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppPreviewSets.HasValue)
            uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());
        if (limitAppScreenshotSets.HasValue)
            uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentTreatmentLocalizationResponse>(message, log);
    }

    // /v1/appStoreVersionExperimentTreatmentLocalizations/{id}
    public Task AppStoreVersionExperimentTreatmentLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFilterPreviewType
    {
        IPHONE_67,
        IPHONE_61,
        IPHONE_65,
        IPHONE_58,
        IPHONE_55,
        IPHONE_47,
        IPHONE_40,
        IPHONE_35,
        IPAD_PRO_3GEN_129,
        IPAD_PRO_3GEN_11,
        IPAD_PRO_129,
        IPAD_105,
        IPAD_97,
        DESKTOP,
        APPLE_TV,
        APPLE_VISION_PRO,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviews
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        previewFrameTimeCode,
        mimeType,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appPreviewSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedInclude
    {
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    // /v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets
    public Task<AppPreviewSetsResponse> AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelated(string id, AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFilterPreviewType[]? filterPreviewType = default, string[]? filterAppStoreVersionLocalization = default, string[]? filterAppCustomProductPageLocalization = default, AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviews[]? fieldsAppPreviews = default, int? limit = default, AppStoreVersionExperimentTreatmentLocalizations_appPreviewSets_getToManyRelatedInclude[]? include = default, int? limitAppPreviews = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPreviewType != null)
            uriBuilder.AddParameter("filter[previewType]", string.Join(",", filterPreviewType));
        if (filterAppStoreVersionLocalization != null)
            uriBuilder.AddParameter("filter[appStoreVersionLocalization]", string.Join(",", filterAppStoreVersionLocalization));
        if (filterAppCustomProductPageLocalization != null)
            uriBuilder.AddParameter("filter[appCustomProductPageLocalization]", string.Join(",", filterAppCustomProductPageLocalization));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (fieldsAppPreviews != null)
            uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppPreviews.HasValue)
            uriBuilder.AddParameter("limit[appPreviews]", limitAppPreviews.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPreviewSetsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFilterScreenshotDisplayType
    {
        APP_IPHONE_67,
        APP_IPHONE_61,
        APP_IPHONE_65,
        APP_IPHONE_58,
        APP_IPHONE_55,
        APP_IPHONE_47,
        APP_IPHONE_40,
        APP_IPHONE_35,
        APP_IPAD_PRO_3GEN_129,
        APP_IPAD_PRO_3GEN_11,
        APP_IPAD_PRO_129,
        APP_IPAD_105,
        APP_IPAD_97,
        APP_DESKTOP,
        APP_WATCH_ULTRA,
        APP_WATCH_SERIES_10,
        APP_WATCH_SERIES_7,
        APP_WATCH_SERIES_4,
        APP_WATCH_SERIES_3,
        APP_APPLE_TV,
        APP_APPLE_VISION_PRO,
        IMESSAGE_APP_IPHONE_67,
        IMESSAGE_APP_IPHONE_61,
        IMESSAGE_APP_IPHONE_65,
        IMESSAGE_APP_IPHONE_58,
        IMESSAGE_APP_IPHONE_55,
        IMESSAGE_APP_IPHONE_47,
        IMESSAGE_APP_IPHONE_40,
        IMESSAGE_APP_IPAD_PRO_3GEN_129,
        IMESSAGE_APP_IPAD_PRO_3GEN_11,
        IMESSAGE_APP_IPAD_PRO_129,
        IMESSAGE_APP_IPAD_105,
        IMESSAGE_APP_IPAD_97,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        appScreenshotSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedInclude
    {
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    // /v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets
    public Task<AppScreenshotSetsResponse> AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelated(string id, AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFilterScreenshotDisplayType[]? filterScreenshotDisplayType = default, string[]? filterAppStoreVersionLocalization = default, string[]? filterAppCustomProductPageLocalization = default, AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshots[]? fieldsAppScreenshots = default, int? limit = default, AppStoreVersionExperimentTreatmentLocalizations_appScreenshotSets_getToManyRelatedInclude[]? include = default, int? limitAppScreenshots = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterScreenshotDisplayType != null)
            uriBuilder.AddParameter("filter[screenshotDisplayType]", string.Join(",", filterScreenshotDisplayType));
        if (filterAppStoreVersionLocalization != null)
            uriBuilder.AddParameter("filter[appStoreVersionLocalization]", string.Join(",", filterAppStoreVersionLocalization));
        if (filterAppCustomProductPageLocalization != null)
            uriBuilder.AddParameter("filter[appCustomProductPageLocalization]", string.Join(",", filterAppCustomProductPageLocalization));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (fieldsAppScreenshots != null)
            uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppScreenshots.HasValue)
            uriBuilder.AddParameter("limit[appScreenshots]", limitAppScreenshots.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppScreenshotSetsResponse>(message, log);
    }

    // /v1/appStoreVersionExperimentTreatments
    public Task<AppStoreVersionExperimentTreatmentResponse> AppStoreVersionExperimentTreatments_createInstance(AppStoreVersionExperimentTreatmentCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatments";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionExperimentTreatmentResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatments_getInstanceFieldsAppStoreVersionExperimentTreatments
    {
        name,
        appIcon,
        appIconName,
        promotedDate,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatments_getInstanceFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatments_getInstanceInclude
    {
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    // /v1/appStoreVersionExperimentTreatments/{id}
    public Task<AppStoreVersionExperimentTreatmentResponse> AppStoreVersionExperimentTreatments_getInstance(string id, AppStoreVersionExperimentTreatments_getInstanceFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, AppStoreVersionExperimentTreatments_getInstanceFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, AppStoreVersionExperimentTreatments_getInstanceInclude[]? include = default, int? limitAppStoreVersionExperimentTreatmentLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersionExperimentTreatments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionExperimentTreatmentLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatmentLocalizations]", limitAppStoreVersionExperimentTreatmentLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentTreatmentResponse>(message, log);
    }

    // /v1/appStoreVersionExperimentTreatments/{id}
    public Task<AppStoreVersionExperimentTreatmentResponse> AppStoreVersionExperimentTreatments_updateInstance(string id, AppStoreVersionExperimentTreatmentUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionExperimentTreatmentResponse>(message, log);
    }

    // /v1/appStoreVersionExperimentTreatments/{id}
    public Task AppStoreVersionExperimentTreatments_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedFieldsAppStoreVersionExperimentTreatments
    {
        name,
        appIcon,
        appIconName,
        promotedDate,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedInclude
    {
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    // /v1/appStoreVersionExperimentTreatments/{id}/appStoreVersionExperimentTreatmentLocalizations
    public Task<AppStoreVersionExperimentTreatmentLocalizationsResponse> AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelated(string id, string[]? filterLocale = default, AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limit = default, AppStoreVersionExperimentTreatments_appStoreVersionExperimentTreatmentLocalizations_getToManyRelatedInclude[]? include = default, int? limitAppScreenshotSets = default, int? limitAppPreviewSets = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionExperimentTreatments/{id}/appStoreVersionExperimentTreatmentLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLocale != null)
            uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (fieldsAppStoreVersionExperimentTreatments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppScreenshotSets.HasValue)
            uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());
        if (limitAppPreviewSets.HasValue)
            uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentTreatmentLocalizationsResponse>(message, log);
    }

    // /v1/appStoreVersionLocalizations
    public Task<AppStoreVersionLocalizationResponse> AppStoreVersionLocalizations_createInstance(AppStoreVersionLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_getInstanceFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_getInstanceFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_getInstanceFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_getInstanceInclude
    {
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    // /v1/appStoreVersionLocalizations/{id}
    public Task<AppStoreVersionLocalizationResponse> AppStoreVersionLocalizations_getInstance(string id, AppStoreVersionLocalizations_getInstanceFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppStoreVersionLocalizations_getInstanceFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppStoreVersionLocalizations_getInstanceFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, AppStoreVersionLocalizations_getInstanceInclude[]? include = default, int? limitAppPreviewSets = default, int? limitAppScreenshotSets = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppPreviewSets.HasValue)
            uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());
        if (limitAppScreenshotSets.HasValue)
            uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionLocalizationResponse>(message, log);
    }

    // /v1/appStoreVersionLocalizations/{id}
    public Task<AppStoreVersionLocalizationResponse> AppStoreVersionLocalizations_updateInstance(string id, AppStoreVersionLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionLocalizationResponse>(message, log);
    }

    // /v1/appStoreVersionLocalizations/{id}
    public Task AppStoreVersionLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFilterPreviewType
    {
        IPHONE_67,
        IPHONE_61,
        IPHONE_65,
        IPHONE_58,
        IPHONE_55,
        IPHONE_47,
        IPHONE_40,
        IPHONE_35,
        IPAD_PRO_3GEN_129,
        IPAD_PRO_3GEN_11,
        IPAD_PRO_129,
        IPAD_105,
        IPAD_97,
        DESKTOP,
        APPLE_TV,
        APPLE_VISION_PRO,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviews
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        previewFrameTimeCode,
        mimeType,
        videoUrl,
        previewFrameImage,
        previewImage,
        uploadOperations,
        assetDeliveryState,
        videoDeliveryState,
        appPreviewSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedInclude
    {
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    // /v1/appStoreVersionLocalizations/{id}/appPreviewSets
    public Task<AppPreviewSetsResponse> AppStoreVersionLocalizations_appPreviewSets_getToManyRelated(string id, AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFilterPreviewType[]? filterPreviewType = default, string[]? filterAppCustomProductPageLocalization = default, string[]? filterAppStoreVersionExperimentTreatmentLocalization = default, AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedFieldsAppPreviews[]? fieldsAppPreviews = default, int? limit = default, AppStoreVersionLocalizations_appPreviewSets_getToManyRelatedInclude[]? include = default, int? limitAppPreviews = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionLocalizations/{id}/appPreviewSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPreviewType != null)
            uriBuilder.AddParameter("filter[previewType]", string.Join(",", filterPreviewType));
        if (filterAppCustomProductPageLocalization != null)
            uriBuilder.AddParameter("filter[appCustomProductPageLocalization]", string.Join(",", filterAppCustomProductPageLocalization));
        if (filterAppStoreVersionExperimentTreatmentLocalization != null)
            uriBuilder.AddParameter("filter[appStoreVersionExperimentTreatmentLocalization]", string.Join(",", filterAppStoreVersionExperimentTreatmentLocalization));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (fieldsAppPreviews != null)
            uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppPreviews.HasValue)
            uriBuilder.AddParameter("limit[appPreviews]", limitAppPreviews.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPreviewSetsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFilterScreenshotDisplayType
    {
        APP_IPHONE_67,
        APP_IPHONE_61,
        APP_IPHONE_65,
        APP_IPHONE_58,
        APP_IPHONE_55,
        APP_IPHONE_47,
        APP_IPHONE_40,
        APP_IPHONE_35,
        APP_IPAD_PRO_3GEN_129,
        APP_IPAD_PRO_3GEN_11,
        APP_IPAD_PRO_129,
        APP_IPAD_105,
        APP_IPAD_97,
        APP_DESKTOP,
        APP_WATCH_ULTRA,
        APP_WATCH_SERIES_10,
        APP_WATCH_SERIES_7,
        APP_WATCH_SERIES_4,
        APP_WATCH_SERIES_3,
        APP_APPLE_TV,
        APP_APPLE_VISION_PRO,
        IMESSAGE_APP_IPHONE_67,
        IMESSAGE_APP_IPHONE_61,
        IMESSAGE_APP_IPHONE_65,
        IMESSAGE_APP_IPHONE_58,
        IMESSAGE_APP_IPHONE_55,
        IMESSAGE_APP_IPHONE_47,
        IMESSAGE_APP_IPHONE_40,
        IMESSAGE_APP_IPAD_PRO_3GEN_129,
        IMESSAGE_APP_IPAD_PRO_3GEN_11,
        IMESSAGE_APP_IPAD_PRO_129,
        IMESSAGE_APP_IPAD_105,
        IMESSAGE_APP_IPAD_97,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppCustomProductPageLocalizations
    {
        locale,
        promotionalText,
        appCustomProductPageVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        appScreenshotSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedInclude
    {
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    // /v1/appStoreVersionLocalizations/{id}/appScreenshotSets
    public Task<AppScreenshotSetsResponse> AppStoreVersionLocalizations_appScreenshotSets_getToManyRelated(string id, AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFilterScreenshotDisplayType[]? filterScreenshotDisplayType = default, string[]? filterAppCustomProductPageLocalization = default, string[]? filterAppStoreVersionExperimentTreatmentLocalization = default, AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedFieldsAppScreenshots[]? fieldsAppScreenshots = default, int? limit = default, AppStoreVersionLocalizations_appScreenshotSets_getToManyRelatedInclude[]? include = default, int? limitAppScreenshots = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionLocalizations/{id}/appScreenshotSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterScreenshotDisplayType != null)
            uriBuilder.AddParameter("filter[screenshotDisplayType]", string.Join(",", filterScreenshotDisplayType));
        if (filterAppCustomProductPageLocalization != null)
            uriBuilder.AddParameter("filter[appCustomProductPageLocalization]", string.Join(",", filterAppCustomProductPageLocalization));
        if (filterAppStoreVersionExperimentTreatmentLocalization != null)
            uriBuilder.AddParameter("filter[appStoreVersionExperimentTreatmentLocalization]", string.Join(",", filterAppStoreVersionExperimentTreatmentLocalization));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsAppCustomProductPageLocalizations != null)
            uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (fieldsAppScreenshots != null)
            uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppScreenshots.HasValue)
            uriBuilder.AddParameter("limit[appScreenshots]", limitAppScreenshots.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppScreenshotSetsResponse>(message, log);
    }

    // /v1/appStoreVersionPhasedReleases
    public Task<AppStoreVersionPhasedReleaseResponse> AppStoreVersionPhasedReleases_createInstance(AppStoreVersionPhasedReleaseCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionPhasedReleases";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionPhasedReleaseResponse>(message, log);
    }

    // /v1/appStoreVersionPhasedReleases/{id}
    public Task<AppStoreVersionPhasedReleaseResponse> AppStoreVersionPhasedReleases_updateInstance(string id, AppStoreVersionPhasedReleaseUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionPhasedReleases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionPhasedReleaseResponse>(message, log);
    }

    // /v1/appStoreVersionPhasedReleases/{id}
    public Task AppStoreVersionPhasedReleases_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionPhasedReleases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/appStoreVersionPromotions
    public Task<AppStoreVersionPromotionResponse> AppStoreVersionPromotions_createInstance(AppStoreVersionPromotionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionPromotions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionPromotionResponse>(message, log);
    }

    // /v1/appStoreVersionReleaseRequests
    public Task<AppStoreVersionReleaseRequestResponse> AppStoreVersionReleaseRequests_createInstance(AppStoreVersionReleaseRequestCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionReleaseRequests";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionReleaseRequestResponse>(message, log);
    }

    // /v1/appStoreVersions
    public Task<AppStoreVersionResponse> AppStoreVersions_createInstance(AppStoreVersionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceFieldsAppStoreVersionPhasedReleases
    {
        phasedReleaseState,
        startDate,
        totalPauseDuration,
        currentDayNumber,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceFieldsRoutingAppCoverages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceFieldsAppStoreReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        appStoreVersion,
        appStoreReviewAttachments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
        platform,
        app,
        latestControlVersion,
        controlVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_getInstanceInclude
    {
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        alternativeDistributionPackage,
    }

    // /v1/appStoreVersions/{id}
    public Task<AppStoreVersionResponse> AppStoreVersions_getInstance(string id, AppStoreVersions_getInstanceFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppStoreVersions_getInstanceFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppStoreVersions_getInstanceFieldsBuilds[]? fieldsBuilds = default, AppStoreVersions_getInstanceFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, AppStoreVersions_getInstanceFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, AppStoreVersions_getInstanceFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, AppStoreVersions_getInstanceFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, AppStoreVersions_getInstanceFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, AppStoreVersions_getInstanceFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, string[]? fieldsAlternativeDistributionPackages = default, AppStoreVersions_getInstanceInclude[]? include = default, int? limitAppStoreVersionExperimentsV2 = default, int? limitAppStoreVersionLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsAppStoreVersionPhasedReleases != null)
            uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsRoutingAppCoverages != null)
            uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
        if (fieldsAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAlternativeDistributionPackages != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackages]", string.Join(",", fieldsAlternativeDistributionPackages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionExperimentsV2.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2.Value.ToString());
        if (limitAppStoreVersionLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionResponse>(message, log);
    }

    // /v1/appStoreVersions/{id}
    public Task<AppStoreVersionResponse> AppStoreVersions_updateInstance(string id, AppStoreVersionUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionResponse>(message, log);
    }

    // /v1/appStoreVersions/{id}
    public Task AppStoreVersions_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_ageRatingDeclaration_getToOneRelatedFieldsAgeRatingDeclarations
    {
        alcoholTobaccoOrDrugUseOrReferences,
        contests,
        gamblingAndContests,
        gambling,
        gamblingSimulated,
        kidsAgeBand,
        lootBox,
        medicalOrTreatmentInformation,
        profanityOrCrudeHumor,
        sexualContentGraphicAndNudity,
        sexualContentOrNudity,
        horrorOrFearThemes,
        matureOrSuggestiveThemes,
        unrestrictedWebAccess,
        violenceCartoonOrFantasy,
        violenceRealisticProlongedGraphicOrSadistic,
        violenceRealistic,
        ageRatingOverride,
        koreaAgeRatingOverride,
        seventeenPlus,
    }

    // /v1/appStoreVersions/{id}/ageRatingDeclaration
    [Obsolete]
    public Task<AgeRatingDeclarationWithoutIncludesResponse> AppStoreVersions_ageRatingDeclaration_getToOneRelated(string id, AppStoreVersions_ageRatingDeclaration_getToOneRelatedFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/ageRatingDeclaration";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAgeRatingDeclarations != null)
            uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AgeRatingDeclarationWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_alternativeDistributionPackage_getToOneRelatedFieldsAlternativeDistributionPackageVersions
    {
        url,
        urlExpirationDate,
        version,
        fileChecksum,
        state,
        variants,
        deltas,
        alternativeDistributionPackage,
    }

    // /v1/appStoreVersions/{id}/alternativeDistributionPackage
    public Task<AlternativeDistributionPackageResponse> AppStoreVersions_alternativeDistributionPackage_getToOneRelated(string id, string[]? fieldsAlternativeDistributionPackages = default, AppStoreVersions_alternativeDistributionPackage_getToOneRelatedFieldsAlternativeDistributionPackageVersions[]? fieldsAlternativeDistributionPackageVersions = default, string[]? include = default, int? limitVersions = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/alternativeDistributionPackage";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAlternativeDistributionPackages != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackages]", string.Join(",", fieldsAlternativeDistributionPackages));
        if (fieldsAlternativeDistributionPackageVersions != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackageVersions]", string.Join(",", fieldsAlternativeDistributionPackageVersions));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitVersions.HasValue)
            uriBuilder.AddParameter("limit[versions]", limitVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AlternativeDistributionPackageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppClips
    {
        bundleId,
        app,
        appClipDefaultExperiences,
        appClipAdvancedExperiences,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppClipDefaultExperienceLocalizations
    {
        locale,
        subtitle,
        appClipDefaultExperience,
        appClipHeaderImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppClipAppStoreReviewDetails
    {
        invocationUrls,
        appClipDefaultExperience,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appClipDefaultExperience_getToOneRelatedInclude
    {
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    // /v1/appStoreVersions/{id}/appClipDefaultExperience
    public Task<AppClipDefaultExperienceResponse> AppStoreVersions_appClipDefaultExperience_getToOneRelated(string id, AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppClips[]? fieldsAppClips = default, AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, AppStoreVersions_appClipDefaultExperience_getToOneRelatedFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, AppStoreVersions_appClipDefaultExperience_getToOneRelatedInclude[]? include = default, int? limitAppClipDefaultExperienceLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/appClipDefaultExperience";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (fieldsAppClips != null)
            uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppClipDefaultExperienceLocalizations != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
        if (fieldsAppClipAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppClipDefaultExperienceLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipDefaultExperienceResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreReviewDetail_getToOneRelatedFieldsAppStoreReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        appStoreVersion,
        appStoreReviewAttachments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreReviewDetail_getToOneRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreReviewDetail_getToOneRelatedFieldsAppStoreReviewAttachments
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreReviewDetail_getToOneRelatedInclude
    {
        appStoreVersion,
        appStoreReviewAttachments,
    }

    // /v1/appStoreVersions/{id}/appStoreReviewDetail
    public Task<AppStoreReviewDetailResponse> AppStoreVersions_appStoreReviewDetail_getToOneRelated(string id, AppStoreVersions_appStoreReviewDetail_getToOneRelatedFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, AppStoreVersions_appStoreReviewDetail_getToOneRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppStoreVersions_appStoreReviewDetail_getToOneRelatedFieldsAppStoreReviewAttachments[]? fieldsAppStoreReviewAttachments = default, AppStoreVersions_appStoreReviewDetail_getToOneRelatedInclude[]? include = default, int? limitAppStoreReviewAttachments = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/appStoreReviewDetail";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppStoreReviewAttachments != null)
            uriBuilder.AddParameter("fields[appStoreReviewAttachments]", string.Join(",", fieldsAppStoreReviewAttachments));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreReviewAttachments.HasValue)
            uriBuilder.AddParameter("limit[appStoreReviewAttachments]", limitAppStoreReviewAttachments.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreReviewDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperiments_getToManyRelatedFilterState
    {
        PREPARE_FOR_SUBMISSION,
        READY_FOR_REVIEW,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        ACCEPTED,
        APPROVED,
        REJECTED,
        COMPLETED,
        STOPPED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperiments_getToManyRelatedFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperiments_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperiments_getToManyRelatedFieldsAppStoreVersionExperimentTreatments
    {
        name,
        appIcon,
        appIconName,
        promotedDate,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperiments_getToManyRelatedInclude
    {
        appStoreVersion,
        appStoreVersionExperimentTreatments,
    }

    // /v1/appStoreVersions/{id}/appStoreVersionExperiments
    [Obsolete]
    public Task<AppStoreVersionExperimentsResponse> AppStoreVersions_appStoreVersionExperiments_getToManyRelated(string id, AppStoreVersions_appStoreVersionExperiments_getToManyRelatedFilterState[]? filterState = default, AppStoreVersions_appStoreVersionExperiments_getToManyRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, AppStoreVersions_appStoreVersionExperiments_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppStoreVersions_appStoreVersionExperiments_getToManyRelatedFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, int? limit = default, AppStoreVersions_appStoreVersionExperiments_getToManyRelatedInclude[]? include = default, int? limitAppStoreVersionExperimentTreatments = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/appStoreVersionExperiments";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterState != null)
            uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppStoreVersionExperimentTreatments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionExperimentTreatments.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFilterState
    {
        PREPARE_FOR_SUBMISSION,
        READY_FOR_REVIEW,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        ACCEPTED,
        APPROVED,
        REJECTED,
        COMPLETED,
        STOPPED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersionExperiments
    {
        name,
        platform,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        app,
        latestControlVersion,
        controlVersions,
        appStoreVersionExperimentTreatments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersionExperimentTreatments
    {
        name,
        appIcon,
        appIconName,
        promotedDate,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedInclude
    {
        app,
        latestControlVersion,
        controlVersions,
        appStoreVersionExperimentTreatments,
    }

    // /v1/appStoreVersions/{id}/appStoreVersionExperimentsV2
    public Task<AppStoreVersionExperimentsV2Response> AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelated(string id, AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFilterState[]? filterState = default, AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFieldsApps[]? fieldsApps = default, AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, int? limit = default, AppStoreVersions_appStoreVersionExperimentsV2_getToManyRelatedInclude[]? include = default, int? limitControlVersions = default, int? limitAppStoreVersionExperimentTreatments = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterState != null)
            uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppStoreVersionExperimentTreatments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitControlVersions.HasValue)
            uriBuilder.AddParameter("limit[controlVersions]", limitControlVersions.Value.ToString());
        if (limitAppStoreVersionExperimentTreatments.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentsV2Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedFieldsAppScreenshotSets
    {
        screenshotDisplayType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appScreenshots,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedFieldsAppPreviewSets
    {
        previewType,
        appStoreVersionLocalization,
        appCustomProductPageLocalization,
        appStoreVersionExperimentTreatmentLocalization,
        appPreviews,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedInclude
    {
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    // /v1/appStoreVersions/{id}/appStoreVersionLocalizations
    public Task<AppStoreVersionLocalizationsResponse> AppStoreVersions_appStoreVersionLocalizations_getToManyRelated(string id, string[]? filterLocale = default, AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limit = default, AppStoreVersions_appStoreVersionLocalizations_getToManyRelatedInclude[]? include = default, int? limitAppScreenshotSets = default, int? limitAppPreviewSets = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/appStoreVersionLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLocale != null)
            uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppScreenshotSets != null)
            uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
        if (fieldsAppPreviewSets != null)
            uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppScreenshotSets.HasValue)
            uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());
        if (limitAppPreviewSets.HasValue)
            uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionLocalizationsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionPhasedRelease_getToOneRelatedFieldsAppStoreVersionPhasedReleases
    {
        phasedReleaseState,
        startDate,
        totalPauseDuration,
        currentDayNumber,
    }

    // /v1/appStoreVersions/{id}/appStoreVersionPhasedRelease
    public Task<AppStoreVersionPhasedReleaseWithoutIncludesResponse> AppStoreVersions_appStoreVersionPhasedRelease_getToOneRelated(string id, AppStoreVersions_appStoreVersionPhasedRelease_getToOneRelatedFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersionPhasedReleases != null)
            uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionPhasedReleaseWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_appStoreVersionSubmission_getToOneRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    // /v1/appStoreVersions/{id}/appStoreVersionSubmission
    [Obsolete]
    public Task<AppStoreVersionSubmissionResponse> AppStoreVersions_appStoreVersionSubmission_getToOneRelated(string id, string[]? fieldsAppStoreVersionSubmissions = default, AppStoreVersions_appStoreVersionSubmission_getToOneRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/appStoreVersionSubmission";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersionSubmissions != null)
            uriBuilder.AddParameter("fields[appStoreVersionSubmissions]", string.Join(",", fieldsAppStoreVersionSubmissions));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionSubmissionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_build_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/appStoreVersions/{id}/build
    public Task<BuildWithoutIncludesResponse> AppStoreVersions_build_getToOneRelated(string id, AppStoreVersions_build_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/build";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_customerReviews_getToManyRelatedFilterTerritory
    {
        ABW,
        AFG,
        AGO,
        AIA,
        ALB,
        AND,
        ANT,
        ARE,
        ARG,
        ARM,
        ASM,
        ATG,
        AUS,
        AUT,
        AZE,
        BDI,
        BEL,
        BEN,
        BES,
        BFA,
        BGD,
        BGR,
        BHR,
        BHS,
        BIH,
        BLR,
        BLZ,
        BMU,
        BOL,
        BRA,
        BRB,
        BRN,
        BTN,
        BWA,
        CAF,
        CAN,
        CHE,
        CHL,
        CHN,
        CIV,
        CMR,
        COD,
        COG,
        COK,
        COL,
        COM,
        CPV,
        CRI,
        CUB,
        CUW,
        CXR,
        CYM,
        CYP,
        CZE,
        DEU,
        DJI,
        DMA,
        DNK,
        DOM,
        DZA,
        ECU,
        EGY,
        ERI,
        ESP,
        EST,
        ETH,
        FIN,
        FJI,
        FLK,
        FRA,
        FRO,
        FSM,
        GAB,
        GBR,
        GEO,
        GGY,
        GHA,
        GIB,
        GIN,
        GLP,
        GMB,
        GNB,
        GNQ,
        GRC,
        GRD,
        GRL,
        GTM,
        GUF,
        GUM,
        GUY,
        HKG,
        HND,
        HRV,
        HTI,
        HUN,
        IDN,
        IMN,
        IND,
        IRL,
        IRQ,
        ISL,
        ISR,
        ITA,
        JAM,
        JEY,
        JOR,
        JPN,
        KAZ,
        KEN,
        KGZ,
        KHM,
        KIR,
        KNA,
        KOR,
        KWT,
        LAO,
        LBN,
        LBR,
        LBY,
        LCA,
        LIE,
        LKA,
        LSO,
        LTU,
        LUX,
        LVA,
        MAC,
        MAR,
        MCO,
        MDA,
        MDG,
        MDV,
        MEX,
        MHL,
        MKD,
        MLI,
        MLT,
        MMR,
        MNE,
        MNG,
        MNP,
        MOZ,
        MRT,
        MSR,
        MTQ,
        MUS,
        MWI,
        MYS,
        MYT,
        NAM,
        NCL,
        NER,
        NFK,
        NGA,
        NIC,
        NIU,
        NLD,
        NOR,
        NPL,
        NRU,
        NZL,
        OMN,
        PAK,
        PAN,
        PER,
        PHL,
        PLW,
        PNG,
        POL,
        PRI,
        PRT,
        PRY,
        PSE,
        PYF,
        QAT,
        REU,
        ROU,
        RUS,
        RWA,
        SAU,
        SEN,
        SGP,
        SHN,
        SLB,
        SLE,
        SLV,
        SMR,
        SOM,
        SPM,
        SRB,
        SSD,
        STP,
        SUR,
        SVK,
        SVN,
        SWE,
        SWZ,
        SXM,
        SYC,
        TCA,
        TCD,
        TGO,
        THA,
        TJK,
        TKM,
        TLS,
        TON,
        TTO,
        TUN,
        TUR,
        TUV,
        TWN,
        TZA,
        UGA,
        UKR,
        UMI,
        URY,
        USA,
        UZB,
        VAT,
        VCT,
        VEN,
        VGB,
        VIR,
        VNM,
        VUT,
        WLF,
        WSM,
        YEM,
        ZAF,
        ZMB,
        ZWE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_customerReviews_getToManyRelatedSort
    {
        rating,
        [EnumMember(Value = "-rating")]
        ratingDescending,
        createdDate,
        [EnumMember(Value = "-createdDate")]
        createdDateDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_customerReviews_getToManyRelatedFieldsCustomerReviews
    {
        rating,
        title,
        body,
        reviewerNickname,
        createdDate,
        territory,
        response,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_customerReviews_getToManyRelatedFieldsCustomerReviewResponses
    {
        responseBody,
        lastModifiedDate,
        state,
        review,
    }

    // /v1/appStoreVersions/{id}/customerReviews
    public Task<CustomerReviewsResponse> AppStoreVersions_customerReviews_getToManyRelated(string id, AppStoreVersions_customerReviews_getToManyRelatedFilterTerritory[]? filterTerritory = default, string[]? filterRating = default, bool? existsPublishedResponse = default, AppStoreVersions_customerReviews_getToManyRelatedSort[]? sort = default, AppStoreVersions_customerReviews_getToManyRelatedFieldsCustomerReviews[]? fieldsCustomerReviews = default, AppStoreVersions_customerReviews_getToManyRelatedFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/customerReviews";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (filterRating != null)
            uriBuilder.AddParameter("filter[rating]", string.Join(",", filterRating));
        if (existsPublishedResponse.HasValue)
            uriBuilder.AddParameter("exists[publishedResponse]", existsPublishedResponse.Value.ToString());
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsCustomerReviews != null)
            uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
        if (fieldsCustomerReviewResponses != null)
            uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CustomerReviewsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_gameCenterAppVersion_getToOneRelatedFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_gameCenterAppVersion_getToOneRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_gameCenterAppVersion_getToOneRelatedInclude
    {
        compatibilityVersions,
        appStoreVersion,
    }

    // /v1/appStoreVersions/{id}/gameCenterAppVersion
    public Task<GameCenterAppVersionResponse> AppStoreVersions_gameCenterAppVersion_getToOneRelated(string id, AppStoreVersions_gameCenterAppVersion_getToOneRelatedFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, AppStoreVersions_gameCenterAppVersion_getToOneRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, AppStoreVersions_gameCenterAppVersion_getToOneRelatedInclude[]? include = default, int? limitCompatibilityVersions = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/gameCenterAppVersion";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitCompatibilityVersions.HasValue)
            uriBuilder.AddParameter("limit[compatibilityVersions]", limitCompatibilityVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAppVersionResponse>(message, log);
    }

    // /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
    public Task<AppStoreVersionAppClipDefaultExperienceLinkageResponse> AppStoreVersions_appClipDefaultExperience_getToOneRelationship(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionAppClipDefaultExperienceLinkageResponse>(message, log);
    }

    public class AppStoreVersions_appClipDefaultExperience_updateToOneRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appClipDefaultExperiences";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    // /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
    public Task AppStoreVersions_appClipDefaultExperience_updateToOneRelationship(string id, AppStoreVersionAppClipDefaultExperienceLinkageRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/appStoreVersions/{id}/relationships/build
    public Task<AppStoreVersionBuildLinkageResponse> AppStoreVersions_build_getToOneRelationship(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/relationships/build";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionBuildLinkageResponse>(message, log);
    }

    public class AppStoreVersions_build_updateToOneRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    // /v1/appStoreVersions/{id}/relationships/build
    public Task AppStoreVersions_build_updateToOneRelationship(string id, AppStoreVersionBuildLinkageRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/relationships/build";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersions_routingAppCoverage_getToOneRelatedFieldsRoutingAppCoverages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreVersion,
    }

    // /v1/appStoreVersions/{id}/routingAppCoverage
    public Task<RoutingAppCoverageWithoutIncludesResponse> AppStoreVersions_routingAppCoverage_getToOneRelated(string id, AppStoreVersions_routingAppCoverage_getToOneRelatedFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersions/{id}/routingAppCoverage";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsRoutingAppCoverages != null)
            uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<RoutingAppCoverageWithoutIncludesResponse>(message, log);
    }

    // /v1/appStoreVersionSubmissions
    [Obsolete]
    public Task<AppStoreVersionSubmissionResponse> AppStoreVersionSubmissions_createInstance(AppStoreVersionSubmissionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionSubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionSubmissionResponse>(message, log);
    }

    // /v1/appStoreVersionSubmissions/{id}
    [Obsolete]
    public Task AppStoreVersionSubmissions_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/appStoreVersionSubmissions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/betaAppClipInvocationLocalizations
    public Task<BetaAppClipInvocationLocalizationResponse> BetaAppClipInvocationLocalizations_createInstance(BetaAppClipInvocationLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaAppClipInvocationLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaAppClipInvocationLocalizationResponse>(message, log);
    }

    // /v1/betaAppClipInvocationLocalizations/{id}
    public Task<BetaAppClipInvocationLocalizationResponse> BetaAppClipInvocationLocalizations_updateInstance(string id, BetaAppClipInvocationLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaAppClipInvocationLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaAppClipInvocationLocalizationResponse>(message, log);
    }

    // /v1/betaAppClipInvocationLocalizations/{id}
    public Task BetaAppClipInvocationLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/betaAppClipInvocationLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/betaAppClipInvocations
    public Task<BetaAppClipInvocationResponse> BetaAppClipInvocations_createInstance(BetaAppClipInvocationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaAppClipInvocations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaAppClipInvocationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppClipInvocations_getInstanceFieldsBetaAppClipInvocations
    {
        url,
        betaAppClipInvocationLocalizations,
    }

    // /v1/betaAppClipInvocations/{id}
    public Task<BetaAppClipInvocationResponse> BetaAppClipInvocations_getInstance(string id, BetaAppClipInvocations_getInstanceFieldsBetaAppClipInvocations[]? fieldsBetaAppClipInvocations = default, string[]? include = default, int? limitBetaAppClipInvocationLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppClipInvocations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaAppClipInvocations != null)
            uriBuilder.AddParameter("fields[betaAppClipInvocations]", string.Join(",", fieldsBetaAppClipInvocations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBetaAppClipInvocationLocalizations.HasValue)
            uriBuilder.AddParameter("limit[betaAppClipInvocationLocalizations]", limitBetaAppClipInvocationLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppClipInvocationResponse>(message, log);
    }

    // /v1/betaAppClipInvocations/{id}
    public Task<BetaAppClipInvocationResponse> BetaAppClipInvocations_updateInstance(string id, BetaAppClipInvocationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaAppClipInvocations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaAppClipInvocationResponse>(message, log);
    }

    // /v1/betaAppClipInvocations/{id}
    public Task BetaAppClipInvocations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/betaAppClipInvocations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppLocalizations_getCollectionFieldsBetaAppLocalizations
    {
        feedbackEmail,
        marketingUrl,
        privacyPolicyUrl,
        tvOsPrivacyPolicy,
        description,
        locale,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppLocalizations_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaAppLocalizations
    public Task<BetaAppLocalizationsResponse> BetaAppLocalizations_getCollection(string[]? filterLocale = default, string[]? filterApp = default, BetaAppLocalizations_getCollectionFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, BetaAppLocalizations_getCollectionFieldsApps[]? fieldsApps = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLocale != null)
            uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (fieldsBetaAppLocalizations != null)
            uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppLocalizationsResponse>(message, log);
    }

    // /v1/betaAppLocalizations
    public Task<BetaAppLocalizationResponse> BetaAppLocalizations_createInstance(BetaAppLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaAppLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaAppLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppLocalizations_getInstanceFieldsBetaAppLocalizations
    {
        feedbackEmail,
        marketingUrl,
        privacyPolicyUrl,
        tvOsPrivacyPolicy,
        description,
        locale,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppLocalizations_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaAppLocalizations/{id}
    public Task<BetaAppLocalizationResponse> BetaAppLocalizations_getInstance(string id, BetaAppLocalizations_getInstanceFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, BetaAppLocalizations_getInstanceFieldsApps[]? fieldsApps = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaAppLocalizations != null)
            uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppLocalizationResponse>(message, log);
    }

    // /v1/betaAppLocalizations/{id}
    public Task<BetaAppLocalizationResponse> BetaAppLocalizations_updateInstance(string id, BetaAppLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaAppLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaAppLocalizationResponse>(message, log);
    }

    // /v1/betaAppLocalizations/{id}
    public Task BetaAppLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/betaAppLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppLocalizations_app_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaAppLocalizations/{id}/app
    public Task<AppWithoutIncludesResponse> BetaAppLocalizations_app_getToOneRelated(string id, BetaAppLocalizations_app_getToOneRelatedFieldsApps[]? fieldsApps = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppLocalizations/{id}/app";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewDetails_getCollectionFieldsBetaAppReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewDetails_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaAppReviewDetails
    public Task<BetaAppReviewDetailsResponse> BetaAppReviewDetails_getCollection(string[] filterApp, BetaAppReviewDetails_getCollectionFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, BetaAppReviewDetails_getCollectionFieldsApps[]? fieldsApps = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppReviewDetails";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (fieldsBetaAppReviewDetails != null)
            uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppReviewDetailsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewDetails_getInstanceFieldsBetaAppReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewDetails_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaAppReviewDetails/{id}
    public Task<BetaAppReviewDetailResponse> BetaAppReviewDetails_getInstance(string id, BetaAppReviewDetails_getInstanceFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, BetaAppReviewDetails_getInstanceFieldsApps[]? fieldsApps = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppReviewDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaAppReviewDetails != null)
            uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppReviewDetailResponse>(message, log);
    }

    // /v1/betaAppReviewDetails/{id}
    public Task<BetaAppReviewDetailResponse> BetaAppReviewDetails_updateInstance(string id, BetaAppReviewDetailUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaAppReviewDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaAppReviewDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewDetails_app_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaAppReviewDetails/{id}/app
    public Task<AppWithoutIncludesResponse> BetaAppReviewDetails_app_getToOneRelated(string id, BetaAppReviewDetails_app_getToOneRelatedFieldsApps[]? fieldsApps = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppReviewDetails/{id}/app";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewSubmissions_getCollectionFilterBetaReviewState
    {
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        REJECTED,
        APPROVED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewSubmissions_getCollectionFieldsBetaAppReviewSubmissions
    {
        betaReviewState,
        submittedDate,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewSubmissions_getCollectionFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/betaAppReviewSubmissions
    public Task<BetaAppReviewSubmissionsResponse> BetaAppReviewSubmissions_getCollection(string[] filterBuild, BetaAppReviewSubmissions_getCollectionFilterBetaReviewState[]? filterBetaReviewState = default, BetaAppReviewSubmissions_getCollectionFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, BetaAppReviewSubmissions_getCollectionFieldsBuilds[]? fieldsBuilds = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppReviewSubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterBuild != null)
            uriBuilder.AddParameter("filter[build]", string.Join(",", filterBuild));
        if (filterBetaReviewState != null)
            uriBuilder.AddParameter("filter[betaReviewState]", string.Join(",", filterBetaReviewState));
        if (fieldsBetaAppReviewSubmissions != null)
            uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppReviewSubmissionsResponse>(message, log);
    }

    // /v1/betaAppReviewSubmissions
    public Task<BetaAppReviewSubmissionResponse> BetaAppReviewSubmissions_createInstance(BetaAppReviewSubmissionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaAppReviewSubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaAppReviewSubmissionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewSubmissions_getInstanceFieldsBetaAppReviewSubmissions
    {
        betaReviewState,
        submittedDate,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewSubmissions_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/betaAppReviewSubmissions/{id}
    public Task<BetaAppReviewSubmissionResponse> BetaAppReviewSubmissions_getInstance(string id, BetaAppReviewSubmissions_getInstanceFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, BetaAppReviewSubmissions_getInstanceFieldsBuilds[]? fieldsBuilds = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppReviewSubmissions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaAppReviewSubmissions != null)
            uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppReviewSubmissionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaAppReviewSubmissions_build_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/betaAppReviewSubmissions/{id}/build
    public Task<BuildWithoutIncludesResponse> BetaAppReviewSubmissions_build_getToOneRelated(string id, BetaAppReviewSubmissions_build_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/betaAppReviewSubmissions/{id}/build";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaBuildLocalizations_getCollectionFieldsBetaBuildLocalizations
    {
        whatsNew,
        locale,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaBuildLocalizations_getCollectionFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/betaBuildLocalizations
    public Task<BetaBuildLocalizationsResponse> BetaBuildLocalizations_getCollection(string[]? filterLocale = default, string[]? filterBuild = default, BetaBuildLocalizations_getCollectionFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, BetaBuildLocalizations_getCollectionFieldsBuilds[]? fieldsBuilds = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaBuildLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLocale != null)
            uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
        if (filterBuild != null)
            uriBuilder.AddParameter("filter[build]", string.Join(",", filterBuild));
        if (fieldsBetaBuildLocalizations != null)
            uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaBuildLocalizationsResponse>(message, log);
    }

    // /v1/betaBuildLocalizations
    public Task<BetaBuildLocalizationResponse> BetaBuildLocalizations_createInstance(BetaBuildLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaBuildLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaBuildLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaBuildLocalizations_getInstanceFieldsBetaBuildLocalizations
    {
        whatsNew,
        locale,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaBuildLocalizations_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/betaBuildLocalizations/{id}
    public Task<BetaBuildLocalizationResponse> BetaBuildLocalizations_getInstance(string id, BetaBuildLocalizations_getInstanceFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, BetaBuildLocalizations_getInstanceFieldsBuilds[]? fieldsBuilds = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaBuildLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaBuildLocalizations != null)
            uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaBuildLocalizationResponse>(message, log);
    }

    // /v1/betaBuildLocalizations/{id}
    public Task<BetaBuildLocalizationResponse> BetaBuildLocalizations_updateInstance(string id, BetaBuildLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaBuildLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaBuildLocalizationResponse>(message, log);
    }

    // /v1/betaBuildLocalizations/{id}
    public Task BetaBuildLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/betaBuildLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaBuildLocalizations_build_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/betaBuildLocalizations/{id}/build
    public Task<BuildWithoutIncludesResponse> BetaBuildLocalizations_build_getToOneRelated(string id, BetaBuildLocalizations_build_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/betaBuildLocalizations/{id}/build";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getCollectionSort
    {
        name,
        [EnumMember(Value = "-name")]
        nameDescending,
        createdDate,
        [EnumMember(Value = "-createdDate")]
        createdDateDescending,
        publicLinkEnabled,
        [EnumMember(Value = "-publicLinkEnabled")]
        publicLinkEnabledDescending,
        publicLinkLimit,
        [EnumMember(Value = "-publicLinkLimit")]
        publicLinkLimitDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getCollectionFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getCollectionFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getCollectionFieldsBetaTesters
    {
        firstName,
        lastName,
        email,
        inviteType,
        state,
        apps,
        betaGroups,
        builds,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getCollectionInclude
    {
        app,
        builds,
        betaTesters,
    }

    // /v1/betaGroups
    public Task<BetaGroupsResponse> BetaGroups_getCollection(string[]? filterName = default, string[]? filterIsInternalGroup = default, string[]? filterPublicLinkEnabled = default, string[]? filterPublicLinkLimitEnabled = default, string[]? filterPublicLink = default, string[]? filterApp = default, string[]? filterBuilds = default, string[]? filterId = default, BetaGroups_getCollectionSort[]? sort = default, BetaGroups_getCollectionFieldsBetaGroups[]? fieldsBetaGroups = default, BetaGroups_getCollectionFieldsApps[]? fieldsApps = default, BetaGroups_getCollectionFieldsBuilds[]? fieldsBuilds = default, BetaGroups_getCollectionFieldsBetaTesters[]? fieldsBetaTesters = default, int? limit = default, BetaGroups_getCollectionInclude[]? include = default, int? limitBetaTesters = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/betaGroups";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterName != null)
            uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
        if (filterIsInternalGroup != null)
            uriBuilder.AddParameter("filter[isInternalGroup]", string.Join(",", filterIsInternalGroup));
        if (filterPublicLinkEnabled != null)
            uriBuilder.AddParameter("filter[publicLinkEnabled]", string.Join(",", filterPublicLinkEnabled));
        if (filterPublicLinkLimitEnabled != null)
            uriBuilder.AddParameter("filter[publicLinkLimitEnabled]", string.Join(",", filterPublicLinkLimitEnabled));
        if (filterPublicLink != null)
            uriBuilder.AddParameter("filter[publicLink]", string.Join(",", filterPublicLink));
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (filterBuilds != null)
            uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsBetaTesters != null)
            uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBetaTesters.HasValue)
            uriBuilder.AddParameter("limit[betaTesters]", limitBetaTesters.Value.ToString());
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaGroupsResponse>(message, log);
    }

    // /v1/betaGroups
    public Task<BetaGroupResponse> BetaGroups_createInstance(BetaGroupCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaGroups";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaGroupResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getInstanceFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getInstanceFieldsBetaTesters
    {
        firstName,
        lastName,
        email,
        inviteType,
        state,
        apps,
        betaGroups,
        builds,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_getInstanceInclude
    {
        app,
        builds,
        betaTesters,
    }

    // /v1/betaGroups/{id}
    public Task<BetaGroupResponse> BetaGroups_getInstance(string id, BetaGroups_getInstanceFieldsBetaGroups[]? fieldsBetaGroups = default, BetaGroups_getInstanceFieldsApps[]? fieldsApps = default, BetaGroups_getInstanceFieldsBuilds[]? fieldsBuilds = default, BetaGroups_getInstanceFieldsBetaTesters[]? fieldsBetaTesters = default, BetaGroups_getInstanceInclude[]? include = default, int? limitBetaTesters = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsBetaTesters != null)
            uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBetaTesters.HasValue)
            uriBuilder.AddParameter("limit[betaTesters]", limitBetaTesters.Value.ToString());
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaGroupResponse>(message, log);
    }

    // /v1/betaGroups/{id}
    public Task<BetaGroupResponse> BetaGroups_updateInstance(string id, BetaGroupUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaGroupResponse>(message, log);
    }

    // /v1/betaGroups/{id}
    public Task BetaGroups_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_app_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaGroups/{id}/app
    public Task<AppWithoutIncludesResponse> BetaGroups_app_getToOneRelated(string id, BetaGroups_app_getToOneRelatedFieldsApps[]? fieldsApps = default, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/app";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_betaTesters_getToManyRelatedFieldsBetaTesters
    {
        firstName,
        lastName,
        email,
        inviteType,
        state,
        apps,
        betaGroups,
        builds,
    }

    // /v1/betaGroups/{id}/betaTesters
    public Task<BetaTestersWithoutIncludesResponse> BetaGroups_betaTesters_getToManyRelated(string id, BetaGroups_betaTesters_getToManyRelatedFieldsBetaTesters[]? fieldsBetaTesters = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/betaTesters";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaTesters != null)
            uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaTestersWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_builds_getToManyRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/betaGroups/{id}/builds
    public Task<BuildsWithoutIncludesResponse> BetaGroups_builds_getToManyRelated(string id, BetaGroups_builds_getToManyRelatedFieldsBuilds[]? fieldsBuilds = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaGroups_betaTesterUsages_getMetricsPeriod
    {
        P7D,
        P30D,
        P90D,
        P365D,
    }

    // /v1/betaGroups/{id}/metrics/betaTesterUsages
    public Task<AppsBetaTesterUsagesV1MetricResponse> BetaGroups_betaTesterUsages_getMetrics(string id, BetaGroups_betaTesterUsages_getMetricsPeriod? period = default, string[]? groupBy = default, string? filterBetaTesters = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/metrics/betaTesterUsages";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (period.HasValue)
            uriBuilder.AddParameter("period", period.Value.ToString());
        if (groupBy != null)
            uriBuilder.AddParameter("groupBy", string.Join(",", groupBy));
        if (filterBetaTesters != null)
            uriBuilder.AddParameter("filter[betaTesters]", filterBetaTesters);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppsBetaTesterUsagesV1MetricResponse>(message, log);
    }

    // /v1/betaGroups/{id}/relationships/betaTesters
    public Task<BetaGroupBetaTestersLinkagesResponse> BetaGroups_betaTesters_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/relationships/betaTesters";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaGroupBetaTestersLinkagesResponse>(message, log);
    }

    public class BetaGroups_betaTesters_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/betaGroups/{id}/relationships/betaTesters
    public Task BetaGroups_betaTesters_createToManyRelationship(string id, BetaGroupBetaTestersLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/relationships/betaTesters";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class BetaGroups_betaTesters_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/betaGroups/{id}/relationships/betaTesters
    public Task BetaGroups_betaTesters_deleteToManyRelationship(string id, BetaGroupBetaTestersLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/relationships/betaTesters";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/betaGroups/{id}/relationships/builds
    public Task<BetaGroupBuildsLinkagesResponse> BetaGroups_builds_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/relationships/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaGroupBuildsLinkagesResponse>(message, log);
    }

    public class BetaGroups_builds_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/betaGroups/{id}/relationships/builds
    public Task BetaGroups_builds_createToManyRelationship(string id, BetaGroupBuildsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/relationships/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class BetaGroups_builds_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/betaGroups/{id}/relationships/builds
    public Task BetaGroups_builds_deleteToManyRelationship(string id, BetaGroupBuildsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaGroups/{id}/relationships/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaLicenseAgreements_getCollectionFieldsBetaLicenseAgreements
    {
        agreementText,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaLicenseAgreements_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaLicenseAgreements
    public Task<BetaLicenseAgreementsResponse> BetaLicenseAgreements_getCollection(string[]? filterApp = default, BetaLicenseAgreements_getCollectionFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, BetaLicenseAgreements_getCollectionFieldsApps[]? fieldsApps = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaLicenseAgreements";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (fieldsBetaLicenseAgreements != null)
            uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaLicenseAgreementsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaLicenseAgreements_getInstanceFieldsBetaLicenseAgreements
    {
        agreementText,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaLicenseAgreements_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaLicenseAgreements/{id}
    public Task<BetaLicenseAgreementResponse> BetaLicenseAgreements_getInstance(string id, BetaLicenseAgreements_getInstanceFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, BetaLicenseAgreements_getInstanceFieldsApps[]? fieldsApps = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/betaLicenseAgreements/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaLicenseAgreements != null)
            uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaLicenseAgreementResponse>(message, log);
    }

    // /v1/betaLicenseAgreements/{id}
    public Task<BetaLicenseAgreementResponse> BetaLicenseAgreements_updateInstance(string id, BetaLicenseAgreementUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaLicenseAgreements/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaLicenseAgreementResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaLicenseAgreements_app_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaLicenseAgreements/{id}/app
    public Task<AppWithoutIncludesResponse> BetaLicenseAgreements_app_getToOneRelated(string id, BetaLicenseAgreements_app_getToOneRelatedFieldsApps[]? fieldsApps = default, INestedLog? log = null)
    {
        string path = "/v1/betaLicenseAgreements/{id}/app";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppWithoutIncludesResponse>(message, log);
    }

    // /v1/betaTesterInvitations
    public Task<BetaTesterInvitationResponse> BetaTesterInvitations_createInstance(BetaTesterInvitationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaTesterInvitations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaTesterInvitationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getCollectionFilterInviteType
    {
        EMAIL,
        PUBLIC_LINK,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getCollectionSort
    {
        firstName,
        [EnumMember(Value = "-firstName")]
        firstNameDescending,
        lastName,
        [EnumMember(Value = "-lastName")]
        lastNameDescending,
        email,
        [EnumMember(Value = "-email")]
        emailDescending,
        inviteType,
        [EnumMember(Value = "-inviteType")]
        inviteTypeDescending,
        state,
        [EnumMember(Value = "-state")]
        stateDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getCollectionFieldsBetaTesters
    {
        firstName,
        lastName,
        email,
        inviteType,
        state,
        apps,
        betaGroups,
        builds,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getCollectionFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getCollectionFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getCollectionInclude
    {
        apps,
        betaGroups,
        builds,
    }

    // /v1/betaTesters
    public Task<BetaTestersResponse> BetaTesters_getCollection(string[]? filterFirstName = default, string[]? filterLastName = default, string[]? filterEmail = default, BetaTesters_getCollectionFilterInviteType[]? filterInviteType = default, string[]? filterApps = default, string[]? filterBetaGroups = default, string[]? filterBuilds = default, string[]? filterId = default, BetaTesters_getCollectionSort[]? sort = default, BetaTesters_getCollectionFieldsBetaTesters[]? fieldsBetaTesters = default, BetaTesters_getCollectionFieldsApps[]? fieldsApps = default, BetaTesters_getCollectionFieldsBetaGroups[]? fieldsBetaGroups = default, BetaTesters_getCollectionFieldsBuilds[]? fieldsBuilds = default, int? limit = default, BetaTesters_getCollectionInclude[]? include = default, int? limitApps = default, int? limitBetaGroups = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/betaTesters";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterFirstName != null)
            uriBuilder.AddParameter("filter[firstName]", string.Join(",", filterFirstName));
        if (filterLastName != null)
            uriBuilder.AddParameter("filter[lastName]", string.Join(",", filterLastName));
        if (filterEmail != null)
            uriBuilder.AddParameter("filter[email]", string.Join(",", filterEmail));
        if (filterInviteType != null)
            uriBuilder.AddParameter("filter[inviteType]", string.Join(",", filterInviteType));
        if (filterApps != null)
            uriBuilder.AddParameter("filter[apps]", string.Join(",", filterApps));
        if (filterBetaGroups != null)
            uriBuilder.AddParameter("filter[betaGroups]", string.Join(",", filterBetaGroups));
        if (filterBuilds != null)
            uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsBetaTesters != null)
            uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitApps.HasValue)
            uriBuilder.AddParameter("limit[apps]", limitApps.Value.ToString());
        if (limitBetaGroups.HasValue)
            uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaTestersResponse>(message, log);
    }

    // /v1/betaTesters
    public Task<BetaTesterResponse> BetaTesters_createInstance(BetaTesterCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaTesters";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BetaTesterResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getInstanceFieldsBetaTesters
    {
        firstName,
        lastName,
        email,
        inviteType,
        state,
        apps,
        betaGroups,
        builds,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getInstanceFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_getInstanceInclude
    {
        apps,
        betaGroups,
        builds,
    }

    // /v1/betaTesters/{id}
    public Task<BetaTesterResponse> BetaTesters_getInstance(string id, BetaTesters_getInstanceFieldsBetaTesters[]? fieldsBetaTesters = default, BetaTesters_getInstanceFieldsApps[]? fieldsApps = default, BetaTesters_getInstanceFieldsBetaGroups[]? fieldsBetaGroups = default, BetaTesters_getInstanceFieldsBuilds[]? fieldsBuilds = default, BetaTesters_getInstanceInclude[]? include = default, int? limitApps = default, int? limitBetaGroups = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaTesters != null)
            uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitApps.HasValue)
            uriBuilder.AddParameter("limit[apps]", limitApps.Value.ToString());
        if (limitBetaGroups.HasValue)
            uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaTesterResponse>(message, log);
    }

    // /v1/betaTesters/{id}
    public Task BetaTesters_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_apps_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/betaTesters/{id}/apps
    public Task<AppsWithoutIncludesResponse> BetaTesters_apps_getToManyRelated(string id, BetaTesters_apps_getToManyRelatedFieldsApps[]? fieldsApps = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/apps";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_betaGroups_getToManyRelatedFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    // /v1/betaTesters/{id}/betaGroups
    public Task<BetaGroupsWithoutIncludesResponse> BetaTesters_betaGroups_getToManyRelated(string id, BetaTesters_betaGroups_getToManyRelatedFieldsBetaGroups[]? fieldsBetaGroups = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/betaGroups";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaGroupsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_builds_getToManyRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/betaTesters/{id}/builds
    public Task<BuildsWithoutIncludesResponse> BetaTesters_builds_getToManyRelated(string id, BetaTesters_builds_getToManyRelatedFieldsBuilds[]? fieldsBuilds = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BetaTesters_betaTesterUsages_getMetricsPeriod
    {
        P7D,
        P30D,
        P90D,
        P365D,
    }

    // /v1/betaTesters/{id}/metrics/betaTesterUsages
    public Task<BetaTesterUsagesV1MetricResponse> BetaTesters_betaTesterUsages_getMetrics(string id, string filterApps, BetaTesters_betaTesterUsages_getMetricsPeriod? period = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/metrics/betaTesterUsages";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterApps != null)
            uriBuilder.AddParameter("filter[apps]", filterApps);
        if (period.HasValue)
            uriBuilder.AddParameter("period", period.Value.ToString());
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaTesterUsagesV1MetricResponse>(message, log);
    }

    // /v1/betaTesters/{id}/relationships/apps
    public Task<BetaTesterAppsLinkagesResponse> BetaTesters_apps_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/relationships/apps";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaTesterAppsLinkagesResponse>(message, log);
    }

    public class BetaTesters_apps_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "apps";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/betaTesters/{id}/relationships/apps
    public Task BetaTesters_apps_deleteToManyRelationship(string id, BetaTesterAppsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/relationships/apps";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/betaTesters/{id}/relationships/betaGroups
    public Task<BetaTesterBetaGroupsLinkagesResponse> BetaTesters_betaGroups_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/relationships/betaGroups";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaTesterBetaGroupsLinkagesResponse>(message, log);
    }

    public class BetaTesters_betaGroups_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaGroups";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/betaTesters/{id}/relationships/betaGroups
    public Task BetaTesters_betaGroups_createToManyRelationship(string id, BetaTesterBetaGroupsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/relationships/betaGroups";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class BetaTesters_betaGroups_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaGroups";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/betaTesters/{id}/relationships/betaGroups
    public Task BetaTesters_betaGroups_deleteToManyRelationship(string id, BetaTesterBetaGroupsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/relationships/betaGroups";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/betaTesters/{id}/relationships/builds
    public Task<BetaTesterBuildsLinkagesResponse> BetaTesters_builds_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/relationships/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaTesterBuildsLinkagesResponse>(message, log);
    }

    public class BetaTesters_builds_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/betaTesters/{id}/relationships/builds
    public Task BetaTesters_builds_createToManyRelationship(string id, BetaTesterBuildsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/relationships/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class BetaTesters_builds_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "builds";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/betaTesters/{id}/relationships/builds
    public Task BetaTesters_builds_deleteToManyRelationship(string id, BetaTesterBuildsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/betaTesters/{id}/relationships/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBetaDetails_getCollectionFieldsBuildBetaDetails
    {
        autoNotifyEnabled,
        internalBuildState,
        externalBuildState,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBetaDetails_getCollectionFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/buildBetaDetails
    public Task<BuildBetaDetailsResponse> BuildBetaDetails_getCollection(string[]? filterBuild = default, string[]? filterId = default, BuildBetaDetails_getCollectionFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, BuildBetaDetails_getCollectionFieldsBuilds[]? fieldsBuilds = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/buildBetaDetails";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterBuild != null)
            uriBuilder.AddParameter("filter[build]", string.Join(",", filterBuild));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsBuildBetaDetails != null)
            uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildBetaDetailsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBetaDetails_getInstanceFieldsBuildBetaDetails
    {
        autoNotifyEnabled,
        internalBuildState,
        externalBuildState,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBetaDetails_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/buildBetaDetails/{id}
    public Task<BuildBetaDetailResponse> BuildBetaDetails_getInstance(string id, BuildBetaDetails_getInstanceFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, BuildBetaDetails_getInstanceFieldsBuilds[]? fieldsBuilds = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/buildBetaDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuildBetaDetails != null)
            uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildBetaDetailResponse>(message, log);
    }

    // /v1/buildBetaDetails/{id}
    public Task<BuildBetaDetailResponse> BuildBetaDetails_updateInstance(string id, BuildBetaDetailUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/buildBetaDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BuildBetaDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBetaDetails_build_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/buildBetaDetails/{id}/build
    public Task<BuildWithoutIncludesResponse> BuildBetaDetails_build_getToOneRelated(string id, BuildBetaDetails_build_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/buildBetaDetails/{id}/build";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildWithoutIncludesResponse>(message, log);
    }

    // /v1/buildBetaNotifications
    public Task<BuildBetaNotificationResponse> BuildBetaNotifications_createInstance(BuildBetaNotificationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/buildBetaNotifications";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BuildBetaNotificationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBundles_appClipDomainCacheStatus_getToOneRelatedFieldsAppClipDomainStatuses
    {
        domains,
        lastUpdatedDate,
    }

    // /v1/buildBundles/{id}/appClipDomainCacheStatus
    public Task<AppClipDomainStatusResponse> BuildBundles_appClipDomainCacheStatus_getToOneRelated(string id, BuildBundles_appClipDomainCacheStatus_getToOneRelatedFieldsAppClipDomainStatuses[]? fieldsAppClipDomainStatuses = default, INestedLog? log = null)
    {
        string path = "/v1/buildBundles/{id}/appClipDomainCacheStatus";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipDomainStatuses != null)
            uriBuilder.AddParameter("fields[appClipDomainStatuses]", string.Join(",", fieldsAppClipDomainStatuses));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipDomainStatusResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBundles_appClipDomainDebugStatus_getToOneRelatedFieldsAppClipDomainStatuses
    {
        domains,
        lastUpdatedDate,
    }

    // /v1/buildBundles/{id}/appClipDomainDebugStatus
    public Task<AppClipDomainStatusResponse> BuildBundles_appClipDomainDebugStatus_getToOneRelated(string id, BuildBundles_appClipDomainDebugStatus_getToOneRelatedFieldsAppClipDomainStatuses[]? fieldsAppClipDomainStatuses = default, INestedLog? log = null)
    {
        string path = "/v1/buildBundles/{id}/appClipDomainDebugStatus";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppClipDomainStatuses != null)
            uriBuilder.AddParameter("fields[appClipDomainStatuses]", string.Join(",", fieldsAppClipDomainStatuses));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppClipDomainStatusResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBundles_betaAppClipInvocations_getToManyRelatedFieldsBetaAppClipInvocations
    {
        url,
        betaAppClipInvocationLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBundles_betaAppClipInvocations_getToManyRelatedFieldsBetaAppClipInvocationLocalizations
    {
        title,
        locale,
    }

    // /v1/buildBundles/{id}/betaAppClipInvocations
    public Task<BetaAppClipInvocationsResponse> BuildBundles_betaAppClipInvocations_getToManyRelated(string id, BuildBundles_betaAppClipInvocations_getToManyRelatedFieldsBetaAppClipInvocations[]? fieldsBetaAppClipInvocations = default, BuildBundles_betaAppClipInvocations_getToManyRelatedFieldsBetaAppClipInvocationLocalizations[]? fieldsBetaAppClipInvocationLocalizations = default, int? limit = default, string[]? include = default, int? limitBetaAppClipInvocationLocalizations = default, INestedLog? log = null)
    {
        string path = "/v1/buildBundles/{id}/betaAppClipInvocations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaAppClipInvocations != null)
            uriBuilder.AddParameter("fields[betaAppClipInvocations]", string.Join(",", fieldsBetaAppClipInvocations));
        if (fieldsBetaAppClipInvocationLocalizations != null)
            uriBuilder.AddParameter("fields[betaAppClipInvocationLocalizations]", string.Join(",", fieldsBetaAppClipInvocationLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBetaAppClipInvocationLocalizations.HasValue)
            uriBuilder.AddParameter("limit[betaAppClipInvocationLocalizations]", limitBetaAppClipInvocationLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppClipInvocationsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BuildBundles_buildBundleFileSizes_getToManyRelatedFieldsBuildBundleFileSizes
    {
        deviceModel,
        osVersion,
        downloadBytes,
        installBytes,
    }

    // /v1/buildBundles/{id}/buildBundleFileSizes
    public Task<BuildBundleFileSizesResponse> BuildBundles_buildBundleFileSizes_getToManyRelated(string id, BuildBundles_buildBundleFileSizes_getToManyRelatedFieldsBuildBundleFileSizes[]? fieldsBuildBundleFileSizes = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/buildBundles/{id}/buildBundleFileSizes";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuildBundleFileSizes != null)
            uriBuilder.AddParameter("fields[buildBundleFileSizes]", string.Join(",", fieldsBuildBundleFileSizes));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildBundleFileSizesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFilterProcessingState
    {
        PROCESSING,
        FAILED,
        INVALID,
        VALID,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFilterBetaAppReviewSubmissionBetaReviewState
    {
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        REJECTED,
        APPROVED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFilterPreReleaseVersionPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFilterBuildAudienceType
    {
        INTERNAL_ONLY,
        APP_STORE_ELIGIBLE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionSort
    {
        version,
        [EnumMember(Value = "-version")]
        versionDescending,
        uploadedDate,
        [EnumMember(Value = "-uploadedDate")]
        uploadedDateDescending,
        preReleaseVersion,
        [EnumMember(Value = "-preReleaseVersion")]
        preReleaseVersionDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsBetaTesters
    {
        firstName,
        lastName,
        email,
        inviteType,
        state,
        apps,
        betaGroups,
        builds,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsBetaBuildLocalizations
    {
        whatsNew,
        locale,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsBetaAppReviewSubmissions
    {
        betaReviewState,
        submittedDate,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsBuildBetaDetails
    {
        autoNotifyEnabled,
        internalBuildState,
        externalBuildState,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionFieldsBuildIcons
    {
        name,
        iconAsset,
        iconType,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getCollectionInclude
    {
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
    }

    // /v1/builds
    public Task<BuildsResponse> Builds_getCollection(string[]? filterVersion = default, string[]? filterExpired = default, Builds_getCollectionFilterProcessingState[]? filterProcessingState = default, Builds_getCollectionFilterBetaAppReviewSubmissionBetaReviewState[]? filterBetaAppReviewSubmissionBetaReviewState = default, string[]? filterUsesNonExemptEncryption = default, string[]? filterPreReleaseVersionVersion = default, Builds_getCollectionFilterPreReleaseVersionPlatform[]? filterPreReleaseVersionPlatform = default, Builds_getCollectionFilterBuildAudienceType[]? filterBuildAudienceType = default, string[]? filterPreReleaseVersion = default, string[]? filterApp = default, string[]? filterBetaGroups = default, string[]? filterAppStoreVersion = default, string[]? filterId = default, Builds_getCollectionSort[]? sort = default, Builds_getCollectionFieldsBuilds[]? fieldsBuilds = default, Builds_getCollectionFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, Builds_getCollectionFieldsBetaTesters[]? fieldsBetaTesters = default, Builds_getCollectionFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, Builds_getCollectionFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, Builds_getCollectionFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, Builds_getCollectionFieldsApps[]? fieldsApps = default, Builds_getCollectionFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, Builds_getCollectionFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, Builds_getCollectionFieldsBuildIcons[]? fieldsBuildIcons = default, int? limit = default, Builds_getCollectionInclude[]? include = default, int? limitBetaBuildLocalizations = default, int? limitBetaGroups = default, int? limitBuildBundles = default, int? limitIcons = default, int? limitIndividualTesters = default, INestedLog? log = null)
    {
        string path = "/v1/builds";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterVersion != null)
            uriBuilder.AddParameter("filter[version]", string.Join(",", filterVersion));
        if (filterExpired != null)
            uriBuilder.AddParameter("filter[expired]", string.Join(",", filterExpired));
        if (filterProcessingState != null)
            uriBuilder.AddParameter("filter[processingState]", string.Join(",", filterProcessingState));
        if (filterBetaAppReviewSubmissionBetaReviewState != null)
            uriBuilder.AddParameter("filter[betaAppReviewSubmission.betaReviewState]", string.Join(",", filterBetaAppReviewSubmissionBetaReviewState));
        if (filterUsesNonExemptEncryption != null)
            uriBuilder.AddParameter("filter[usesNonExemptEncryption]", string.Join(",", filterUsesNonExemptEncryption));
        if (filterPreReleaseVersionVersion != null)
            uriBuilder.AddParameter("filter[preReleaseVersion.version]", string.Join(",", filterPreReleaseVersionVersion));
        if (filterPreReleaseVersionPlatform != null)
            uriBuilder.AddParameter("filter[preReleaseVersion.platform]", string.Join(",", filterPreReleaseVersionPlatform));
        if (filterBuildAudienceType != null)
            uriBuilder.AddParameter("filter[buildAudienceType]", string.Join(",", filterBuildAudienceType));
        if (filterPreReleaseVersion != null)
            uriBuilder.AddParameter("filter[preReleaseVersion]", string.Join(",", filterPreReleaseVersion));
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (filterBetaGroups != null)
            uriBuilder.AddParameter("filter[betaGroups]", string.Join(",", filterBetaGroups));
        if (filterAppStoreVersion != null)
            uriBuilder.AddParameter("filter[appStoreVersion]", string.Join(",", filterAppStoreVersion));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
        if (fieldsBetaTesters != null)
            uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
        if (fieldsBetaBuildLocalizations != null)
            uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
        if (fieldsBetaAppReviewSubmissions != null)
            uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsBuildBetaDetails != null)
            uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsBuildIcons != null)
            uriBuilder.AddParameter("fields[buildIcons]", string.Join(",", fieldsBuildIcons));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBetaBuildLocalizations.HasValue)
            uriBuilder.AddParameter("limit[betaBuildLocalizations]", limitBetaBuildLocalizations.Value.ToString());
        if (limitBetaGroups.HasValue)
            uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
        if (limitBuildBundles.HasValue)
            uriBuilder.AddParameter("limit[buildBundles]", limitBuildBundles.Value.ToString());
        if (limitIcons.HasValue)
            uriBuilder.AddParameter("limit[icons]", limitIcons.Value.ToString());
        if (limitIndividualTesters.HasValue)
            uriBuilder.AddParameter("limit[individualTesters]", limitIndividualTesters.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsBetaTesters
    {
        firstName,
        lastName,
        email,
        inviteType,
        state,
        apps,
        betaGroups,
        builds,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsBetaBuildLocalizations
    {
        whatsNew,
        locale,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsBetaAppReviewSubmissions
    {
        betaReviewState,
        submittedDate,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsBuildBetaDetails
    {
        autoNotifyEnabled,
        internalBuildState,
        externalBuildState,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceFieldsBuildIcons
    {
        name,
        iconAsset,
        iconType,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_getInstanceInclude
    {
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
    }

    // /v1/builds/{id}
    public Task<BuildResponse> Builds_getInstance(string id, Builds_getInstanceFieldsBuilds[]? fieldsBuilds = default, Builds_getInstanceFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, Builds_getInstanceFieldsBetaTesters[]? fieldsBetaTesters = default, Builds_getInstanceFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, Builds_getInstanceFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, Builds_getInstanceFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, Builds_getInstanceFieldsApps[]? fieldsApps = default, Builds_getInstanceFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, Builds_getInstanceFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, Builds_getInstanceFieldsBuildIcons[]? fieldsBuildIcons = default, Builds_getInstanceInclude[]? include = default, int? limitBetaBuildLocalizations = default, int? limitBetaGroups = default, int? limitBuildBundles = default, int? limitIcons = default, int? limitIndividualTesters = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
        if (fieldsBetaTesters != null)
            uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
        if (fieldsBetaBuildLocalizations != null)
            uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
        if (fieldsBetaAppReviewSubmissions != null)
            uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsBuildBetaDetails != null)
            uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsBuildIcons != null)
            uriBuilder.AddParameter("fields[buildIcons]", string.Join(",", fieldsBuildIcons));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBetaBuildLocalizations.HasValue)
            uriBuilder.AddParameter("limit[betaBuildLocalizations]", limitBetaBuildLocalizations.Value.ToString());
        if (limitBetaGroups.HasValue)
            uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
        if (limitBuildBundles.HasValue)
            uriBuilder.AddParameter("limit[buildBundles]", limitBuildBundles.Value.ToString());
        if (limitIcons.HasValue)
            uriBuilder.AddParameter("limit[icons]", limitIcons.Value.ToString());
        if (limitIndividualTesters.HasValue)
            uriBuilder.AddParameter("limit[individualTesters]", limitIndividualTesters.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildResponse>(message, log);
    }

    // /v1/builds/{id}
    public Task<BuildResponse> Builds_updateInstance(string id, BuildUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BuildResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_app_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/builds/{id}/app
    public Task<AppWithoutIncludesResponse> Builds_app_getToOneRelated(string id, Builds_app_getToOneRelatedFieldsApps[]? fieldsApps = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/app";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appEncryptionDeclaration_getToOneRelatedFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    // /v1/builds/{id}/appEncryptionDeclaration
    public Task<AppEncryptionDeclarationWithoutIncludesResponse> Builds_appEncryptionDeclaration_getToOneRelated(string id, Builds_appEncryptionDeclaration_getToOneRelatedFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/appEncryptionDeclaration";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppEncryptionDeclarationWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsAgeRatingDeclarations
    {
        alcoholTobaccoOrDrugUseOrReferences,
        contests,
        gamblingAndContests,
        gambling,
        gamblingSimulated,
        kidsAgeBand,
        lootBox,
        medicalOrTreatmentInformation,
        profanityOrCrudeHumor,
        sexualContentGraphicAndNudity,
        sexualContentOrNudity,
        horrorOrFearThemes,
        matureOrSuggestiveThemes,
        unrestrictedWebAccess,
        violenceCartoonOrFantasy,
        violenceRealisticProlongedGraphicOrSadistic,
        violenceRealistic,
        ageRatingOverride,
        koreaAgeRatingOverride,
        seventeenPlus,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsAppStoreVersionPhasedReleases
    {
        phasedReleaseState,
        startDate,
        totalPauseDuration,
        currentDayNumber,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsRoutingAppCoverages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsAppStoreReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        appStoreVersion,
        appStoreReviewAttachments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
        platform,
        app,
        latestControlVersion,
        controlVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_appStoreVersion_getToOneRelatedInclude
    {
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        alternativeDistributionPackage,
    }

    // /v1/builds/{id}/appStoreVersion
    public Task<AppStoreVersionResponse> Builds_appStoreVersion_getToOneRelated(string id, Builds_appStoreVersion_getToOneRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, Builds_appStoreVersion_getToOneRelatedFieldsApps[]? fieldsApps = default, Builds_appStoreVersion_getToOneRelatedFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, Builds_appStoreVersion_getToOneRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, Builds_appStoreVersion_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, Builds_appStoreVersion_getToOneRelatedFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, Builds_appStoreVersion_getToOneRelatedFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, Builds_appStoreVersion_getToOneRelatedFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, Builds_appStoreVersion_getToOneRelatedFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, string[]? fieldsAppStoreVersionSubmissions = default, Builds_appStoreVersion_getToOneRelatedFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, Builds_appStoreVersion_getToOneRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, string[]? fieldsAlternativeDistributionPackages = default, Builds_appStoreVersion_getToOneRelatedInclude[]? include = default, int? limitAppStoreVersionLocalizations = default, int? limitAppStoreVersionExperimentsV2 = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/appStoreVersion";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAgeRatingDeclarations != null)
            uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsAppStoreVersionPhasedReleases != null)
            uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsRoutingAppCoverages != null)
            uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
        if (fieldsAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
        if (fieldsAppStoreVersionSubmissions != null)
            uriBuilder.AddParameter("fields[appStoreVersionSubmissions]", string.Join(",", fieldsAppStoreVersionSubmissions));
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAlternativeDistributionPackages != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackages]", string.Join(",", fieldsAlternativeDistributionPackages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations.Value.ToString());
        if (limitAppStoreVersionExperimentsV2.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_betaAppReviewSubmission_getToOneRelatedFieldsBetaAppReviewSubmissions
    {
        betaReviewState,
        submittedDate,
        build,
    }

    // /v1/builds/{id}/betaAppReviewSubmission
    public Task<BetaAppReviewSubmissionWithoutIncludesResponse> Builds_betaAppReviewSubmission_getToOneRelated(string id, Builds_betaAppReviewSubmission_getToOneRelatedFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/betaAppReviewSubmission";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaAppReviewSubmissions != null)
            uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaAppReviewSubmissionWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_betaBuildLocalizations_getToManyRelatedFieldsBetaBuildLocalizations
    {
        whatsNew,
        locale,
        build,
    }

    // /v1/builds/{id}/betaBuildLocalizations
    public Task<BetaBuildLocalizationsWithoutIncludesResponse> Builds_betaBuildLocalizations_getToManyRelated(string id, Builds_betaBuildLocalizations_getToManyRelatedFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/betaBuildLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaBuildLocalizations != null)
            uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaBuildLocalizationsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_buildBetaDetail_getToOneRelatedFieldsBuildBetaDetails
    {
        autoNotifyEnabled,
        internalBuildState,
        externalBuildState,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_buildBetaDetail_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/builds/{id}/buildBetaDetail
    public Task<BuildBetaDetailResponse> Builds_buildBetaDetail_getToOneRelated(string id, Builds_buildBetaDetail_getToOneRelatedFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, Builds_buildBetaDetail_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/buildBetaDetail";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuildBetaDetails != null)
            uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildBetaDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_diagnosticSignatures_getToManyRelatedFilterDiagnosticType
    {
        DISK_WRITES,
        HANGS,
        LAUNCHES,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_diagnosticSignatures_getToManyRelatedFieldsDiagnosticSignatures
    {
        diagnosticType,
        signature,
        weight,
        insight,
        logs,
    }

    // /v1/builds/{id}/diagnosticSignatures
    public Task<DiagnosticSignaturesResponse> Builds_diagnosticSignatures_getToManyRelated(string id, Builds_diagnosticSignatures_getToManyRelatedFilterDiagnosticType[]? filterDiagnosticType = default, Builds_diagnosticSignatures_getToManyRelatedFieldsDiagnosticSignatures[]? fieldsDiagnosticSignatures = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/diagnosticSignatures";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterDiagnosticType != null)
            uriBuilder.AddParameter("filter[diagnosticType]", string.Join(",", filterDiagnosticType));
        if (fieldsDiagnosticSignatures != null)
            uriBuilder.AddParameter("fields[diagnosticSignatures]", string.Join(",", fieldsDiagnosticSignatures));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<DiagnosticSignaturesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_icons_getToManyRelatedFieldsBuildIcons
    {
        name,
        iconAsset,
        iconType,
    }

    // /v1/builds/{id}/icons
    public Task<BuildIconsWithoutIncludesResponse> Builds_icons_getToManyRelated(string id, Builds_icons_getToManyRelatedFieldsBuildIcons[]? fieldsBuildIcons = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/icons";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuildIcons != null)
            uriBuilder.AddParameter("fields[buildIcons]", string.Join(",", fieldsBuildIcons));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildIconsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_individualTesters_getToManyRelatedFieldsBetaTesters
    {
        firstName,
        lastName,
        email,
        inviteType,
        state,
        apps,
        betaGroups,
        builds,
    }

    // /v1/builds/{id}/individualTesters
    public Task<BetaTestersWithoutIncludesResponse> Builds_individualTesters_getToManyRelated(string id, Builds_individualTesters_getToManyRelatedFieldsBetaTesters[]? fieldsBetaTesters = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/individualTesters";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBetaTesters != null)
            uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaTestersWithoutIncludesResponse>(message, log);
    }

    // /v1/builds/{id}/metrics/betaBuildUsages
    public Task<BetaBuildUsagesV1MetricResponse> Builds_betaBuildUsages_getMetrics(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/metrics/betaBuildUsages";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BetaBuildUsagesV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_perfPowerMetrics_getToManyRelatedFilterMetricType
    {
        DISK,
        HANG,
        BATTERY,
        LAUNCH,
        MEMORY,
        ANIMATION,
        TERMINATION,
    }

    // /v1/builds/{id}/perfPowerMetrics
    public Task Builds_perfPowerMetrics_getToManyRelated(string id, string[]? filterPlatform = default, Builds_perfPowerMetrics_getToManyRelatedFilterMetricType[]? filterMetricType = default, string[]? filterDeviceType = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/perfPowerMetrics";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterMetricType != null)
            uriBuilder.AddParameter("filter[metricType]", string.Join(",", filterMetricType));
        if (filterDeviceType != null)
            uriBuilder.AddParameter("filter[deviceType]", string.Join(",", filterDeviceType));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Builds_preReleaseVersion_getToOneRelatedFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    // /v1/builds/{id}/preReleaseVersion
    public Task<PrereleaseVersionWithoutIncludesResponse> Builds_preReleaseVersion_getToOneRelated(string id, Builds_preReleaseVersion_getToOneRelatedFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/preReleaseVersion";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PrereleaseVersionWithoutIncludesResponse>(message, log);
    }

    // /v1/builds/{id}/relationships/appEncryptionDeclaration
    public Task<BuildAppEncryptionDeclarationLinkageResponse> Builds_appEncryptionDeclaration_getToOneRelationship(string id, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/relationships/appEncryptionDeclaration";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildAppEncryptionDeclarationLinkageResponse>(message, log);
    }

    public class Builds_appEncryptionDeclaration_updateToOneRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "appEncryptionDeclarations";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    // /v1/builds/{id}/relationships/appEncryptionDeclaration
    public Task Builds_appEncryptionDeclaration_updateToOneRelationship(string id, BuildAppEncryptionDeclarationLinkageRequest request, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/relationships/appEncryptionDeclaration";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class Builds_betaGroups_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaGroups";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/builds/{id}/relationships/betaGroups
    public Task Builds_betaGroups_createToManyRelationship(string id, BuildBetaGroupsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/relationships/betaGroups";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class Builds_betaGroups_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaGroups";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/builds/{id}/relationships/betaGroups
    public Task Builds_betaGroups_deleteToManyRelationship(string id, BuildBetaGroupsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/relationships/betaGroups";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/builds/{id}/relationships/individualTesters
    public Task<BuildIndividualTestersLinkagesResponse> Builds_individualTesters_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/relationships/individualTesters";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildIndividualTestersLinkagesResponse>(message, log);
    }

    public class Builds_individualTesters_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/builds/{id}/relationships/individualTesters
    public Task Builds_individualTesters_createToManyRelationship(string id, BuildIndividualTestersLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/relationships/individualTesters";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class Builds_individualTesters_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "betaTesters";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/builds/{id}/relationships/individualTesters
    public Task Builds_individualTesters_deleteToManyRelationship(string id, BuildIndividualTestersLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/builds/{id}/relationships/individualTesters";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/bundleIdCapabilities
    public Task<BundleIdCapabilityResponse> BundleIdCapabilities_createInstance(BundleIdCapabilityCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/bundleIdCapabilities";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BundleIdCapabilityResponse>(message, log);
    }

    // /v1/bundleIdCapabilities/{id}
    public Task<BundleIdCapabilityResponse> BundleIdCapabilities_updateInstance(string id, BundleIdCapabilityUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/bundleIdCapabilities/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BundleIdCapabilityResponse>(message, log);
    }

    // /v1/bundleIdCapabilities/{id}
    public Task BundleIdCapabilities_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/bundleIdCapabilities/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getCollectionFilterPlatform
    {
        IOS,
        MAC_OS,
        UNIVERSAL,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getCollectionSort
    {
        name,
        [EnumMember(Value = "-name")]
        nameDescending,
        platform,
        [EnumMember(Value = "-platform")]
        platformDescending,
        identifier,
        [EnumMember(Value = "-identifier")]
        identifierDescending,
        seedId,
        [EnumMember(Value = "-seedId")]
        seedIdDescending,
        id,
        [EnumMember(Value = "-id")]
        idDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getCollectionFieldsBundleIds
    {
        name,
        platform,
        identifier,
        seedId,
        profiles,
        bundleIdCapabilities,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getCollectionFieldsProfiles
    {
        name,
        platform,
        profileType,
        profileState,
        profileContent,
        uuid,
        createdDate,
        expirationDate,
        bundleId,
        devices,
        certificates,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getCollectionFieldsBundleIdCapabilities
    {
        capabilityType,
        settings,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getCollectionInclude
    {
        profiles,
        bundleIdCapabilities,
        app,
    }

    // /v1/bundleIds
    public Task<BundleIdsResponse> BundleIds_getCollection(string[]? filterName = default, BundleIds_getCollectionFilterPlatform[]? filterPlatform = default, string[]? filterIdentifier = default, string[]? filterSeedId = default, string[]? filterId = default, BundleIds_getCollectionSort[]? sort = default, BundleIds_getCollectionFieldsBundleIds[]? fieldsBundleIds = default, BundleIds_getCollectionFieldsProfiles[]? fieldsProfiles = default, BundleIds_getCollectionFieldsBundleIdCapabilities[]? fieldsBundleIdCapabilities = default, BundleIds_getCollectionFieldsApps[]? fieldsApps = default, int? limit = default, BundleIds_getCollectionInclude[]? include = default, int? limitBundleIdCapabilities = default, int? limitProfiles = default, INestedLog? log = null)
    {
        string path = "/v1/bundleIds";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterName != null)
            uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterIdentifier != null)
            uriBuilder.AddParameter("filter[identifier]", string.Join(",", filterIdentifier));
        if (filterSeedId != null)
            uriBuilder.AddParameter("filter[seedId]", string.Join(",", filterSeedId));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsBundleIds != null)
            uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
        if (fieldsProfiles != null)
            uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
        if (fieldsBundleIdCapabilities != null)
            uriBuilder.AddParameter("fields[bundleIdCapabilities]", string.Join(",", fieldsBundleIdCapabilities));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBundleIdCapabilities.HasValue)
            uriBuilder.AddParameter("limit[bundleIdCapabilities]", limitBundleIdCapabilities.Value.ToString());
        if (limitProfiles.HasValue)
            uriBuilder.AddParameter("limit[profiles]", limitProfiles.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BundleIdsResponse>(message, log);
    }

    // /v1/bundleIds
    public Task<BundleIdResponse> BundleIds_createInstance(BundleIdCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/bundleIds";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BundleIdResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getInstanceFieldsBundleIds
    {
        name,
        platform,
        identifier,
        seedId,
        profiles,
        bundleIdCapabilities,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getInstanceFieldsProfiles
    {
        name,
        platform,
        profileType,
        profileState,
        profileContent,
        uuid,
        createdDate,
        expirationDate,
        bundleId,
        devices,
        certificates,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getInstanceFieldsBundleIdCapabilities
    {
        capabilityType,
        settings,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_getInstanceInclude
    {
        profiles,
        bundleIdCapabilities,
        app,
    }

    // /v1/bundleIds/{id}
    public Task<BundleIdResponse> BundleIds_getInstance(string id, BundleIds_getInstanceFieldsBundleIds[]? fieldsBundleIds = default, BundleIds_getInstanceFieldsProfiles[]? fieldsProfiles = default, BundleIds_getInstanceFieldsBundleIdCapabilities[]? fieldsBundleIdCapabilities = default, BundleIds_getInstanceFieldsApps[]? fieldsApps = default, BundleIds_getInstanceInclude[]? include = default, int? limitBundleIdCapabilities = default, int? limitProfiles = default, INestedLog? log = null)
    {
        string path = "/v1/bundleIds/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBundleIds != null)
            uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
        if (fieldsProfiles != null)
            uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
        if (fieldsBundleIdCapabilities != null)
            uriBuilder.AddParameter("fields[bundleIdCapabilities]", string.Join(",", fieldsBundleIdCapabilities));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBundleIdCapabilities.HasValue)
            uriBuilder.AddParameter("limit[bundleIdCapabilities]", limitBundleIdCapabilities.Value.ToString());
        if (limitProfiles.HasValue)
            uriBuilder.AddParameter("limit[profiles]", limitProfiles.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BundleIdResponse>(message, log);
    }

    // /v1/bundleIds/{id}
    public Task<BundleIdResponse> BundleIds_updateInstance(string id, BundleIdUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/bundleIds/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<BundleIdResponse>(message, log);
    }

    // /v1/bundleIds/{id}
    public Task BundleIds_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/bundleIds/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_app_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/bundleIds/{id}/app
    public Task<AppWithoutIncludesResponse> BundleIds_app_getToOneRelated(string id, BundleIds_app_getToOneRelatedFieldsApps[]? fieldsApps = default, INestedLog? log = null)
    {
        string path = "/v1/bundleIds/{id}/app";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_bundleIdCapabilities_getToManyRelatedFieldsBundleIdCapabilities
    {
        capabilityType,
        settings,
    }

    // /v1/bundleIds/{id}/bundleIdCapabilities
    public Task<BundleIdCapabilitiesWithoutIncludesResponse> BundleIds_bundleIdCapabilities_getToManyRelated(string id, BundleIds_bundleIdCapabilities_getToManyRelatedFieldsBundleIdCapabilities[]? fieldsBundleIdCapabilities = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/bundleIds/{id}/bundleIdCapabilities";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBundleIdCapabilities != null)
            uriBuilder.AddParameter("fields[bundleIdCapabilities]", string.Join(",", fieldsBundleIdCapabilities));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BundleIdCapabilitiesWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum BundleIds_profiles_getToManyRelatedFieldsProfiles
    {
        name,
        platform,
        profileType,
        profileState,
        profileContent,
        uuid,
        createdDate,
        expirationDate,
        bundleId,
        devices,
        certificates,
    }

    // /v1/bundleIds/{id}/profiles
    public Task<ProfilesWithoutIncludesResponse> BundleIds_profiles_getToManyRelated(string id, BundleIds_profiles_getToManyRelatedFieldsProfiles[]? fieldsProfiles = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/bundleIds/{id}/profiles";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsProfiles != null)
            uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ProfilesWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Certificates_getCollectionFilterCertificateType
    {
        IOS_DEVELOPMENT,
        IOS_DISTRIBUTION,
        MAC_APP_DISTRIBUTION,
        MAC_INSTALLER_DISTRIBUTION,
        MAC_APP_DEVELOPMENT,
        DEVELOPER_ID_KEXT,
        DEVELOPER_ID_KEXT_G2,
        DEVELOPER_ID_APPLICATION,
        DEVELOPER_ID_APPLICATION_G2,
        DEVELOPMENT,
        DISTRIBUTION,
        PASS_TYPE_ID,
        PASS_TYPE_ID_WITH_NFC,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Certificates_getCollectionSort
    {
        displayName,
        [EnumMember(Value = "-displayName")]
        displayNameDescending,
        certificateType,
        [EnumMember(Value = "-certificateType")]
        certificateTypeDescending,
        serialNumber,
        [EnumMember(Value = "-serialNumber")]
        serialNumberDescending,
        id,
        [EnumMember(Value = "-id")]
        idDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Certificates_getCollectionFieldsCertificates
    {
        name,
        certificateType,
        displayName,
        serialNumber,
        platform,
        expirationDate,
        certificateContent,
    }

    // /v1/certificates
    public Task<CertificatesResponse> Certificates_getCollection(string[]? filterDisplayName = default, Certificates_getCollectionFilterCertificateType[]? filterCertificateType = default, string[]? filterSerialNumber = default, string[]? filterId = default, Certificates_getCollectionSort[]? sort = default, Certificates_getCollectionFieldsCertificates[]? fieldsCertificates = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/certificates";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterDisplayName != null)
            uriBuilder.AddParameter("filter[displayName]", string.Join(",", filterDisplayName));
        if (filterCertificateType != null)
            uriBuilder.AddParameter("filter[certificateType]", string.Join(",", filterCertificateType));
        if (filterSerialNumber != null)
            uriBuilder.AddParameter("filter[serialNumber]", string.Join(",", filterSerialNumber));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsCertificates != null)
            uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CertificatesResponse>(message, log);
    }

    // /v1/certificates
    public Task<CertificateResponse> Certificates_createInstance(CertificateCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/certificates";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<CertificateResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Certificates_getInstanceFieldsCertificates
    {
        name,
        certificateType,
        displayName,
        serialNumber,
        platform,
        expirationDate,
        certificateContent,
    }

    // /v1/certificates/{id}
    public Task<CertificateResponse> Certificates_getInstance(string id, Certificates_getInstanceFieldsCertificates[]? fieldsCertificates = default, INestedLog? log = null)
    {
        string path = "/v1/certificates/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCertificates != null)
            uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CertificateResponse>(message, log);
    }

    // /v1/certificates/{id}
    public Task Certificates_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/certificates/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiArtifacts_getInstanceFieldsCiArtifacts
    {
        fileType,
        fileName,
        fileSize,
        downloadUrl,
    }

    // /v1/ciArtifacts/{id}
    public Task<CiArtifactResponse> CiArtifacts_getInstance(string id, CiArtifacts_getInstanceFieldsCiArtifacts[]? fieldsCiArtifacts = default, INestedLog? log = null)
    {
        string path = "/v1/ciArtifacts/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiArtifacts != null)
            uriBuilder.AddParameter("fields[ciArtifacts]", string.Join(",", fieldsCiArtifacts));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiArtifactResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_getInstanceFieldsCiBuildActions
    {
        name,
        actionType,
        startedDate,
        finishedDate,
        issueCounts,
        executionProgress,
        completionStatus,
        isRequiredToPass,
        buildRun,
        artifacts,
        issues,
        testResults,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_getInstanceFieldsCiBuildRuns
    {
        number,
        createdDate,
        startedDate,
        finishedDate,
        sourceCommit,
        destinationCommit,
        isPullRequestBuild,
        issueCounts,
        executionProgress,
        completionStatus,
        startReason,
        cancelReason,
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        actions,
        pullRequest,
    }

    // /v1/ciBuildActions/{id}
    public Task<CiBuildActionResponse> CiBuildActions_getInstance(string id, CiBuildActions_getInstanceFieldsCiBuildActions[]? fieldsCiBuildActions = default, CiBuildActions_getInstanceFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/ciBuildActions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiBuildActions != null)
            uriBuilder.AddParameter("fields[ciBuildActions]", string.Join(",", fieldsCiBuildActions));
        if (fieldsCiBuildRuns != null)
            uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiBuildActionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_artifacts_getToManyRelatedFieldsCiArtifacts
    {
        fileType,
        fileName,
        fileSize,
        downloadUrl,
    }

    // /v1/ciBuildActions/{id}/artifacts
    public Task<CiArtifactsResponse> CiBuildActions_artifacts_getToManyRelated(string id, CiBuildActions_artifacts_getToManyRelatedFieldsCiArtifacts[]? fieldsCiArtifacts = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/ciBuildActions/{id}/artifacts";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiArtifacts != null)
            uriBuilder.AddParameter("fields[ciArtifacts]", string.Join(",", fieldsCiArtifacts));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiArtifactsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_buildRun_getToOneRelatedFieldsCiBuildRuns
    {
        number,
        createdDate,
        startedDate,
        finishedDate,
        sourceCommit,
        destinationCommit,
        isPullRequestBuild,
        issueCounts,
        executionProgress,
        completionStatus,
        startReason,
        cancelReason,
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        actions,
        pullRequest,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_buildRun_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_buildRun_getToOneRelatedFieldsCiWorkflows
    {
        name,
        description,
        branchStartCondition,
        tagStartCondition,
        pullRequestStartCondition,
        scheduledStartCondition,
        manualBranchStartCondition,
        manualTagStartCondition,
        manualPullRequestStartCondition,
        actions,
        isEnabled,
        isLockedForEditing,
        clean,
        containerFilePath,
        lastModifiedDate,
        product,
        repository,
        xcodeVersion,
        macOsVersion,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_buildRun_getToOneRelatedFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_buildRun_getToOneRelatedFieldsScmGitReferences
    {
        name,
        canonicalName,
        isDeleted,
        kind,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_buildRun_getToOneRelatedFieldsScmPullRequests
    {
        title,
        number,
        webUrl,
        sourceRepositoryOwner,
        sourceRepositoryName,
        sourceBranchName,
        destinationRepositoryOwner,
        destinationRepositoryName,
        destinationBranchName,
        isClosed,
        isCrossRepository,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_buildRun_getToOneRelatedInclude
    {
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        pullRequest,
    }

    // /v1/ciBuildActions/{id}/buildRun
    public Task<CiBuildRunResponse> CiBuildActions_buildRun_getToOneRelated(string id, CiBuildActions_buildRun_getToOneRelatedFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, CiBuildActions_buildRun_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, CiBuildActions_buildRun_getToOneRelatedFieldsCiWorkflows[]? fieldsCiWorkflows = default, CiBuildActions_buildRun_getToOneRelatedFieldsCiProducts[]? fieldsCiProducts = default, CiBuildActions_buildRun_getToOneRelatedFieldsScmGitReferences[]? fieldsScmGitReferences = default, CiBuildActions_buildRun_getToOneRelatedFieldsScmPullRequests[]? fieldsScmPullRequests = default, CiBuildActions_buildRun_getToOneRelatedInclude[]? include = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/ciBuildActions/{id}/buildRun";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiBuildRuns != null)
            uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsCiWorkflows != null)
            uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsScmGitReferences != null)
            uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
        if (fieldsScmPullRequests != null)
            uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiBuildRunResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_issues_getToManyRelatedFieldsCiIssues
    {
        issueType,
        message,
        fileSource,
        category,
    }

    // /v1/ciBuildActions/{id}/issues
    public Task<CiIssuesResponse> CiBuildActions_issues_getToManyRelated(string id, CiBuildActions_issues_getToManyRelatedFieldsCiIssues[]? fieldsCiIssues = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/ciBuildActions/{id}/issues";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiIssues != null)
            uriBuilder.AddParameter("fields[ciIssues]", string.Join(",", fieldsCiIssues));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiIssuesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildActions_testResults_getToManyRelatedFieldsCiTestResults
    {
        className,
        name,
        status,
        fileSource,
        message,
        destinationTestResults,
    }

    // /v1/ciBuildActions/{id}/testResults
    public Task<CiTestResultsResponse> CiBuildActions_testResults_getToManyRelated(string id, CiBuildActions_testResults_getToManyRelatedFieldsCiTestResults[]? fieldsCiTestResults = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/ciBuildActions/{id}/testResults";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiTestResults != null)
            uriBuilder.AddParameter("fields[ciTestResults]", string.Join(",", fieldsCiTestResults));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiTestResultsResponse>(message, log);
    }

    // /v1/ciBuildRuns
    public Task<CiBuildRunResponse> CiBuildRuns_createInstance(CiBuildRunCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/ciBuildRuns";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<CiBuildRunResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_getInstanceFieldsCiBuildRuns
    {
        number,
        createdDate,
        startedDate,
        finishedDate,
        sourceCommit,
        destinationCommit,
        isPullRequestBuild,
        issueCounts,
        executionProgress,
        completionStatus,
        startReason,
        cancelReason,
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        actions,
        pullRequest,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_getInstanceInclude
    {
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        pullRequest,
    }

    // /v1/ciBuildRuns/{id}
    public Task<CiBuildRunResponse> CiBuildRuns_getInstance(string id, CiBuildRuns_getInstanceFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, CiBuildRuns_getInstanceFieldsBuilds[]? fieldsBuilds = default, CiBuildRuns_getInstanceInclude[]? include = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/ciBuildRuns/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiBuildRuns != null)
            uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiBuildRunResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_actions_getToManyRelatedFieldsCiBuildActions
    {
        name,
        actionType,
        startedDate,
        finishedDate,
        issueCounts,
        executionProgress,
        completionStatus,
        isRequiredToPass,
        buildRun,
        artifacts,
        issues,
        testResults,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_actions_getToManyRelatedFieldsCiBuildRuns
    {
        number,
        createdDate,
        startedDate,
        finishedDate,
        sourceCommit,
        destinationCommit,
        isPullRequestBuild,
        issueCounts,
        executionProgress,
        completionStatus,
        startReason,
        cancelReason,
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        actions,
        pullRequest,
    }

    // /v1/ciBuildRuns/{id}/actions
    public Task<CiBuildActionsResponse> CiBuildRuns_actions_getToManyRelated(string id, CiBuildRuns_actions_getToManyRelatedFieldsCiBuildActions[]? fieldsCiBuildActions = default, CiBuildRuns_actions_getToManyRelatedFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/ciBuildRuns/{id}/actions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiBuildActions != null)
            uriBuilder.AddParameter("fields[ciBuildActions]", string.Join(",", fieldsCiBuildActions));
        if (fieldsCiBuildRuns != null)
            uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiBuildActionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFilterProcessingState
    {
        PROCESSING,
        FAILED,
        INVALID,
        VALID,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFilterBetaAppReviewSubmissionBetaReviewState
    {
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        REJECTED,
        APPROVED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFilterPreReleaseVersionPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFilterBuildAudienceType
    {
        INTERNAL_ONLY,
        APP_STORE_ELIGIBLE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedSort
    {
        version,
        [EnumMember(Value = "-version")]
        versionDescending,
        uploadedDate,
        [EnumMember(Value = "-uploadedDate")]
        uploadedDateDescending,
        preReleaseVersion,
        [EnumMember(Value = "-preReleaseVersion")]
        preReleaseVersionDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsBetaTesters
    {
        firstName,
        lastName,
        email,
        inviteType,
        state,
        apps,
        betaGroups,
        builds,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsBetaBuildLocalizations
    {
        whatsNew,
        locale,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsBetaAppReviewSubmissions
    {
        betaReviewState,
        submittedDate,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsBuildBetaDetails
    {
        autoNotifyEnabled,
        internalBuildState,
        externalBuildState,
        build,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsBuildIcons
    {
        name,
        iconAsset,
        iconType,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedFieldsBuildBundles
    {
        bundleId,
        bundleType,
        sdkBuild,
        platformBuild,
        fileName,
        hasSirikit,
        hasOnDemandResources,
        hasPrerenderedIcon,
        usesLocationServices,
        isIosBuildMacAppStoreCompatible,
        includesSymbols,
        dSYMUrl,
        supportedArchitectures,
        requiredCapabilities,
        deviceProtocols,
        locales,
        entitlements,
        appClipDomainCacheStatus,
        appClipDomainDebugStatus,
        betaAppClipInvocations,
        buildBundleFileSizes,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiBuildRuns_builds_getToManyRelatedInclude
    {
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
    }

    // /v1/ciBuildRuns/{id}/builds
    public Task<BuildsResponse> CiBuildRuns_builds_getToManyRelated(string id, string[]? filterVersion = default, string[]? filterExpired = default, CiBuildRuns_builds_getToManyRelatedFilterProcessingState[]? filterProcessingState = default, CiBuildRuns_builds_getToManyRelatedFilterBetaAppReviewSubmissionBetaReviewState[]? filterBetaAppReviewSubmissionBetaReviewState = default, string[]? filterUsesNonExemptEncryption = default, string[]? filterPreReleaseVersionVersion = default, CiBuildRuns_builds_getToManyRelatedFilterPreReleaseVersionPlatform[]? filterPreReleaseVersionPlatform = default, CiBuildRuns_builds_getToManyRelatedFilterBuildAudienceType[]? filterBuildAudienceType = default, string[]? filterPreReleaseVersion = default, string[]? filterApp = default, string[]? filterBetaGroups = default, string[]? filterAppStoreVersion = default, string[]? filterId = default, CiBuildRuns_builds_getToManyRelatedSort[]? sort = default, CiBuildRuns_builds_getToManyRelatedFieldsBuilds[]? fieldsBuilds = default, CiBuildRuns_builds_getToManyRelatedFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, CiBuildRuns_builds_getToManyRelatedFieldsBetaTesters[]? fieldsBetaTesters = default, CiBuildRuns_builds_getToManyRelatedFieldsBetaGroups[]? fieldsBetaGroups = default, CiBuildRuns_builds_getToManyRelatedFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, CiBuildRuns_builds_getToManyRelatedFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, CiBuildRuns_builds_getToManyRelatedFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, CiBuildRuns_builds_getToManyRelatedFieldsApps[]? fieldsApps = default, CiBuildRuns_builds_getToManyRelatedFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, CiBuildRuns_builds_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, CiBuildRuns_builds_getToManyRelatedFieldsBuildIcons[]? fieldsBuildIcons = default, CiBuildRuns_builds_getToManyRelatedFieldsBuildBundles[]? fieldsBuildBundles = default, int? limit = default, CiBuildRuns_builds_getToManyRelatedInclude[]? include = default, int? limitIndividualTesters = default, int? limitBetaGroups = default, int? limitBetaBuildLocalizations = default, int? limitIcons = default, int? limitBuildBundles = default, INestedLog? log = null)
    {
        string path = "/v1/ciBuildRuns/{id}/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterVersion != null)
            uriBuilder.AddParameter("filter[version]", string.Join(",", filterVersion));
        if (filterExpired != null)
            uriBuilder.AddParameter("filter[expired]", string.Join(",", filterExpired));
        if (filterProcessingState != null)
            uriBuilder.AddParameter("filter[processingState]", string.Join(",", filterProcessingState));
        if (filterBetaAppReviewSubmissionBetaReviewState != null)
            uriBuilder.AddParameter("filter[betaAppReviewSubmission.betaReviewState]", string.Join(",", filterBetaAppReviewSubmissionBetaReviewState));
        if (filterUsesNonExemptEncryption != null)
            uriBuilder.AddParameter("filter[usesNonExemptEncryption]", string.Join(",", filterUsesNonExemptEncryption));
        if (filterPreReleaseVersionVersion != null)
            uriBuilder.AddParameter("filter[preReleaseVersion.version]", string.Join(",", filterPreReleaseVersionVersion));
        if (filterPreReleaseVersionPlatform != null)
            uriBuilder.AddParameter("filter[preReleaseVersion.platform]", string.Join(",", filterPreReleaseVersionPlatform));
        if (filterBuildAudienceType != null)
            uriBuilder.AddParameter("filter[buildAudienceType]", string.Join(",", filterBuildAudienceType));
        if (filterPreReleaseVersion != null)
            uriBuilder.AddParameter("filter[preReleaseVersion]", string.Join(",", filterPreReleaseVersion));
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (filterBetaGroups != null)
            uriBuilder.AddParameter("filter[betaGroups]", string.Join(",", filterBetaGroups));
        if (filterAppStoreVersion != null)
            uriBuilder.AddParameter("filter[appStoreVersion]", string.Join(",", filterAppStoreVersion));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
        if (fieldsBetaTesters != null)
            uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (fieldsBetaBuildLocalizations != null)
            uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
        if (fieldsBetaAppReviewSubmissions != null)
            uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsBuildBetaDetails != null)
            uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsBuildIcons != null)
            uriBuilder.AddParameter("fields[buildIcons]", string.Join(",", fieldsBuildIcons));
        if (fieldsBuildBundles != null)
            uriBuilder.AddParameter("fields[buildBundles]", string.Join(",", fieldsBuildBundles));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitIndividualTesters.HasValue)
            uriBuilder.AddParameter("limit[individualTesters]", limitIndividualTesters.Value.ToString());
        if (limitBetaGroups.HasValue)
            uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
        if (limitBetaBuildLocalizations.HasValue)
            uriBuilder.AddParameter("limit[betaBuildLocalizations]", limitBetaBuildLocalizations.Value.ToString());
        if (limitIcons.HasValue)
            uriBuilder.AddParameter("limit[icons]", limitIcons.Value.ToString());
        if (limitBuildBundles.HasValue)
            uriBuilder.AddParameter("limit[buildBundles]", limitBuildBundles.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiIssues_getInstanceFieldsCiIssues
    {
        issueType,
        message,
        fileSource,
        category,
    }

    // /v1/ciIssues/{id}
    public Task<CiIssueResponse> CiIssues_getInstance(string id, CiIssues_getInstanceFieldsCiIssues[]? fieldsCiIssues = default, INestedLog? log = null)
    {
        string path = "/v1/ciIssues/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiIssues != null)
            uriBuilder.AddParameter("fields[ciIssues]", string.Join(",", fieldsCiIssues));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiIssueResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiMacOsVersions_getCollectionFieldsCiMacOsVersions
    {
        version,
        name,
        xcodeVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiMacOsVersions_getCollectionFieldsCiXcodeVersions
    {
        version,
        name,
        testDestinations,
        macOsVersions,
    }

    // /v1/ciMacOsVersions
    public Task<CiMacOsVersionsResponse> CiMacOsVersions_getCollection(CiMacOsVersions_getCollectionFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, CiMacOsVersions_getCollectionFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, int? limit = default, string[]? include = default, int? limitXcodeVersions = default, INestedLog? log = null)
    {
        string path = "/v1/ciMacOsVersions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiMacOsVersions != null)
            uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
        if (fieldsCiXcodeVersions != null)
            uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitXcodeVersions.HasValue)
            uriBuilder.AddParameter("limit[xcodeVersions]", limitXcodeVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiMacOsVersionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiMacOsVersions_getInstanceFieldsCiMacOsVersions
    {
        version,
        name,
        xcodeVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiMacOsVersions_getInstanceFieldsCiXcodeVersions
    {
        version,
        name,
        testDestinations,
        macOsVersions,
    }

    // /v1/ciMacOsVersions/{id}
    public Task<CiMacOsVersionResponse> CiMacOsVersions_getInstance(string id, CiMacOsVersions_getInstanceFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, CiMacOsVersions_getInstanceFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, string[]? include = default, int? limitXcodeVersions = default, INestedLog? log = null)
    {
        string path = "/v1/ciMacOsVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiMacOsVersions != null)
            uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
        if (fieldsCiXcodeVersions != null)
            uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitXcodeVersions.HasValue)
            uriBuilder.AddParameter("limit[xcodeVersions]", limitXcodeVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiMacOsVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiMacOsVersions_xcodeVersions_getToManyRelatedFieldsCiXcodeVersions
    {
        version,
        name,
        testDestinations,
        macOsVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiMacOsVersions_xcodeVersions_getToManyRelatedFieldsCiMacOsVersions
    {
        version,
        name,
        xcodeVersions,
    }

    // /v1/ciMacOsVersions/{id}/xcodeVersions
    public Task<CiXcodeVersionsResponse> CiMacOsVersions_xcodeVersions_getToManyRelated(string id, CiMacOsVersions_xcodeVersions_getToManyRelatedFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, CiMacOsVersions_xcodeVersions_getToManyRelatedFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, int? limit = default, string[]? include = default, int? limitMacOsVersions = default, INestedLog? log = null)
    {
        string path = "/v1/ciMacOsVersions/{id}/xcodeVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiXcodeVersions != null)
            uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
        if (fieldsCiMacOsVersions != null)
            uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitMacOsVersions.HasValue)
            uriBuilder.AddParameter("limit[macOsVersions]", limitMacOsVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiXcodeVersionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_getCollectionFilterProductType
    {
        APP,
        FRAMEWORK,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_getCollectionFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_getCollectionFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_getCollectionInclude
    {
        app,
        bundleId,
        primaryRepositories,
    }

    // /v1/ciProducts
    public Task<CiProductsResponse> CiProducts_getCollection(CiProducts_getCollectionFilterProductType[]? filterProductType = default, string[]? filterApp = default, CiProducts_getCollectionFieldsCiProducts[]? fieldsCiProducts = default, CiProducts_getCollectionFieldsApps[]? fieldsApps = default, CiProducts_getCollectionFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, CiProducts_getCollectionInclude[]? include = default, int? limitPrimaryRepositories = default, INestedLog? log = null)
    {
        string path = "/v1/ciProducts";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterProductType != null)
            uriBuilder.AddParameter("filter[productType]", string.Join(",", filterProductType));
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitPrimaryRepositories.HasValue)
            uriBuilder.AddParameter("limit[primaryRepositories]", limitPrimaryRepositories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiProductsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_getInstanceFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_getInstanceFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_getInstanceInclude
    {
        app,
        bundleId,
        primaryRepositories,
    }

    // /v1/ciProducts/{id}
    public Task<CiProductResponse> CiProducts_getInstance(string id, CiProducts_getInstanceFieldsCiProducts[]? fieldsCiProducts = default, CiProducts_getInstanceFieldsApps[]? fieldsApps = default, CiProducts_getInstanceFieldsScmRepositories[]? fieldsScmRepositories = default, CiProducts_getInstanceInclude[]? include = default, int? limitPrimaryRepositories = default, INestedLog? log = null)
    {
        string path = "/v1/ciProducts/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitPrimaryRepositories.HasValue)
            uriBuilder.AddParameter("limit[primaryRepositories]", limitPrimaryRepositories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiProductResponse>(message, log);
    }

    // /v1/ciProducts/{id}
    public Task CiProducts_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/ciProducts/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_additionalRepositories_getToManyRelatedFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_additionalRepositories_getToManyRelatedFieldsScmProviders
    {
        scmProviderType,
        url,
        repositories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_additionalRepositories_getToManyRelatedFieldsScmGitReferences
    {
        name,
        canonicalName,
        isDeleted,
        kind,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_additionalRepositories_getToManyRelatedInclude
    {
        scmProvider,
        defaultBranch,
    }

    // /v1/ciProducts/{id}/additionalRepositories
    public Task<ScmRepositoriesResponse> CiProducts_additionalRepositories_getToManyRelated(string id, string[]? filterId = default, CiProducts_additionalRepositories_getToManyRelatedFieldsScmRepositories[]? fieldsScmRepositories = default, CiProducts_additionalRepositories_getToManyRelatedFieldsScmProviders[]? fieldsScmProviders = default, CiProducts_additionalRepositories_getToManyRelatedFieldsScmGitReferences[]? fieldsScmGitReferences = default, int? limit = default, CiProducts_additionalRepositories_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/ciProducts/{id}/additionalRepositories";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (fieldsScmProviders != null)
            uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
        if (fieldsScmGitReferences != null)
            uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmRepositoriesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsAppEncryptionDeclarations
    {
        appDescription,
        createdDate,
        usesEncryption,
        exempt,
        containsProprietaryCryptography,
        containsThirdPartyCryptography,
        availableOnFrenchStore,
        platform,
        uploadedDate,
        documentUrl,
        documentName,
        documentType,
        appEncryptionDeclarationState,
        codeValue,
        app,
        builds,
        appEncryptionDeclarationDocument,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsBetaGroups
    {
        name,
        createdDate,
        isInternalGroup,
        hasAccessToAllBuilds,
        publicLinkEnabled,
        publicLinkId,
        publicLinkLimitEnabled,
        publicLinkLimit,
        publicLink,
        feedbackEnabled,
        iosBuildsAvailableForAppleSiliconMac,
        app,
        builds,
        betaTesters,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsBetaAppLocalizations
    {
        feedbackEmail,
        marketingUrl,
        privacyPolicyUrl,
        tvOsPrivacyPolicy,
        description,
        locale,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsBetaLicenseAgreements
    {
        agreementText,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsBetaAppReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsAppInfos
    {
        appStoreState,
        state,
        appStoreAgeRating,
        australiaAgeRating,
        brazilAgeRating,
        brazilAgeRatingV2,
        franceAgeRating,
        koreaAgeRating,
        kidsAgeBand,
        app,
        ageRatingDeclaration,
        appInfoLocalizations,
        primaryCategory,
        primarySubcategoryOne,
        primarySubcategoryTwo,
        secondaryCategory,
        secondarySubcategoryOne,
        secondarySubcategoryTwo,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsAppClips
    {
        bundleId,
        app,
        appClipDefaultExperiences,
        appClipAdvancedExperiences,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsEndUserLicenseAgreements
    {
        agreementText,
        app,
        territories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsInAppPurchases
    {
        referenceName,
        productId,
        inAppPurchaseType,
        state,
        apps,
        name,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsSubscriptionGroups
    {
        referenceName,
        subscriptions,
        subscriptionGroupLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsGameCenterEnabledVersions
    {
        platform,
        versionString,
        iconAsset,
        compatibleVersions,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsAppCustomProductPages
    {
        name,
        url,
        visible,
        app,
        appCustomProductPageVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsAppEvents
    {
        referenceName,
        badge,
        eventState,
        deepLink,
        purchaseRequirement,
        primaryLocale,
        priority,
        purpose,
        territorySchedules,
        archivedTerritorySchedules,
        localizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsReviewSubmissions
    {
        platform,
        submittedDate,
        state,
        app,
        items,
        appStoreVersionForReview,
        submittedByActor,
        lastUpdatedByActor,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsSubscriptionGracePeriods
    {
        optIn,
        sandboxOptIn,
        duration,
        renewalType,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedFieldsAppStoreVersionExperiments
    {
        name,
        platform,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        app,
        latestControlVersion,
        controlVersions,
        appStoreVersionExperimentTreatments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_app_getToOneRelatedInclude
    {
        appEncryptionDeclarations,
        ciProduct,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        endUserLicenseAgreement,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
    }

    // /v1/ciProducts/{id}/app
    public Task<AppResponse> CiProducts_app_getToOneRelated(string id, CiProducts_app_getToOneRelatedFieldsApps[]? fieldsApps = default, CiProducts_app_getToOneRelatedFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, CiProducts_app_getToOneRelatedFieldsCiProducts[]? fieldsCiProducts = default, CiProducts_app_getToOneRelatedFieldsBetaGroups[]? fieldsBetaGroups = default, CiProducts_app_getToOneRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, CiProducts_app_getToOneRelatedFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, CiProducts_app_getToOneRelatedFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, CiProducts_app_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, CiProducts_app_getToOneRelatedFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, CiProducts_app_getToOneRelatedFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, CiProducts_app_getToOneRelatedFieldsAppInfos[]? fieldsAppInfos = default, CiProducts_app_getToOneRelatedFieldsAppClips[]? fieldsAppClips = default, CiProducts_app_getToOneRelatedFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default, CiProducts_app_getToOneRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, CiProducts_app_getToOneRelatedFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, CiProducts_app_getToOneRelatedFieldsGameCenterEnabledVersions[]? fieldsGameCenterEnabledVersions = default, CiProducts_app_getToOneRelatedFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, CiProducts_app_getToOneRelatedFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, CiProducts_app_getToOneRelatedFieldsAppEvents[]? fieldsAppEvents = default, CiProducts_app_getToOneRelatedFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, CiProducts_app_getToOneRelatedFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default, CiProducts_app_getToOneRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, CiProducts_app_getToOneRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, CiProducts_app_getToOneRelatedInclude[]? include = default, int? limitAppEncryptionDeclarations = default, int? limitBetaGroups = default, int? limitAppStoreVersions = default, int? limitPreReleaseVersions = default, int? limitBetaAppLocalizations = default, int? limitBuilds = default, int? limitAppInfos = default, int? limitAppClips = default, int? limitSubscriptionGroups = default, int? limitAppCustomProductPages = default, int? limitInAppPurchasesV2 = default, int? limitPromotedPurchases = default, int? limitAppEvents = default, int? limitReviewSubmissions = default, int? limitAppStoreVersionExperimentsV2 = default, INestedLog? log = null)
    {
        string path = "/v1/ciProducts/{id}/app";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAppEncryptionDeclarations != null)
            uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsBetaGroups != null)
            uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
        if (fieldsBetaAppLocalizations != null)
            uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsBetaLicenseAgreements != null)
            uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
        if (fieldsBetaAppReviewDetails != null)
            uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
        if (fieldsAppInfos != null)
            uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
        if (fieldsAppClips != null)
            uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
        if (fieldsEndUserLicenseAgreements != null)
            uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (fieldsSubscriptionGroups != null)
            uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
        if (fieldsGameCenterEnabledVersions != null)
            uriBuilder.AddParameter("fields[gameCenterEnabledVersions]", string.Join(",", fieldsGameCenterEnabledVersions));
        if (fieldsAppCustomProductPages != null)
            uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsAppEvents != null)
            uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
        if (fieldsReviewSubmissions != null)
            uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
        if (fieldsSubscriptionGracePeriods != null)
            uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppEncryptionDeclarations.HasValue)
            uriBuilder.AddParameter("limit[appEncryptionDeclarations]", limitAppEncryptionDeclarations.Value.ToString());
        if (limitBetaGroups.HasValue)
            uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
        if (limitAppStoreVersions.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersions]", limitAppStoreVersions.Value.ToString());
        if (limitPreReleaseVersions.HasValue)
            uriBuilder.AddParameter("limit[preReleaseVersions]", limitPreReleaseVersions.Value.ToString());
        if (limitBetaAppLocalizations.HasValue)
            uriBuilder.AddParameter("limit[betaAppLocalizations]", limitBetaAppLocalizations.Value.ToString());
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());
        if (limitAppInfos.HasValue)
            uriBuilder.AddParameter("limit[appInfos]", limitAppInfos.Value.ToString());
        if (limitAppClips.HasValue)
            uriBuilder.AddParameter("limit[appClips]", limitAppClips.Value.ToString());
        if (limitSubscriptionGroups.HasValue)
            uriBuilder.AddParameter("limit[subscriptionGroups]", limitSubscriptionGroups.Value.ToString());
        if (limitAppCustomProductPages.HasValue)
            uriBuilder.AddParameter("limit[appCustomProductPages]", limitAppCustomProductPages.Value.ToString());
        if (limitInAppPurchasesV2.HasValue)
            uriBuilder.AddParameter("limit[inAppPurchasesV2]", limitInAppPurchasesV2.Value.ToString());
        if (limitPromotedPurchases.HasValue)
            uriBuilder.AddParameter("limit[promotedPurchases]", limitPromotedPurchases.Value.ToString());
        if (limitAppEvents.HasValue)
            uriBuilder.AddParameter("limit[appEvents]", limitAppEvents.Value.ToString());
        if (limitReviewSubmissions.HasValue)
            uriBuilder.AddParameter("limit[reviewSubmissions]", limitReviewSubmissions.Value.ToString());
        if (limitAppStoreVersionExperimentsV2.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_buildRuns_getToManyRelatedSort
    {
        number,
        [EnumMember(Value = "-number")]
        numberDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_buildRuns_getToManyRelatedFieldsCiBuildRuns
    {
        number,
        createdDate,
        startedDate,
        finishedDate,
        sourceCommit,
        destinationCommit,
        isPullRequestBuild,
        issueCounts,
        executionProgress,
        completionStatus,
        startReason,
        cancelReason,
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        actions,
        pullRequest,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_buildRuns_getToManyRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_buildRuns_getToManyRelatedFieldsCiWorkflows
    {
        name,
        description,
        branchStartCondition,
        tagStartCondition,
        pullRequestStartCondition,
        scheduledStartCondition,
        manualBranchStartCondition,
        manualTagStartCondition,
        manualPullRequestStartCondition,
        actions,
        isEnabled,
        isLockedForEditing,
        clean,
        containerFilePath,
        lastModifiedDate,
        product,
        repository,
        xcodeVersion,
        macOsVersion,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_buildRuns_getToManyRelatedFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_buildRuns_getToManyRelatedFieldsScmGitReferences
    {
        name,
        canonicalName,
        isDeleted,
        kind,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_buildRuns_getToManyRelatedFieldsScmPullRequests
    {
        title,
        number,
        webUrl,
        sourceRepositoryOwner,
        sourceRepositoryName,
        sourceBranchName,
        destinationRepositoryOwner,
        destinationRepositoryName,
        destinationBranchName,
        isClosed,
        isCrossRepository,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_buildRuns_getToManyRelatedInclude
    {
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        pullRequest,
    }

    // /v1/ciProducts/{id}/buildRuns
    public Task<CiBuildRunsResponse> CiProducts_buildRuns_getToManyRelated(string id, string[]? filterBuilds = default, CiProducts_buildRuns_getToManyRelatedSort[]? sort = default, CiProducts_buildRuns_getToManyRelatedFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, CiProducts_buildRuns_getToManyRelatedFieldsBuilds[]? fieldsBuilds = default, CiProducts_buildRuns_getToManyRelatedFieldsCiWorkflows[]? fieldsCiWorkflows = default, CiProducts_buildRuns_getToManyRelatedFieldsCiProducts[]? fieldsCiProducts = default, CiProducts_buildRuns_getToManyRelatedFieldsScmGitReferences[]? fieldsScmGitReferences = default, CiProducts_buildRuns_getToManyRelatedFieldsScmPullRequests[]? fieldsScmPullRequests = default, int? limit = default, CiProducts_buildRuns_getToManyRelatedInclude[]? include = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/ciProducts/{id}/buildRuns";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterBuilds != null)
            uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsCiBuildRuns != null)
            uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsCiWorkflows != null)
            uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsScmGitReferences != null)
            uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
        if (fieldsScmPullRequests != null)
            uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiBuildRunsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_primaryRepositories_getToManyRelatedFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_primaryRepositories_getToManyRelatedFieldsScmProviders
    {
        scmProviderType,
        url,
        repositories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_primaryRepositories_getToManyRelatedFieldsScmGitReferences
    {
        name,
        canonicalName,
        isDeleted,
        kind,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_primaryRepositories_getToManyRelatedInclude
    {
        scmProvider,
        defaultBranch,
    }

    // /v1/ciProducts/{id}/primaryRepositories
    public Task<ScmRepositoriesResponse> CiProducts_primaryRepositories_getToManyRelated(string id, string[]? filterId = default, CiProducts_primaryRepositories_getToManyRelatedFieldsScmRepositories[]? fieldsScmRepositories = default, CiProducts_primaryRepositories_getToManyRelatedFieldsScmProviders[]? fieldsScmProviders = default, CiProducts_primaryRepositories_getToManyRelatedFieldsScmGitReferences[]? fieldsScmGitReferences = default, int? limit = default, CiProducts_primaryRepositories_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/ciProducts/{id}/primaryRepositories";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (fieldsScmProviders != null)
            uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
        if (fieldsScmGitReferences != null)
            uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmRepositoriesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_workflows_getToManyRelatedFieldsCiWorkflows
    {
        name,
        description,
        branchStartCondition,
        tagStartCondition,
        pullRequestStartCondition,
        scheduledStartCondition,
        manualBranchStartCondition,
        manualTagStartCondition,
        manualPullRequestStartCondition,
        actions,
        isEnabled,
        isLockedForEditing,
        clean,
        containerFilePath,
        lastModifiedDate,
        product,
        repository,
        xcodeVersion,
        macOsVersion,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_workflows_getToManyRelatedFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_workflows_getToManyRelatedFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_workflows_getToManyRelatedFieldsCiXcodeVersions
    {
        version,
        name,
        testDestinations,
        macOsVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_workflows_getToManyRelatedFieldsCiMacOsVersions
    {
        version,
        name,
        xcodeVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiProducts_workflows_getToManyRelatedInclude
    {
        product,
        repository,
        xcodeVersion,
        macOsVersion,
    }

    // /v1/ciProducts/{id}/workflows
    public Task<CiWorkflowsResponse> CiProducts_workflows_getToManyRelated(string id, CiProducts_workflows_getToManyRelatedFieldsCiWorkflows[]? fieldsCiWorkflows = default, CiProducts_workflows_getToManyRelatedFieldsCiProducts[]? fieldsCiProducts = default, CiProducts_workflows_getToManyRelatedFieldsScmRepositories[]? fieldsScmRepositories = default, CiProducts_workflows_getToManyRelatedFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, CiProducts_workflows_getToManyRelatedFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, int? limit = default, CiProducts_workflows_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/ciProducts/{id}/workflows";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiWorkflows != null)
            uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (fieldsCiXcodeVersions != null)
            uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
        if (fieldsCiMacOsVersions != null)
            uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiWorkflowsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiTestResults_getInstanceFieldsCiTestResults
    {
        className,
        name,
        status,
        fileSource,
        message,
        destinationTestResults,
    }

    // /v1/ciTestResults/{id}
    public Task<CiTestResultResponse> CiTestResults_getInstance(string id, CiTestResults_getInstanceFieldsCiTestResults[]? fieldsCiTestResults = default, INestedLog? log = null)
    {
        string path = "/v1/ciTestResults/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiTestResults != null)
            uriBuilder.AddParameter("fields[ciTestResults]", string.Join(",", fieldsCiTestResults));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiTestResultResponse>(message, log);
    }

    // /v1/ciWorkflows
    public Task<CiWorkflowResponse> CiWorkflows_createInstance(CiWorkflowCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/ciWorkflows";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<CiWorkflowResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_getInstanceFieldsCiWorkflows
    {
        name,
        description,
        branchStartCondition,
        tagStartCondition,
        pullRequestStartCondition,
        scheduledStartCondition,
        manualBranchStartCondition,
        manualTagStartCondition,
        manualPullRequestStartCondition,
        actions,
        isEnabled,
        isLockedForEditing,
        clean,
        containerFilePath,
        lastModifiedDate,
        product,
        repository,
        xcodeVersion,
        macOsVersion,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_getInstanceFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_getInstanceInclude
    {
        product,
        repository,
        xcodeVersion,
        macOsVersion,
    }

    // /v1/ciWorkflows/{id}
    public Task<CiWorkflowResponse> CiWorkflows_getInstance(string id, CiWorkflows_getInstanceFieldsCiWorkflows[]? fieldsCiWorkflows = default, CiWorkflows_getInstanceFieldsScmRepositories[]? fieldsScmRepositories = default, CiWorkflows_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/ciWorkflows/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiWorkflows != null)
            uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiWorkflowResponse>(message, log);
    }

    // /v1/ciWorkflows/{id}
    public Task<CiWorkflowResponse> CiWorkflows_updateInstance(string id, CiWorkflowUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/ciWorkflows/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<CiWorkflowResponse>(message, log);
    }

    // /v1/ciWorkflows/{id}
    public Task CiWorkflows_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/ciWorkflows/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_buildRuns_getToManyRelatedSort
    {
        number,
        [EnumMember(Value = "-number")]
        numberDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_buildRuns_getToManyRelatedFieldsCiBuildRuns
    {
        number,
        createdDate,
        startedDate,
        finishedDate,
        sourceCommit,
        destinationCommit,
        isPullRequestBuild,
        issueCounts,
        executionProgress,
        completionStatus,
        startReason,
        cancelReason,
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        actions,
        pullRequest,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_buildRuns_getToManyRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_buildRuns_getToManyRelatedFieldsCiWorkflows
    {
        name,
        description,
        branchStartCondition,
        tagStartCondition,
        pullRequestStartCondition,
        scheduledStartCondition,
        manualBranchStartCondition,
        manualTagStartCondition,
        manualPullRequestStartCondition,
        actions,
        isEnabled,
        isLockedForEditing,
        clean,
        containerFilePath,
        lastModifiedDate,
        product,
        repository,
        xcodeVersion,
        macOsVersion,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_buildRuns_getToManyRelatedFieldsCiProducts
    {
        name,
        createdDate,
        productType,
        app,
        bundleId,
        workflows,
        primaryRepositories,
        additionalRepositories,
        buildRuns,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_buildRuns_getToManyRelatedFieldsScmGitReferences
    {
        name,
        canonicalName,
        isDeleted,
        kind,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_buildRuns_getToManyRelatedFieldsScmPullRequests
    {
        title,
        number,
        webUrl,
        sourceRepositoryOwner,
        sourceRepositoryName,
        sourceBranchName,
        destinationRepositoryOwner,
        destinationRepositoryName,
        destinationBranchName,
        isClosed,
        isCrossRepository,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_buildRuns_getToManyRelatedInclude
    {
        builds,
        workflow,
        product,
        sourceBranchOrTag,
        destinationBranch,
        pullRequest,
    }

    // /v1/ciWorkflows/{id}/buildRuns
    public Task<CiBuildRunsResponse> CiWorkflows_buildRuns_getToManyRelated(string id, string[]? filterBuilds = default, CiWorkflows_buildRuns_getToManyRelatedSort[]? sort = default, CiWorkflows_buildRuns_getToManyRelatedFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, CiWorkflows_buildRuns_getToManyRelatedFieldsBuilds[]? fieldsBuilds = default, CiWorkflows_buildRuns_getToManyRelatedFieldsCiWorkflows[]? fieldsCiWorkflows = default, CiWorkflows_buildRuns_getToManyRelatedFieldsCiProducts[]? fieldsCiProducts = default, CiWorkflows_buildRuns_getToManyRelatedFieldsScmGitReferences[]? fieldsScmGitReferences = default, CiWorkflows_buildRuns_getToManyRelatedFieldsScmPullRequests[]? fieldsScmPullRequests = default, int? limit = default, CiWorkflows_buildRuns_getToManyRelatedInclude[]? include = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/ciWorkflows/{id}/buildRuns";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterBuilds != null)
            uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsCiBuildRuns != null)
            uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsCiWorkflows != null)
            uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
        if (fieldsCiProducts != null)
            uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
        if (fieldsScmGitReferences != null)
            uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
        if (fieldsScmPullRequests != null)
            uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiBuildRunsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_repository_getToOneRelatedFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_repository_getToOneRelatedFieldsScmProviders
    {
        scmProviderType,
        url,
        repositories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_repository_getToOneRelatedFieldsScmGitReferences
    {
        name,
        canonicalName,
        isDeleted,
        kind,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiWorkflows_repository_getToOneRelatedInclude
    {
        scmProvider,
        defaultBranch,
    }

    // /v1/ciWorkflows/{id}/repository
    public Task<ScmRepositoryResponse> CiWorkflows_repository_getToOneRelated(string id, CiWorkflows_repository_getToOneRelatedFieldsScmRepositories[]? fieldsScmRepositories = default, CiWorkflows_repository_getToOneRelatedFieldsScmProviders[]? fieldsScmProviders = default, CiWorkflows_repository_getToOneRelatedFieldsScmGitReferences[]? fieldsScmGitReferences = default, CiWorkflows_repository_getToOneRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/ciWorkflows/{id}/repository";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (fieldsScmProviders != null)
            uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
        if (fieldsScmGitReferences != null)
            uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmRepositoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiXcodeVersions_getCollectionFieldsCiXcodeVersions
    {
        version,
        name,
        testDestinations,
        macOsVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiXcodeVersions_getCollectionFieldsCiMacOsVersions
    {
        version,
        name,
        xcodeVersions,
    }

    // /v1/ciXcodeVersions
    public Task<CiXcodeVersionsResponse> CiXcodeVersions_getCollection(CiXcodeVersions_getCollectionFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, CiXcodeVersions_getCollectionFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, int? limit = default, string[]? include = default, int? limitMacOsVersions = default, INestedLog? log = null)
    {
        string path = "/v1/ciXcodeVersions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiXcodeVersions != null)
            uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
        if (fieldsCiMacOsVersions != null)
            uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitMacOsVersions.HasValue)
            uriBuilder.AddParameter("limit[macOsVersions]", limitMacOsVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiXcodeVersionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiXcodeVersions_getInstanceFieldsCiXcodeVersions
    {
        version,
        name,
        testDestinations,
        macOsVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiXcodeVersions_getInstanceFieldsCiMacOsVersions
    {
        version,
        name,
        xcodeVersions,
    }

    // /v1/ciXcodeVersions/{id}
    public Task<CiXcodeVersionResponse> CiXcodeVersions_getInstance(string id, CiXcodeVersions_getInstanceFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, CiXcodeVersions_getInstanceFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, string[]? include = default, int? limitMacOsVersions = default, INestedLog? log = null)
    {
        string path = "/v1/ciXcodeVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiXcodeVersions != null)
            uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
        if (fieldsCiMacOsVersions != null)
            uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitMacOsVersions.HasValue)
            uriBuilder.AddParameter("limit[macOsVersions]", limitMacOsVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiXcodeVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiXcodeVersions_macOsVersions_getToManyRelatedFieldsCiMacOsVersions
    {
        version,
        name,
        xcodeVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CiXcodeVersions_macOsVersions_getToManyRelatedFieldsCiXcodeVersions
    {
        version,
        name,
        testDestinations,
        macOsVersions,
    }

    // /v1/ciXcodeVersions/{id}/macOsVersions
    public Task<CiMacOsVersionsResponse> CiXcodeVersions_macOsVersions_getToManyRelated(string id, CiXcodeVersions_macOsVersions_getToManyRelatedFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, CiXcodeVersions_macOsVersions_getToManyRelatedFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, int? limit = default, string[]? include = default, int? limitXcodeVersions = default, INestedLog? log = null)
    {
        string path = "/v1/ciXcodeVersions/{id}/macOsVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCiMacOsVersions != null)
            uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
        if (fieldsCiXcodeVersions != null)
            uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitXcodeVersions.HasValue)
            uriBuilder.AddParameter("limit[xcodeVersions]", limitXcodeVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CiMacOsVersionsResponse>(message, log);
    }

    // /v1/customerReviewResponses
    public Task<CustomerReviewResponseV1Response> CustomerReviewResponses_createInstance(CustomerReviewResponseV1CreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/customerReviewResponses";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<CustomerReviewResponseV1Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CustomerReviewResponses_getInstanceFieldsCustomerReviewResponses
    {
        responseBody,
        lastModifiedDate,
        state,
        review,
    }

    // /v1/customerReviewResponses/{id}
    public Task<CustomerReviewResponseV1Response> CustomerReviewResponses_getInstance(string id, CustomerReviewResponses_getInstanceFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/customerReviewResponses/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCustomerReviewResponses != null)
            uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CustomerReviewResponseV1Response>(message, log);
    }

    // /v1/customerReviewResponses/{id}
    public Task CustomerReviewResponses_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/customerReviewResponses/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CustomerReviews_getInstanceFieldsCustomerReviews
    {
        rating,
        title,
        body,
        reviewerNickname,
        createdDate,
        territory,
        response,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CustomerReviews_getInstanceFieldsCustomerReviewResponses
    {
        responseBody,
        lastModifiedDate,
        state,
        review,
    }

    // /v1/customerReviews/{id}
    public Task<CustomerReviewResponse> CustomerReviews_getInstance(string id, CustomerReviews_getInstanceFieldsCustomerReviews[]? fieldsCustomerReviews = default, CustomerReviews_getInstanceFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/customerReviews/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCustomerReviews != null)
            uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
        if (fieldsCustomerReviewResponses != null)
            uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CustomerReviewResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CustomerReviews_response_getToOneRelatedFieldsCustomerReviewResponses
    {
        responseBody,
        lastModifiedDate,
        state,
        review,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum CustomerReviews_response_getToOneRelatedFieldsCustomerReviews
    {
        rating,
        title,
        body,
        reviewerNickname,
        createdDate,
        territory,
        response,
    }

    // /v1/customerReviews/{id}/response
    public Task<CustomerReviewResponseV1Response> CustomerReviews_response_getToOneRelated(string id, CustomerReviews_response_getToOneRelatedFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default, CustomerReviews_response_getToOneRelatedFieldsCustomerReviews[]? fieldsCustomerReviews = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/customerReviews/{id}/response";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCustomerReviewResponses != null)
            uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));
        if (fieldsCustomerReviews != null)
            uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CustomerReviewResponseV1Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Devices_getCollectionFilterPlatform
    {
        IOS,
        MAC_OS,
        UNIVERSAL,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Devices_getCollectionFilterStatus
    {
        ENABLED,
        DISABLED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Devices_getCollectionSort
    {
        name,
        [EnumMember(Value = "-name")]
        nameDescending,
        platform,
        [EnumMember(Value = "-platform")]
        platformDescending,
        udid,
        [EnumMember(Value = "-udid")]
        udidDescending,
        status,
        [EnumMember(Value = "-status")]
        statusDescending,
        id,
        [EnumMember(Value = "-id")]
        idDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Devices_getCollectionFieldsDevices
    {
        name,
        platform,
        udid,
        deviceClass,
        status,
        model,
        addedDate,
    }

    // /v1/devices
    public Task<DevicesResponse> Devices_getCollection(string[]? filterName = default, Devices_getCollectionFilterPlatform[]? filterPlatform = default, string[]? filterUdid = default, Devices_getCollectionFilterStatus[]? filterStatus = default, string[]? filterId = default, Devices_getCollectionSort[]? sort = default, Devices_getCollectionFieldsDevices[]? fieldsDevices = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/devices";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterName != null)
            uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterUdid != null)
            uriBuilder.AddParameter("filter[udid]", string.Join(",", filterUdid));
        if (filterStatus != null)
            uriBuilder.AddParameter("filter[status]", string.Join(",", filterStatus));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsDevices != null)
            uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<DevicesResponse>(message, log);
    }

    // /v1/devices
    public Task<DeviceResponse> Devices_createInstance(DeviceCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/devices";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<DeviceResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Devices_getInstanceFieldsDevices
    {
        name,
        platform,
        udid,
        deviceClass,
        status,
        model,
        addedDate,
    }

    // /v1/devices/{id}
    public Task<DeviceResponse> Devices_getInstance(string id, Devices_getInstanceFieldsDevices[]? fieldsDevices = default, INestedLog? log = null)
    {
        string path = "/v1/devices/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsDevices != null)
            uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<DeviceResponse>(message, log);
    }

    // /v1/devices/{id}
    public Task<DeviceResponse> Devices_updateInstance(string id, DeviceUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/devices/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<DeviceResponse>(message, log);
    }

    // /v1/diagnosticSignatures/{id}/logs
    public Task DiagnosticSignatures_logs_getToManyRelated(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/diagnosticSignatures/{id}/logs";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/endAppAvailabilityPreOrders
    public Task<EndAppAvailabilityPreOrderResponse> EndAppAvailabilityPreOrders_createInstance(EndAppAvailabilityPreOrderCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/endAppAvailabilityPreOrders";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<EndAppAvailabilityPreOrderResponse>(message, log);
    }

    // /v1/endUserLicenseAgreements
    public Task<EndUserLicenseAgreementResponse> EndUserLicenseAgreements_createInstance(EndUserLicenseAgreementCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/endUserLicenseAgreements";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<EndUserLicenseAgreementResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum EndUserLicenseAgreements_getInstanceFieldsEndUserLicenseAgreements
    {
        agreementText,
        app,
        territories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum EndUserLicenseAgreements_getInstanceInclude
    {
        app,
        territories,
    }

    // /v1/endUserLicenseAgreements/{id}
    public Task<EndUserLicenseAgreementResponse> EndUserLicenseAgreements_getInstance(string id, EndUserLicenseAgreements_getInstanceFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default, string[]? fieldsTerritories = default, EndUserLicenseAgreements_getInstanceInclude[]? include = default, int? limitTerritories = default, INestedLog? log = null)
    {
        string path = "/v1/endUserLicenseAgreements/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsEndUserLicenseAgreements != null)
            uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitTerritories.HasValue)
            uriBuilder.AddParameter("limit[territories]", limitTerritories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<EndUserLicenseAgreementResponse>(message, log);
    }

    // /v1/endUserLicenseAgreements/{id}
    public Task<EndUserLicenseAgreementResponse> EndUserLicenseAgreements_updateInstance(string id, EndUserLicenseAgreementUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/endUserLicenseAgreements/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<EndUserLicenseAgreementResponse>(message, log);
    }

    // /v1/endUserLicenseAgreements/{id}
    public Task EndUserLicenseAgreements_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/endUserLicenseAgreements/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/endUserLicenseAgreements/{id}/territories
    public Task<TerritoriesWithoutIncludesResponse> EndUserLicenseAgreements_territories_getToManyRelated(string id, string[]? fieldsTerritories = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/endUserLicenseAgreements/{id}/territories";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<TerritoriesWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum FinanceReports_getCollectionFilterReportType
    {
        FINANCIAL,
        FINANCE_DETAIL,
    }

    // /v1/financeReports
    public Task FinanceReports_getCollection(string[] filterVendorNumber, FinanceReports_getCollectionFilterReportType[] filterReportType, string[] filterRegionCode, string[] filterReportDate, INestedLog? log = null)
    {
        string path = "/v1/financeReports";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterVendorNumber != null)
            uriBuilder.AddParameter("filter[vendorNumber]", string.Join(",", filterVendorNumber));
        if (filterReportType != null)
            uriBuilder.AddParameter("filter[reportType]", string.Join(",", filterReportType));
        if (filterRegionCode != null)
            uriBuilder.AddParameter("filter[regionCode]", string.Join(",", filterRegionCode));
        if (filterReportDate != null)
            uriBuilder.AddParameter("filter[reportDate]", string.Join(",", filterReportDate));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/gameCenterAchievementImages
    public Task<GameCenterAchievementImageResponse> GameCenterAchievementImages_createInstance(GameCenterAchievementImageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementImages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterAchievementImageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementImages_getInstanceFieldsGameCenterAchievementImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterAchievementLocalization,
    }

    // /v1/gameCenterAchievementImages/{id}
    public Task<GameCenterAchievementImageResponse> GameCenterAchievementImages_getInstance(string id, GameCenterAchievementImages_getInstanceFieldsGameCenterAchievementImages[]? fieldsGameCenterAchievementImages = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAchievementImages != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementImages]", string.Join(",", fieldsGameCenterAchievementImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementImageResponse>(message, log);
    }

    // /v1/gameCenterAchievementImages/{id}
    public Task<GameCenterAchievementImageResponse> GameCenterAchievementImages_updateInstance(string id, GameCenterAchievementImageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterAchievementImageResponse>(message, log);
    }

    // /v1/gameCenterAchievementImages/{id}
    public Task GameCenterAchievementImages_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/gameCenterAchievementLocalizations
    public Task<GameCenterAchievementLocalizationResponse> GameCenterAchievementLocalizations_createInstance(GameCenterAchievementLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterAchievementLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_getInstanceFieldsGameCenterAchievementLocalizations
    {
        locale,
        name,
        beforeEarnedDescription,
        afterEarnedDescription,
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_getInstanceFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_getInstanceFieldsGameCenterAchievementImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterAchievementLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_getInstanceInclude
    {
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    // /v1/gameCenterAchievementLocalizations/{id}
    public Task<GameCenterAchievementLocalizationResponse> GameCenterAchievementLocalizations_getInstance(string id, GameCenterAchievementLocalizations_getInstanceFieldsGameCenterAchievementLocalizations[]? fieldsGameCenterAchievementLocalizations = default, GameCenterAchievementLocalizations_getInstanceFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterAchievementLocalizations_getInstanceFieldsGameCenterAchievementImages[]? fieldsGameCenterAchievementImages = default, GameCenterAchievementLocalizations_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAchievementLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementLocalizations]", string.Join(",", fieldsGameCenterAchievementLocalizations));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterAchievementImages != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementImages]", string.Join(",", fieldsGameCenterAchievementImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementLocalizationResponse>(message, log);
    }

    // /v1/gameCenterAchievementLocalizations/{id}
    public Task<GameCenterAchievementLocalizationResponse> GameCenterAchievementLocalizations_updateInstance(string id, GameCenterAchievementLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterAchievementLocalizationResponse>(message, log);
    }

    // /v1/gameCenterAchievementLocalizations/{id}
    public Task GameCenterAchievementLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterAchievementLocalizations
    {
        locale,
        name,
        beforeEarnedDescription,
        afterEarnedDescription,
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    // /v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievement
    public Task<GameCenterAchievementResponse> GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelated(string id, GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterAchievementLocalizations[]? fieldsGameCenterAchievementLocalizations = default, GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, GameCenterAchievementLocalizations_gameCenterAchievement_getToOneRelatedInclude[]? include = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievement";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterAchievementLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementLocalizations]", string.Join(",", fieldsGameCenterAchievementLocalizations));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_gameCenterAchievementImage_getToOneRelatedFieldsGameCenterAchievementImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterAchievementLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementLocalizations_gameCenterAchievementImage_getToOneRelatedFieldsGameCenterAchievementLocalizations
    {
        locale,
        name,
        beforeEarnedDescription,
        afterEarnedDescription,
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    // /v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievementImage
    public Task<GameCenterAchievementImageResponse> GameCenterAchievementLocalizations_gameCenterAchievementImage_getToOneRelated(string id, GameCenterAchievementLocalizations_gameCenterAchievementImage_getToOneRelatedFieldsGameCenterAchievementImages[]? fieldsGameCenterAchievementImages = default, GameCenterAchievementLocalizations_gameCenterAchievementImage_getToOneRelatedFieldsGameCenterAchievementLocalizations[]? fieldsGameCenterAchievementLocalizations = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievementImage";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAchievementImages != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementImages]", string.Join(",", fieldsGameCenterAchievementImages));
        if (fieldsGameCenterAchievementLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementLocalizations]", string.Join(",", fieldsGameCenterAchievementLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementImageResponse>(message, log);
    }

    // /v1/gameCenterAchievementReleases
    public Task<GameCenterAchievementReleaseResponse> GameCenterAchievementReleases_createInstance(GameCenterAchievementReleaseCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementReleases";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterAchievementReleaseResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementReleases_getInstanceFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievementReleases_getInstanceInclude
    {
        gameCenterDetail,
        gameCenterAchievement,
    }

    // /v1/gameCenterAchievementReleases/{id}
    public Task<GameCenterAchievementReleaseResponse> GameCenterAchievementReleases_getInstance(string id, GameCenterAchievementReleases_getInstanceFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, GameCenterAchievementReleases_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementReleases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementReleaseResponse>(message, log);
    }

    // /v1/gameCenterAchievementReleases/{id}
    public Task GameCenterAchievementReleases_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievementReleases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/gameCenterAchievements
    public Task<GameCenterAchievementResponse> GameCenterAchievements_createInstance(GameCenterAchievementCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievements";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterAchievementResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_getInstanceFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_getInstanceFieldsGameCenterAchievementLocalizations
    {
        locale,
        name,
        beforeEarnedDescription,
        afterEarnedDescription,
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_getInstanceFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_getInstanceInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    // /v1/gameCenterAchievements/{id}
    public Task<GameCenterAchievementResponse> GameCenterAchievements_getInstance(string id, GameCenterAchievements_getInstanceFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterAchievements_getInstanceFieldsGameCenterAchievementLocalizations[]? fieldsGameCenterAchievementLocalizations = default, GameCenterAchievements_getInstanceFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, GameCenterAchievements_getInstanceInclude[]? include = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievements/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterAchievementLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementLocalizations]", string.Join(",", fieldsGameCenterAchievementLocalizations));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementResponse>(message, log);
    }

    // /v1/gameCenterAchievements/{id}
    public Task<GameCenterAchievementResponse> GameCenterAchievements_updateInstance(string id, GameCenterAchievementUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievements/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterAchievementResponse>(message, log);
    }

    // /v1/gameCenterAchievements/{id}
    public Task GameCenterAchievements_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievements/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterAchievementLocalizations
    {
        locale,
        name,
        beforeEarnedDescription,
        afterEarnedDescription,
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_groupAchievement_getToOneRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    // /v1/gameCenterAchievements/{id}/groupAchievement
    [Obsolete]
    public Task<GameCenterAchievementResponse> GameCenterAchievements_groupAchievement_getToOneRelated(string id, GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterAchievementLocalizations[]? fieldsGameCenterAchievementLocalizations = default, GameCenterAchievements_groupAchievement_getToOneRelatedFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, GameCenterAchievements_groupAchievement_getToOneRelatedInclude[]? include = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievements/{id}/groupAchievement";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterAchievementLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementLocalizations]", string.Join(",", fieldsGameCenterAchievementLocalizations));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_localizations_getToManyRelatedFieldsGameCenterAchievementLocalizations
    {
        locale,
        name,
        beforeEarnedDescription,
        afterEarnedDescription,
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_localizations_getToManyRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_localizations_getToManyRelatedFieldsGameCenterAchievementImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterAchievementLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_localizations_getToManyRelatedInclude
    {
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    // /v1/gameCenterAchievements/{id}/localizations
    public Task<GameCenterAchievementLocalizationsResponse> GameCenterAchievements_localizations_getToManyRelated(string id, GameCenterAchievements_localizations_getToManyRelatedFieldsGameCenterAchievementLocalizations[]? fieldsGameCenterAchievementLocalizations = default, GameCenterAchievements_localizations_getToManyRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterAchievements_localizations_getToManyRelatedFieldsGameCenterAchievementImages[]? fieldsGameCenterAchievementImages = default, int? limit = default, GameCenterAchievements_localizations_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievements/{id}/localizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAchievementLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementLocalizations]", string.Join(",", fieldsGameCenterAchievementLocalizations));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterAchievementImages != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementImages]", string.Join(",", fieldsGameCenterAchievementImages));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementLocalizationsResponse>(message, log);
    }

    // /v1/gameCenterAchievements/{id}/relationships/groupAchievement
    [Obsolete]
    public Task<GameCenterAchievementGroupAchievementLinkageResponse> GameCenterAchievements_groupAchievement_getToOneRelationship(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievements/{id}/relationships/groupAchievement";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementGroupAchievementLinkageResponse>(message, log);
    }

    public class GameCenterAchievements_groupAchievement_updateToOneRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    // /v1/gameCenterAchievements/{id}/relationships/groupAchievement
    [Obsolete]
    public Task GameCenterAchievements_groupAchievement_updateToOneRelationship(string id, GameCenterAchievementGroupAchievementLinkageRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievements/{id}/relationships/groupAchievement";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_releases_getToManyRelatedFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_releases_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_releases_getToManyRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAchievements_releases_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterAchievement,
    }

    // /v1/gameCenterAchievements/{id}/releases
    public Task<GameCenterAchievementReleasesResponse> GameCenterAchievements_releases_getToManyRelated(string id, string[]? filterLive = default, string[]? filterGameCenterDetail = default, GameCenterAchievements_releases_getToManyRelatedFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, GameCenterAchievements_releases_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterAchievements_releases_getToManyRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, int? limit = default, GameCenterAchievements_releases_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAchievements/{id}/releases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLive != null)
            uriBuilder.AddParameter("filter[live]", string.Join(",", filterLive));
        if (filterGameCenterDetail != null)
            uriBuilder.AddParameter("filter[gameCenterDetail]", string.Join(",", filterGameCenterDetail));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementReleasesResponse>(message, log);
    }

    // /v1/gameCenterAppVersions
    public Task<GameCenterAppVersionResponse> GameCenterAppVersions_createInstance(GameCenterAppVersionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAppVersions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterAppVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_getInstanceFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_getInstanceFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_getInstanceInclude
    {
        compatibilityVersions,
        appStoreVersion,
    }

    // /v1/gameCenterAppVersions/{id}
    public Task<GameCenterAppVersionResponse> GameCenterAppVersions_getInstance(string id, GameCenterAppVersions_getInstanceFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, GameCenterAppVersions_getInstanceFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GameCenterAppVersions_getInstanceInclude[]? include = default, int? limitCompatibilityVersions = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAppVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitCompatibilityVersions.HasValue)
            uriBuilder.AddParameter("limit[compatibilityVersions]", limitCompatibilityVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAppVersionResponse>(message, log);
    }

    // /v1/gameCenterAppVersions/{id}
    public Task<GameCenterAppVersionResponse> GameCenterAppVersions_updateInstance(string id, GameCenterAppVersionUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAppVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterAppVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAgeRatingDeclarations
    {
        alcoholTobaccoOrDrugUseOrReferences,
        contests,
        gamblingAndContests,
        gambling,
        gamblingSimulated,
        kidsAgeBand,
        lootBox,
        medicalOrTreatmentInformation,
        profanityOrCrudeHumor,
        sexualContentGraphicAndNudity,
        sexualContentOrNudity,
        horrorOrFearThemes,
        matureOrSuggestiveThemes,
        unrestrictedWebAccess,
        violenceCartoonOrFantasy,
        violenceRealisticProlongedGraphicOrSadistic,
        violenceRealistic,
        ageRatingOverride,
        koreaAgeRatingOverride,
        seventeenPlus,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreVersionLocalizations
    {
        description,
        locale,
        keywords,
        marketingUrl,
        promotionalText,
        supportUrl,
        whatsNew,
        appStoreVersion,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreVersionPhasedReleases
    {
        phasedReleaseState,
        startDate,
        totalPauseDuration,
        currentDayNumber,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsRoutingAppCoverages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreReviewDetails
    {
        contactFirstName,
        contactLastName,
        contactPhone,
        contactEmail,
        demoAccountName,
        demoAccountPassword,
        demoAccountRequired,
        notes,
        appStoreVersion,
        appStoreReviewAttachments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppClipDefaultExperiences
    {
        action,
        appClip,
        releaseWithAppStoreVersion,
        appClipDefaultExperienceLocalizations,
        appClipAppStoreReviewDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
        platform,
        app,
        latestControlVersion,
        controlVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_appStoreVersion_getToOneRelatedInclude
    {
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        alternativeDistributionPackage,
    }

    // /v1/gameCenterAppVersions/{id}/appStoreVersion
    public Task<AppStoreVersionResponse> GameCenterAppVersions_appStoreVersion_getToOneRelated(string id, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsApps[]? fieldsApps = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsBuilds[]? fieldsBuilds = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, string[]? fieldsAppStoreVersionSubmissions = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, string[]? fieldsAlternativeDistributionPackages = default, GameCenterAppVersions_appStoreVersion_getToOneRelatedInclude[]? include = default, int? limitAppStoreVersionLocalizations = default, int? limitAppStoreVersionExperimentsV2 = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAppVersions/{id}/appStoreVersion";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsAgeRatingDeclarations != null)
            uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
        if (fieldsAppStoreVersionLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsAppStoreVersionPhasedReleases != null)
            uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsRoutingAppCoverages != null)
            uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
        if (fieldsAppStoreReviewDetails != null)
            uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
        if (fieldsAppStoreVersionSubmissions != null)
            uriBuilder.AddParameter("fields[appStoreVersionSubmissions]", string.Join(",", fieldsAppStoreVersionSubmissions));
        if (fieldsAppClipDefaultExperiences != null)
            uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAlternativeDistributionPackages != null)
            uriBuilder.AddParameter("fields[alternativeDistributionPackages]", string.Join(",", fieldsAlternativeDistributionPackages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations.Value.ToString());
        if (limitAppStoreVersionExperimentsV2.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_compatibilityVersions_getToManyRelatedFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_compatibilityVersions_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterAppVersions_compatibilityVersions_getToManyRelatedInclude
    {
        compatibilityVersions,
        appStoreVersion,
    }

    // /v1/gameCenterAppVersions/{id}/compatibilityVersions
    public Task<GameCenterAppVersionsResponse> GameCenterAppVersions_compatibilityVersions_getToManyRelated(string id, string[]? filterEnabled = default, GameCenterAppVersions_compatibilityVersions_getToManyRelatedFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, GameCenterAppVersions_compatibilityVersions_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, int? limit = default, GameCenterAppVersions_compatibilityVersions_getToManyRelatedInclude[]? include = default, int? limitCompatibilityVersions = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAppVersions/{id}/compatibilityVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterEnabled != null)
            uriBuilder.AddParameter("filter[enabled]", string.Join(",", filterEnabled));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitCompatibilityVersions.HasValue)
            uriBuilder.AddParameter("limit[compatibilityVersions]", limitCompatibilityVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAppVersionsResponse>(message, log);
    }

    // /v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions
    public Task<GameCenterAppVersionCompatibilityVersionsLinkagesResponse> GameCenterAppVersions_compatibilityVersions_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAppVersionCompatibilityVersionsLinkagesResponse>(message, log);
    }

    public class GameCenterAppVersions_compatibilityVersions_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAppVersions";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions
    public Task GameCenterAppVersions_compatibilityVersions_createToManyRelationship(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class GameCenterAppVersions_compatibilityVersions_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAppVersions";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions
    public Task GameCenterAppVersions_compatibilityVersions_deleteToManyRelationship(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/gameCenterDetails
    public Task<GameCenterDetailResponse> GameCenterDetails_createInstance(GameCenterDetailCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_getInstanceInclude
    {
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    // /v1/gameCenterDetails/{id}
    public Task<GameCenterDetailResponse> GameCenterDetails_getInstance(string id, GameCenterDetails_getInstanceFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterDetails_getInstanceFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, GameCenterDetails_getInstanceFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterDetails_getInstanceFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterDetails_getInstanceFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterDetails_getInstanceFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterDetails_getInstanceFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, GameCenterDetails_getInstanceFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, GameCenterDetails_getInstanceFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, GameCenterDetails_getInstanceInclude[]? include = default, int? limitAchievementReleases = default, int? limitGameCenterAchievements = default, int? limitGameCenterAppVersions = default, int? limitGameCenterLeaderboardSets = default, int? limitGameCenterLeaderboards = default, int? limitLeaderboardReleases = default, int? limitLeaderboardSetReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAchievementReleases.HasValue)
            uriBuilder.AddParameter("limit[achievementReleases]", limitAchievementReleases.Value.ToString());
        if (limitGameCenterAchievements.HasValue)
            uriBuilder.AddParameter("limit[gameCenterAchievements]", limitGameCenterAchievements.Value.ToString());
        if (limitGameCenterAppVersions.HasValue)
            uriBuilder.AddParameter("limit[gameCenterAppVersions]", limitGameCenterAppVersions.Value.ToString());
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());
        if (limitLeaderboardReleases.HasValue)
            uriBuilder.AddParameter("limit[leaderboardReleases]", limitLeaderboardReleases.Value.ToString());
        if (limitLeaderboardSetReleases.HasValue)
            uriBuilder.AddParameter("limit[leaderboardSetReleases]", limitLeaderboardSetReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterDetailResponse>(message, log);
    }

    // /v1/gameCenterDetails/{id}
    public Task<GameCenterDetailResponse> GameCenterDetails_updateInstance(string id, GameCenterDetailUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterDetailResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_achievementReleases_getToManyRelatedFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_achievementReleases_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_achievementReleases_getToManyRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_achievementReleases_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterAchievement,
    }

    // /v1/gameCenterDetails/{id}/achievementReleases
    public Task<GameCenterAchievementReleasesResponse> GameCenterDetails_achievementReleases_getToManyRelated(string id, string[]? filterLive = default, string[]? filterGameCenterAchievement = default, GameCenterDetails_achievementReleases_getToManyRelatedFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, GameCenterDetails_achievementReleases_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterDetails_achievementReleases_getToManyRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, int? limit = default, GameCenterDetails_achievementReleases_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/achievementReleases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLive != null)
            uriBuilder.AddParameter("filter[live]", string.Join(",", filterLive));
        if (filterGameCenterAchievement != null)
            uriBuilder.AddParameter("filter[gameCenterAchievement]", string.Join(",", filterGameCenterAchievement));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementReleasesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievementLocalizations
    {
        locale,
        name,
        beforeEarnedDescription,
        afterEarnedDescription,
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterAchievements_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    // /v1/gameCenterDetails/{id}/gameCenterAchievements
    public Task<GameCenterAchievementsResponse> GameCenterDetails_gameCenterAchievements_getToManyRelated(string id, string[]? filterReferenceName = default, string[]? filterArchived = default, string[]? filterId = default, GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievementLocalizations[]? fieldsGameCenterAchievementLocalizations = default, GameCenterDetails_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, int? limit = default, GameCenterDetails_gameCenterAchievements_getToManyRelatedInclude[]? include = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/gameCenterAchievements";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterReferenceName != null)
            uriBuilder.AddParameter("filter[referenceName]", string.Join(",", filterReferenceName));
        if (filterArchived != null)
            uriBuilder.AddParameter("filter[archived]", string.Join(",", filterArchived));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterAchievementLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementLocalizations]", string.Join(",", fieldsGameCenterAchievementLocalizations));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterAppVersions_getToManyRelatedFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterAppVersions_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterAppVersions_getToManyRelatedInclude
    {
        compatibilityVersions,
        appStoreVersion,
    }

    // /v1/gameCenterDetails/{id}/gameCenterAppVersions
    public Task<GameCenterAppVersionsResponse> GameCenterDetails_gameCenterAppVersions_getToManyRelated(string id, string[]? filterEnabled = default, GameCenterDetails_gameCenterAppVersions_getToManyRelatedFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, GameCenterDetails_gameCenterAppVersions_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, int? limit = default, GameCenterDetails_gameCenterAppVersions_getToManyRelatedInclude[]? include = default, int? limitCompatibilityVersions = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/gameCenterAppVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterEnabled != null)
            uriBuilder.AddParameter("filter[enabled]", string.Join(",", filterEnabled));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitCompatibilityVersions.HasValue)
            uriBuilder.AddParameter("limit[compatibilityVersions]", limitCompatibilityVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAppVersionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterGroup_getToOneRelatedInclude
    {
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    // /v1/gameCenterDetails/{id}/gameCenterGroup
    public Task<GameCenterGroupResponse> GameCenterDetails_gameCenterGroup_getToOneRelated(string id, GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterDetails_gameCenterGroup_getToOneRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterDetails_gameCenterGroup_getToOneRelatedInclude[]? include = default, int? limitGameCenterDetails = default, int? limitGameCenterLeaderboards = default, int? limitGameCenterLeaderboardSets = default, int? limitGameCenterAchievements = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/gameCenterGroup";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterDetails.HasValue)
            uriBuilder.AddParameter("limit[gameCenterDetails]", limitGameCenterDetails.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitGameCenterAchievements.HasValue)
            uriBuilder.AddParameter("limit[gameCenterAchievements]", limitGameCenterAchievements.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterGroupResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardLocalizations
    {
        locale,
        name,
        formatterOverride,
        formatterSuffix,
        formatterSuffixSingular,
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboards_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    // /v1/gameCenterDetails/{id}/gameCenterLeaderboards
    public Task<GameCenterLeaderboardsResponse> GameCenterDetails_gameCenterLeaderboards_getToManyRelated(string id, string[]? filterReferenceName = default, string[]? filterArchived = default, string[]? filterId = default, GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardLocalizations[]? fieldsGameCenterLeaderboardLocalizations = default, GameCenterDetails_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, int? limit = default, GameCenterDetails_gameCenterLeaderboards_getToManyRelatedInclude[]? include = default, int? limitGameCenterLeaderboardSets = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterReferenceName != null)
            uriBuilder.AddParameter("filter[referenceName]", string.Join(",", filterReferenceName));
        if (filterArchived != null)
            uriBuilder.AddParameter("filter[archived]", string.Join(",", filterArchived));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterLeaderboardLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardLocalizations]", string.Join(",", fieldsGameCenterLeaderboardLocalizations));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSetLocalizations
    {
        locale,
        name,
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    // /v1/gameCenterDetails/{id}/gameCenterLeaderboardSets
    public Task<GameCenterLeaderboardSetsResponse> GameCenterDetails_gameCenterLeaderboardSets_getToManyRelated(string id, string[]? filterReferenceName = default, string[]? filterId = default, GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSetLocalizations[]? fieldsGameCenterLeaderboardSetLocalizations = default, GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, int? limit = default, GameCenterDetails_gameCenterLeaderboardSets_getToManyRelatedInclude[]? include = default, int? limitLocalizations = default, int? limitGameCenterLeaderboards = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterReferenceName != null)
            uriBuilder.AddParameter("filter[referenceName]", string.Join(",", filterReferenceName));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboardSetLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetLocalizations]", string.Join(",", fieldsGameCenterLeaderboardSetLocalizations));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_leaderboardReleases_getToManyRelatedFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_leaderboardReleases_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_leaderboardReleases_getToManyRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_leaderboardReleases_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    // /v1/gameCenterDetails/{id}/leaderboardReleases
    public Task<GameCenterLeaderboardReleasesResponse> GameCenterDetails_leaderboardReleases_getToManyRelated(string id, string[]? filterLive = default, string[]? filterGameCenterLeaderboard = default, GameCenterDetails_leaderboardReleases_getToManyRelatedFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, GameCenterDetails_leaderboardReleases_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterDetails_leaderboardReleases_getToManyRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, int? limit = default, GameCenterDetails_leaderboardReleases_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/leaderboardReleases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLive != null)
            uriBuilder.AddParameter("filter[live]", string.Join(",", filterLive));
        if (filterGameCenterLeaderboard != null)
            uriBuilder.AddParameter("filter[gameCenterLeaderboard]", string.Join(",", filterGameCenterLeaderboard));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardReleasesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_leaderboardSetReleases_getToManyRelatedFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_leaderboardSetReleases_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_leaderboardSetReleases_getToManyRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_leaderboardSetReleases_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    // /v1/gameCenterDetails/{id}/leaderboardSetReleases
    public Task<GameCenterLeaderboardSetReleasesResponse> GameCenterDetails_leaderboardSetReleases_getToManyRelated(string id, string[]? filterLive = default, string[]? filterGameCenterLeaderboardSet = default, GameCenterDetails_leaderboardSetReleases_getToManyRelatedFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, GameCenterDetails_leaderboardSetReleases_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterDetails_leaderboardSetReleases_getToManyRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, int? limit = default, GameCenterDetails_leaderboardSetReleases_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/leaderboardSetReleases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLive != null)
            uriBuilder.AddParameter("filter[live]", string.Join(",", filterLive));
        if (filterGameCenterLeaderboardSet != null)
            uriBuilder.AddParameter("filter[gameCenterLeaderboardSet]", string.Join(",", filterGameCenterLeaderboardSet));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetReleasesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_classicMatchmakingRequests_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_classicMatchmakingRequests_getMetricsFilterResult
    {
        MATCHED,
        CANCELED,
        EXPIRED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_classicMatchmakingRequests_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
        averageSecondsInQueue,
        [EnumMember(Value = "-averageSecondsInQueue")]
        averageSecondsInQueueDescending,
        p50SecondsInQueue,
        [EnumMember(Value = "-p50SecondsInQueue")]
        p50SecondsInQueueDescending,
        p95SecondsInQueue,
        [EnumMember(Value = "-p95SecondsInQueue")]
        p95SecondsInQueueDescending,
    }

    // /v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests
    public Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetails_classicMatchmakingRequests_getMetrics(string id, GameCenterDetails_classicMatchmakingRequests_getMetricsGranularity granularity, string[]? groupBy = default, GameCenterDetails_classicMatchmakingRequests_getMetricsFilterResult? filterResult = default, GameCenterDetails_classicMatchmakingRequests_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (groupBy != null)
            uriBuilder.AddParameter("groupBy", string.Join(",", groupBy));
        if (filterResult.HasValue)
            uriBuilder.AddParameter("filter[result]", filterResult.Value.ToString());
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingAppRequestsV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_ruleBasedMatchmakingRequests_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_ruleBasedMatchmakingRequests_getMetricsFilterResult
    {
        MATCHED,
        CANCELED,
        EXPIRED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterDetails_ruleBasedMatchmakingRequests_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
        averageSecondsInQueue,
        [EnumMember(Value = "-averageSecondsInQueue")]
        averageSecondsInQueueDescending,
        p50SecondsInQueue,
        [EnumMember(Value = "-p50SecondsInQueue")]
        p50SecondsInQueueDescending,
        p95SecondsInQueue,
        [EnumMember(Value = "-p95SecondsInQueue")]
        p95SecondsInQueueDescending,
    }

    // /v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests
    public Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetails_ruleBasedMatchmakingRequests_getMetrics(string id, GameCenterDetails_ruleBasedMatchmakingRequests_getMetricsGranularity granularity, string[]? groupBy = default, GameCenterDetails_ruleBasedMatchmakingRequests_getMetricsFilterResult? filterResult = default, GameCenterDetails_ruleBasedMatchmakingRequests_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (groupBy != null)
            uriBuilder.AddParameter("groupBy", string.Join(",", groupBy));
        if (filterResult.HasValue)
            uriBuilder.AddParameter("filter[result]", filterResult.Value.ToString());
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingAppRequestsV1MetricResponse>(message, log);
    }

    // /v1/gameCenterDetails/{id}/relationships/gameCenterAchievements
    public Task<GameCenterDetailGameCenterAchievementsLinkagesResponse> GameCenterDetails_gameCenterAchievements_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterDetailGameCenterAchievementsLinkagesResponse>(message, log);
    }

    public class GameCenterDetails_gameCenterAchievements_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterDetails/{id}/relationships/gameCenterAchievements
    public Task GameCenterDetails_gameCenterAchievements_replaceToManyRelationship(string id, GameCenterDetailGameCenterAchievementsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards
    public Task<GameCenterDetailGameCenterLeaderboardsLinkagesResponse> GameCenterDetails_gameCenterLeaderboards_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterDetailGameCenterLeaderboardsLinkagesResponse>(message, log);
    }

    public class GameCenterDetails_gameCenterLeaderboards_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards
    public Task GameCenterDetails_gameCenterLeaderboards_replaceToManyRelationship(string id, GameCenterDetailGameCenterLeaderboardsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets
    public Task<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse> GameCenterDetails_gameCenterLeaderboardSets_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse>(message, log);
    }

    public class GameCenterDetails_gameCenterLeaderboardSets_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets
    public Task GameCenterDetails_gameCenterLeaderboardSets_replaceToManyRelationship(string id, GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterEnabledVersions_compatibleVersions_getToManyRelatedFilterPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterEnabledVersions_compatibleVersions_getToManyRelatedSort
    {
        versionString,
        [EnumMember(Value = "-versionString")]
        versionStringDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterEnabledVersions_compatibleVersions_getToManyRelatedFieldsGameCenterEnabledVersions
    {
        platform,
        versionString,
        iconAsset,
        compatibleVersions,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterEnabledVersions_compatibleVersions_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterEnabledVersions_compatibleVersions_getToManyRelatedInclude
    {
        compatibleVersions,
        app,
    }

    // /v1/gameCenterEnabledVersions/{id}/compatibleVersions
    [Obsolete]
    public Task<GameCenterEnabledVersionsResponse> GameCenterEnabledVersions_compatibleVersions_getToManyRelated(string id, GameCenterEnabledVersions_compatibleVersions_getToManyRelatedFilterPlatform[]? filterPlatform = default, string[]? filterVersionString = default, string[]? filterApp = default, string[]? filterId = default, GameCenterEnabledVersions_compatibleVersions_getToManyRelatedSort[]? sort = default, GameCenterEnabledVersions_compatibleVersions_getToManyRelatedFieldsGameCenterEnabledVersions[]? fieldsGameCenterEnabledVersions = default, GameCenterEnabledVersions_compatibleVersions_getToManyRelatedFieldsApps[]? fieldsApps = default, int? limit = default, GameCenterEnabledVersions_compatibleVersions_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterEnabledVersions/{id}/compatibleVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterVersionString != null)
            uriBuilder.AddParameter("filter[versionString]", string.Join(",", filterVersionString));
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsGameCenterEnabledVersions != null)
            uriBuilder.AddParameter("fields[gameCenterEnabledVersions]", string.Join(",", fieldsGameCenterEnabledVersions));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterEnabledVersionsResponse>(message, log);
    }

    // /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
    [Obsolete]
    public Task<GameCenterEnabledVersionCompatibleVersionsLinkagesResponse> GameCenterEnabledVersions_compatibleVersions_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterEnabledVersionCompatibleVersionsLinkagesResponse>(message, log);
    }

    public class GameCenterEnabledVersions_compatibleVersions_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterEnabledVersions";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
    [Obsolete]
    public Task GameCenterEnabledVersions_compatibleVersions_createToManyRelationship(string id, GameCenterEnabledVersionCompatibleVersionsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class GameCenterEnabledVersions_compatibleVersions_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterEnabledVersions";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
    [Obsolete]
    public Task GameCenterEnabledVersions_compatibleVersions_replaceToManyRelationship(string id, GameCenterEnabledVersionCompatibleVersionsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class GameCenterEnabledVersions_compatibleVersions_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterEnabledVersions";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
    [Obsolete]
    public Task GameCenterEnabledVersions_compatibleVersions_deleteToManyRelationship(string id, GameCenterEnabledVersionCompatibleVersionsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getCollectionFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getCollectionFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getCollectionFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getCollectionFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getCollectionFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getCollectionInclude
    {
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    // /v1/gameCenterGroups
    public Task<GameCenterGroupsResponse> GameCenterGroups_getCollection(string[]? filterGameCenterDetails = default, GameCenterGroups_getCollectionFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterGroups_getCollectionFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterGroups_getCollectionFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterGroups_getCollectionFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterGroups_getCollectionFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, int? limit = default, GameCenterGroups_getCollectionInclude[]? include = default, int? limitGameCenterAchievements = default, int? limitGameCenterDetails = default, int? limitGameCenterLeaderboardSets = default, int? limitGameCenterLeaderboards = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterGameCenterDetails != null)
            uriBuilder.AddParameter("filter[gameCenterDetails]", string.Join(",", filterGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterAchievements.HasValue)
            uriBuilder.AddParameter("limit[gameCenterAchievements]", limitGameCenterAchievements.Value.ToString());
        if (limitGameCenterDetails.HasValue)
            uriBuilder.AddParameter("limit[gameCenterDetails]", limitGameCenterDetails.Value.ToString());
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterGroupsResponse>(message, log);
    }

    // /v1/gameCenterGroups
    public Task<GameCenterGroupResponse> GameCenterGroups_createInstance(GameCenterGroupCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterGroupResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getInstanceFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getInstanceFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getInstanceFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getInstanceFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getInstanceFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_getInstanceInclude
    {
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    // /v1/gameCenterGroups/{id}
    public Task<GameCenterGroupResponse> GameCenterGroups_getInstance(string id, GameCenterGroups_getInstanceFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterGroups_getInstanceFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterGroups_getInstanceFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterGroups_getInstanceFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterGroups_getInstanceFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterGroups_getInstanceInclude[]? include = default, int? limitGameCenterAchievements = default, int? limitGameCenterDetails = default, int? limitGameCenterLeaderboardSets = default, int? limitGameCenterLeaderboards = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterAchievements.HasValue)
            uriBuilder.AddParameter("limit[gameCenterAchievements]", limitGameCenterAchievements.Value.ToString());
        if (limitGameCenterDetails.HasValue)
            uriBuilder.AddParameter("limit[gameCenterDetails]", limitGameCenterDetails.Value.ToString());
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterGroupResponse>(message, log);
    }

    // /v1/gameCenterGroups/{id}
    public Task<GameCenterGroupResponse> GameCenterGroups_updateInstance(string id, GameCenterGroupUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterGroupResponse>(message, log);
    }

    // /v1/gameCenterGroups/{id}
    public Task GameCenterGroups_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievementLocalizations
    {
        locale,
        name,
        beforeEarnedDescription,
        afterEarnedDescription,
        gameCenterAchievement,
        gameCenterAchievementImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterAchievements_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    // /v1/gameCenterGroups/{id}/gameCenterAchievements
    public Task<GameCenterAchievementsResponse> GameCenterGroups_gameCenterAchievements_getToManyRelated(string id, string[]? filterReferenceName = default, string[]? filterArchived = default, string[]? filterId = default, GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievementLocalizations[]? fieldsGameCenterAchievementLocalizations = default, GameCenterGroups_gameCenterAchievements_getToManyRelatedFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, int? limit = default, GameCenterGroups_gameCenterAchievements_getToManyRelatedInclude[]? include = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/gameCenterAchievements";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterReferenceName != null)
            uriBuilder.AddParameter("filter[referenceName]", string.Join(",", filterReferenceName));
        if (filterArchived != null)
            uriBuilder.AddParameter("filter[archived]", string.Join(",", filterArchived));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterAchievementLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementLocalizations]", string.Join(",", fieldsGameCenterAchievementLocalizations));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterAchievementsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterAppVersions
    {
        enabled,
        compatibilityVersions,
        appStoreVersion,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterAchievements
    {
        referenceName,
        vendorIdentifier,
        points,
        showBeforeEarned,
        repeatable,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupAchievement,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterAchievementReleases
    {
        live,
        gameCenterDetail,
        gameCenterAchievement,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterDetails_getToManyRelatedInclude
    {
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    // /v1/gameCenterGroups/{id}/gameCenterDetails
    public Task<GameCenterDetailsResponse> GameCenterGroups_gameCenterDetails_getToManyRelated(string id, string[]? filterGameCenterAppVersionsEnabled = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsApps[]? fieldsApps = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterAppVersions[]? fieldsGameCenterAppVersions = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterAchievements[]? fieldsGameCenterAchievements = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterAchievementReleases[]? fieldsGameCenterAchievementReleases = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, GameCenterGroups_gameCenterDetails_getToManyRelatedFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, int? limit = default, GameCenterGroups_gameCenterDetails_getToManyRelatedInclude[]? include = default, int? limitGameCenterAppVersions = default, int? limitGameCenterLeaderboards = default, int? limitGameCenterLeaderboardSets = default, int? limitGameCenterAchievements = default, int? limitAchievementReleases = default, int? limitLeaderboardReleases = default, int? limitLeaderboardSetReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/gameCenterDetails";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterGameCenterAppVersionsEnabled != null)
            uriBuilder.AddParameter("filter[gameCenterAppVersions.enabled]", string.Join(",", filterGameCenterAppVersionsEnabled));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsGameCenterAppVersions != null)
            uriBuilder.AddParameter("fields[gameCenterAppVersions]", string.Join(",", fieldsGameCenterAppVersions));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterAchievements != null)
            uriBuilder.AddParameter("fields[gameCenterAchievements]", string.Join(",", fieldsGameCenterAchievements));
        if (fieldsGameCenterAchievementReleases != null)
            uriBuilder.AddParameter("fields[gameCenterAchievementReleases]", string.Join(",", fieldsGameCenterAchievementReleases));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterAppVersions.HasValue)
            uriBuilder.AddParameter("limit[gameCenterAppVersions]", limitGameCenterAppVersions.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitGameCenterAchievements.HasValue)
            uriBuilder.AddParameter("limit[gameCenterAchievements]", limitGameCenterAchievements.Value.ToString());
        if (limitAchievementReleases.HasValue)
            uriBuilder.AddParameter("limit[achievementReleases]", limitAchievementReleases.Value.ToString());
        if (limitLeaderboardReleases.HasValue)
            uriBuilder.AddParameter("limit[leaderboardReleases]", limitLeaderboardReleases.Value.ToString());
        if (limitLeaderboardSetReleases.HasValue)
            uriBuilder.AddParameter("limit[leaderboardSetReleases]", limitLeaderboardSetReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterDetailsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardLocalizations
    {
        locale,
        name,
        formatterOverride,
        formatterSuffix,
        formatterSuffixSingular,
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboards_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    // /v1/gameCenterGroups/{id}/gameCenterLeaderboards
    public Task<GameCenterLeaderboardsResponse> GameCenterGroups_gameCenterLeaderboards_getToManyRelated(string id, string[]? filterReferenceName = default, string[]? filterArchived = default, string[]? filterId = default, GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardLocalizations[]? fieldsGameCenterLeaderboardLocalizations = default, GameCenterGroups_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, int? limit = default, GameCenterGroups_gameCenterLeaderboards_getToManyRelatedInclude[]? include = default, int? limitGameCenterLeaderboardSets = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterReferenceName != null)
            uriBuilder.AddParameter("filter[referenceName]", string.Join(",", filterReferenceName));
        if (filterArchived != null)
            uriBuilder.AddParameter("filter[archived]", string.Join(",", filterArchived));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterLeaderboardLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardLocalizations]", string.Join(",", fieldsGameCenterLeaderboardLocalizations));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSetLocalizations
    {
        locale,
        name,
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    // /v1/gameCenterGroups/{id}/gameCenterLeaderboardSets
    public Task<GameCenterLeaderboardSetsResponse> GameCenterGroups_gameCenterLeaderboardSets_getToManyRelated(string id, string[]? filterReferenceName = default, string[]? filterId = default, GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSetLocalizations[]? fieldsGameCenterLeaderboardSetLocalizations = default, GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, int? limit = default, GameCenterGroups_gameCenterLeaderboardSets_getToManyRelatedInclude[]? include = default, int? limitLocalizations = default, int? limitGameCenterLeaderboards = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterReferenceName != null)
            uriBuilder.AddParameter("filter[referenceName]", string.Join(",", filterReferenceName));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboardSetLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetLocalizations]", string.Join(",", fieldsGameCenterLeaderboardSetLocalizations));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetsResponse>(message, log);
    }

    // /v1/gameCenterGroups/{id}/relationships/gameCenterAchievements
    public Task<GameCenterGroupGameCenterAchievementsLinkagesResponse> GameCenterGroups_gameCenterAchievements_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterGroupGameCenterAchievementsLinkagesResponse>(message, log);
    }

    public class GameCenterGroups_gameCenterAchievements_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterAchievements";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterGroups/{id}/relationships/gameCenterAchievements
    public Task GameCenterGroups_gameCenterAchievements_replaceToManyRelationship(string id, GameCenterGroupGameCenterAchievementsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards
    public Task<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> GameCenterGroups_gameCenterLeaderboards_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>(message, log);
    }

    public class GameCenterGroups_gameCenterLeaderboards_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards
    public Task GameCenterGroups_gameCenterLeaderboards_replaceToManyRelationship(string id, GameCenterGroupGameCenterLeaderboardsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets
    public Task<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> GameCenterGroups_gameCenterLeaderboardSets_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>(message, log);
    }

    public class GameCenterGroups_gameCenterLeaderboardSets_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets
    public Task GameCenterGroups_gameCenterLeaderboardSets_replaceToManyRelationship(string id, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/gameCenterLeaderboardEntrySubmissions
    public Task<GameCenterLeaderboardEntrySubmissionResponse> GameCenterLeaderboardEntrySubmissions_createInstance(GameCenterLeaderboardEntrySubmissionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardEntrySubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardEntrySubmissionResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardImages
    public Task<GameCenterLeaderboardImageResponse> GameCenterLeaderboardImages_createInstance(GameCenterLeaderboardImageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardImages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardImageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardImages_getInstanceFieldsGameCenterLeaderboardImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterLeaderboardLocalization,
    }

    // /v1/gameCenterLeaderboardImages/{id}
    public Task<GameCenterLeaderboardImageResponse> GameCenterLeaderboardImages_getInstance(string id, GameCenterLeaderboardImages_getInstanceFieldsGameCenterLeaderboardImages[]? fieldsGameCenterLeaderboardImages = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardImages != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardImages]", string.Join(",", fieldsGameCenterLeaderboardImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardImageResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardImages/{id}
    public Task<GameCenterLeaderboardImageResponse> GameCenterLeaderboardImages_updateInstance(string id, GameCenterLeaderboardImageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardImageResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardImages/{id}
    public Task GameCenterLeaderboardImages_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/gameCenterLeaderboardLocalizations
    public Task<GameCenterLeaderboardLocalizationResponse> GameCenterLeaderboardLocalizations_createInstance(GameCenterLeaderboardLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardLocalizations_getInstanceFieldsGameCenterLeaderboardLocalizations
    {
        locale,
        name,
        formatterOverride,
        formatterSuffix,
        formatterSuffixSingular,
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardLocalizations_getInstanceFieldsGameCenterLeaderboardImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterLeaderboardLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardLocalizations_getInstanceInclude
    {
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    // /v1/gameCenterLeaderboardLocalizations/{id}
    public Task<GameCenterLeaderboardLocalizationResponse> GameCenterLeaderboardLocalizations_getInstance(string id, GameCenterLeaderboardLocalizations_getInstanceFieldsGameCenterLeaderboardLocalizations[]? fieldsGameCenterLeaderboardLocalizations = default, GameCenterLeaderboardLocalizations_getInstanceFieldsGameCenterLeaderboardImages[]? fieldsGameCenterLeaderboardImages = default, GameCenterLeaderboardLocalizations_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardLocalizations]", string.Join(",", fieldsGameCenterLeaderboardLocalizations));
        if (fieldsGameCenterLeaderboardImages != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardImages]", string.Join(",", fieldsGameCenterLeaderboardImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardLocalizationResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardLocalizations/{id}
    public Task<GameCenterLeaderboardLocalizationResponse> GameCenterLeaderboardLocalizations_updateInstance(string id, GameCenterLeaderboardLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardLocalizationResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardLocalizations/{id}
    public Task GameCenterLeaderboardLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardLocalizations_gameCenterLeaderboardImage_getToOneRelatedFieldsGameCenterLeaderboardImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterLeaderboardLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardLocalizations_gameCenterLeaderboardImage_getToOneRelatedFieldsGameCenterLeaderboardLocalizations
    {
        locale,
        name,
        formatterOverride,
        formatterSuffix,
        formatterSuffixSingular,
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    // /v1/gameCenterLeaderboardLocalizations/{id}/gameCenterLeaderboardImage
    public Task<GameCenterLeaderboardImageResponse> GameCenterLeaderboardLocalizations_gameCenterLeaderboardImage_getToOneRelated(string id, GameCenterLeaderboardLocalizations_gameCenterLeaderboardImage_getToOneRelatedFieldsGameCenterLeaderboardImages[]? fieldsGameCenterLeaderboardImages = default, GameCenterLeaderboardLocalizations_gameCenterLeaderboardImage_getToOneRelatedFieldsGameCenterLeaderboardLocalizations[]? fieldsGameCenterLeaderboardLocalizations = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardLocalizations/{id}/gameCenterLeaderboardImage";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardImages != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardImages]", string.Join(",", fieldsGameCenterLeaderboardImages));
        if (fieldsGameCenterLeaderboardLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardLocalizations]", string.Join(",", fieldsGameCenterLeaderboardLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardImageResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardReleases
    public Task<GameCenterLeaderboardReleaseResponse> GameCenterLeaderboardReleases_createInstance(GameCenterLeaderboardReleaseCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardReleases";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardReleaseResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardReleases_getInstanceFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardReleases_getInstanceInclude
    {
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    // /v1/gameCenterLeaderboardReleases/{id}
    public Task<GameCenterLeaderboardReleaseResponse> GameCenterLeaderboardReleases_getInstance(string id, GameCenterLeaderboardReleases_getInstanceFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, GameCenterLeaderboardReleases_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardReleases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardReleaseResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardReleases/{id}
    public Task GameCenterLeaderboardReleases_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardReleases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/gameCenterLeaderboards
    public Task<GameCenterLeaderboardResponse> GameCenterLeaderboards_createInstance(GameCenterLeaderboardCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboards";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_getInstanceFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_getInstanceFieldsGameCenterLeaderboardLocalizations
    {
        locale,
        name,
        formatterOverride,
        formatterSuffix,
        formatterSuffixSingular,
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_getInstanceFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_getInstanceInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    // /v1/gameCenterLeaderboards/{id}
    public Task<GameCenterLeaderboardResponse> GameCenterLeaderboards_getInstance(string id, GameCenterLeaderboards_getInstanceFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterLeaderboards_getInstanceFieldsGameCenterLeaderboardLocalizations[]? fieldsGameCenterLeaderboardLocalizations = default, GameCenterLeaderboards_getInstanceFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, GameCenterLeaderboards_getInstanceInclude[]? include = default, int? limitGameCenterLeaderboardSets = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboards/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardLocalizations]", string.Join(",", fieldsGameCenterLeaderboardLocalizations));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardResponse>(message, log);
    }

    // /v1/gameCenterLeaderboards/{id}
    public Task<GameCenterLeaderboardResponse> GameCenterLeaderboards_updateInstance(string id, GameCenterLeaderboardUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboards/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardResponse>(message, log);
    }

    // /v1/gameCenterLeaderboards/{id}
    public Task GameCenterLeaderboards_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboards/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardLocalizations
    {
        locale,
        name,
        formatterOverride,
        formatterSuffix,
        formatterSuffixSingular,
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_groupLeaderboard_getToOneRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    // /v1/gameCenterLeaderboards/{id}/groupLeaderboard
    [Obsolete]
    public Task<GameCenterLeaderboardResponse> GameCenterLeaderboards_groupLeaderboard_getToOneRelated(string id, GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardLocalizations[]? fieldsGameCenterLeaderboardLocalizations = default, GameCenterLeaderboards_groupLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, GameCenterLeaderboards_groupLeaderboard_getToOneRelatedInclude[]? include = default, int? limitGameCenterLeaderboardSets = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboards/{id}/groupLeaderboard";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterLeaderboardLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardLocalizations]", string.Join(",", fieldsGameCenterLeaderboardLocalizations));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_localizations_getToManyRelatedFieldsGameCenterLeaderboardLocalizations
    {
        locale,
        name,
        formatterOverride,
        formatterSuffix,
        formatterSuffixSingular,
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_localizations_getToManyRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_localizations_getToManyRelatedFieldsGameCenterLeaderboardImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterLeaderboardLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_localizations_getToManyRelatedInclude
    {
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    // /v1/gameCenterLeaderboards/{id}/localizations
    public Task<GameCenterLeaderboardLocalizationsResponse> GameCenterLeaderboards_localizations_getToManyRelated(string id, GameCenterLeaderboards_localizations_getToManyRelatedFieldsGameCenterLeaderboardLocalizations[]? fieldsGameCenterLeaderboardLocalizations = default, GameCenterLeaderboards_localizations_getToManyRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterLeaderboards_localizations_getToManyRelatedFieldsGameCenterLeaderboardImages[]? fieldsGameCenterLeaderboardImages = default, int? limit = default, GameCenterLeaderboards_localizations_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboards/{id}/localizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardLocalizations]", string.Join(",", fieldsGameCenterLeaderboardLocalizations));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardImages != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardImages]", string.Join(",", fieldsGameCenterLeaderboardImages));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardLocalizationsResponse>(message, log);
    }

    // /v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard
    [Obsolete]
    public Task<GameCenterLeaderboardGroupLeaderboardLinkageResponse> GameCenterLeaderboards_groupLeaderboard_getToOneRelationship(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardGroupLeaderboardLinkageResponse>(message, log);
    }

    public class GameCenterLeaderboards_groupLeaderboard_updateToOneRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    // /v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard
    [Obsolete]
    public Task GameCenterLeaderboards_groupLeaderboard_updateToOneRelationship(string id, GameCenterLeaderboardGroupLeaderboardLinkageRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_releases_getToManyRelatedFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_releases_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_releases_getToManyRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboards_releases_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    // /v1/gameCenterLeaderboards/{id}/releases
    public Task<GameCenterLeaderboardReleasesResponse> GameCenterLeaderboards_releases_getToManyRelated(string id, string[]? filterLive = default, string[]? filterGameCenterDetail = default, GameCenterLeaderboards_releases_getToManyRelatedFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, GameCenterLeaderboards_releases_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterLeaderboards_releases_getToManyRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, int? limit = default, GameCenterLeaderboards_releases_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboards/{id}/releases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLive != null)
            uriBuilder.AddParameter("filter[live]", string.Join(",", filterLive));
        if (filterGameCenterDetail != null)
            uriBuilder.AddParameter("filter[gameCenterDetail]", string.Join(",", filterGameCenterDetail));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardReleasesResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetImages
    public Task<GameCenterLeaderboardSetImageResponse> GameCenterLeaderboardSetImages_createInstance(GameCenterLeaderboardSetImageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetImages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardSetImageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetImages_getInstanceFieldsGameCenterLeaderboardSetImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterLeaderboardSetLocalization,
    }

    // /v1/gameCenterLeaderboardSetImages/{id}
    public Task<GameCenterLeaderboardSetImageResponse> GameCenterLeaderboardSetImages_getInstance(string id, GameCenterLeaderboardSetImages_getInstanceFieldsGameCenterLeaderboardSetImages[]? fieldsGameCenterLeaderboardSetImages = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardSetImages != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetImages]", string.Join(",", fieldsGameCenterLeaderboardSetImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetImageResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetImages/{id}
    public Task<GameCenterLeaderboardSetImageResponse> GameCenterLeaderboardSetImages_updateInstance(string id, GameCenterLeaderboardSetImageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardSetImageResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetImages/{id}
    public Task GameCenterLeaderboardSetImages_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/gameCenterLeaderboardSetLocalizations
    public Task<GameCenterLeaderboardSetLocalizationResponse> GameCenterLeaderboardSetLocalizations_createInstance(GameCenterLeaderboardSetLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardSetLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetLocalizations_getInstanceFieldsGameCenterLeaderboardSetLocalizations
    {
        locale,
        name,
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetLocalizations_getInstanceFieldsGameCenterLeaderboardSetImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterLeaderboardSetLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetLocalizations_getInstanceInclude
    {
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    // /v1/gameCenterLeaderboardSetLocalizations/{id}
    public Task<GameCenterLeaderboardSetLocalizationResponse> GameCenterLeaderboardSetLocalizations_getInstance(string id, GameCenterLeaderboardSetLocalizations_getInstanceFieldsGameCenterLeaderboardSetLocalizations[]? fieldsGameCenterLeaderboardSetLocalizations = default, GameCenterLeaderboardSetLocalizations_getInstanceFieldsGameCenterLeaderboardSetImages[]? fieldsGameCenterLeaderboardSetImages = default, GameCenterLeaderboardSetLocalizations_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardSetLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetLocalizations]", string.Join(",", fieldsGameCenterLeaderboardSetLocalizations));
        if (fieldsGameCenterLeaderboardSetImages != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetImages]", string.Join(",", fieldsGameCenterLeaderboardSetImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetLocalizationResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetLocalizations/{id}
    public Task<GameCenterLeaderboardSetLocalizationResponse> GameCenterLeaderboardSetLocalizations_updateInstance(string id, GameCenterLeaderboardSetLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardSetLocalizationResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetLocalizations/{id}
    public Task GameCenterLeaderboardSetLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetLocalizations_gameCenterLeaderboardSetImage_getToOneRelatedFieldsGameCenterLeaderboardSetImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterLeaderboardSetLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetLocalizations_gameCenterLeaderboardSetImage_getToOneRelatedFieldsGameCenterLeaderboardSetLocalizations
    {
        locale,
        name,
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    // /v1/gameCenterLeaderboardSetLocalizations/{id}/gameCenterLeaderboardSetImage
    public Task<GameCenterLeaderboardSetImageResponse> GameCenterLeaderboardSetLocalizations_gameCenterLeaderboardSetImage_getToOneRelated(string id, GameCenterLeaderboardSetLocalizations_gameCenterLeaderboardSetImage_getToOneRelatedFieldsGameCenterLeaderboardSetImages[]? fieldsGameCenterLeaderboardSetImages = default, GameCenterLeaderboardSetLocalizations_gameCenterLeaderboardSetImage_getToOneRelatedFieldsGameCenterLeaderboardSetLocalizations[]? fieldsGameCenterLeaderboardSetLocalizations = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetLocalizations/{id}/gameCenterLeaderboardSetImage";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardSetImages != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetImages]", string.Join(",", fieldsGameCenterLeaderboardSetImages));
        if (fieldsGameCenterLeaderboardSetLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetLocalizations]", string.Join(",", fieldsGameCenterLeaderboardSetLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetImageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_getCollectionFieldsGameCenterLeaderboardSetMemberLocalizations
    {
        name,
        locale,
        gameCenterLeaderboardSet,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_getCollectionFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_getCollectionFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_getCollectionInclude
    {
        gameCenterLeaderboardSet,
        gameCenterLeaderboard,
    }

    // /v1/gameCenterLeaderboardSetMemberLocalizations
    public Task<GameCenterLeaderboardSetMemberLocalizationsResponse> GameCenterLeaderboardSetMemberLocalizations_getCollection(string[] filterGameCenterLeaderboardSet, string[] filterGameCenterLeaderboard, GameCenterLeaderboardSetMemberLocalizations_getCollectionFieldsGameCenterLeaderboardSetMemberLocalizations[]? fieldsGameCenterLeaderboardSetMemberLocalizations = default, GameCenterLeaderboardSetMemberLocalizations_getCollectionFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterLeaderboardSetMemberLocalizations_getCollectionFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, int? limit = default, GameCenterLeaderboardSetMemberLocalizations_getCollectionInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetMemberLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterGameCenterLeaderboardSet != null)
            uriBuilder.AddParameter("filter[gameCenterLeaderboardSet]", string.Join(",", filterGameCenterLeaderboardSet));
        if (filterGameCenterLeaderboard != null)
            uriBuilder.AddParameter("filter[gameCenterLeaderboard]", string.Join(",", filterGameCenterLeaderboard));
        if (fieldsGameCenterLeaderboardSetMemberLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetMemberLocalizations]", string.Join(",", fieldsGameCenterLeaderboardSetMemberLocalizations));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetMemberLocalizationsResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetMemberLocalizations
    public Task<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizations_createInstance(GameCenterLeaderboardSetMemberLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetMemberLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardSetMemberLocalizationResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetMemberLocalizations/{id}
    public Task<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizations_updateInstance(string id, GameCenterLeaderboardSetMemberLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetMemberLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardSetMemberLocalizationResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetMemberLocalizations/{id}
    public Task GameCenterLeaderboardSetMemberLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetMemberLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardLocalizations
    {
        locale,
        name,
        formatterOverride,
        formatterSuffix,
        formatterSuffixSingular,
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    // /v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboard
    public Task<GameCenterLeaderboardResponse> GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelated(string id, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardLocalizations[]? fieldsGameCenterLeaderboardLocalizations = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboard_getToOneRelatedInclude[]? include = default, int? limitGameCenterLeaderboardSets = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboard";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterLeaderboardLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardLocalizations]", string.Join(",", fieldsGameCenterLeaderboardLocalizations));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSetLocalizations
    {
        locale,
        name,
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    // /v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboardSet
    public Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelated(string id, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSetLocalizations[]? fieldsGameCenterLeaderboardSetLocalizations = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, GameCenterLeaderboardSetMemberLocalizations_gameCenterLeaderboardSet_getToOneRelatedInclude[]? include = default, int? limitLocalizations = default, int? limitGameCenterLeaderboards = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboardSet";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboardSetLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetLocalizations]", string.Join(",", fieldsGameCenterLeaderboardSetLocalizations));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetReleases
    public Task<GameCenterLeaderboardSetReleaseResponse> GameCenterLeaderboardSetReleases_createInstance(GameCenterLeaderboardSetReleaseCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetReleases";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardSetReleaseResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetReleases_getInstanceFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSetReleases_getInstanceInclude
    {
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    // /v1/gameCenterLeaderboardSetReleases/{id}
    public Task<GameCenterLeaderboardSetReleaseResponse> GameCenterLeaderboardSetReleases_getInstance(string id, GameCenterLeaderboardSetReleases_getInstanceFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, GameCenterLeaderboardSetReleases_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetReleases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetReleaseResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSetReleases/{id}
    public Task GameCenterLeaderboardSetReleases_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSetReleases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/gameCenterLeaderboardSets
    public Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSets_createInstance(GameCenterLeaderboardSetCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardSetResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_getInstanceFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_getInstanceFieldsGameCenterLeaderboardSetLocalizations
    {
        locale,
        name,
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_getInstanceFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_getInstanceFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_getInstanceInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    // /v1/gameCenterLeaderboardSets/{id}
    public Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSets_getInstance(string id, GameCenterLeaderboardSets_getInstanceFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterLeaderboardSets_getInstanceFieldsGameCenterLeaderboardSetLocalizations[]? fieldsGameCenterLeaderboardSetLocalizations = default, GameCenterLeaderboardSets_getInstanceFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterLeaderboardSets_getInstanceFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, GameCenterLeaderboardSets_getInstanceInclude[]? include = default, int? limitGameCenterLeaderboards = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterLeaderboardSetLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetLocalizations]", string.Join(",", fieldsGameCenterLeaderboardSetLocalizations));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSets/{id}
    public Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSets_updateInstance(string id, GameCenterLeaderboardSetUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterLeaderboardSetResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSets/{id}
    public Task GameCenterLeaderboardSets_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardLocalizations
    {
        locale,
        name,
        formatterOverride,
        formatterSuffix,
        formatterSuffixSingular,
        gameCenterLeaderboard,
        gameCenterLeaderboardImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboard,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    // /v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards
    public Task<GameCenterLeaderboardsResponse> GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelated(string id, string[]? filterReferenceName = default, string[]? filterArchived = default, string[]? filterId = default, GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardLocalizations[]? fieldsGameCenterLeaderboardLocalizations = default, GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedFieldsGameCenterLeaderboardReleases[]? fieldsGameCenterLeaderboardReleases = default, int? limit = default, GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelatedInclude[]? include = default, int? limitGameCenterLeaderboardSets = default, int? limitLocalizations = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterReferenceName != null)
            uriBuilder.AddParameter("filter[referenceName]", string.Join(",", filterReferenceName));
        if (filterArchived != null)
            uriBuilder.AddParameter("filter[archived]", string.Join(",", filterArchived));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterLeaderboardLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardLocalizations]", string.Join(",", fieldsGameCenterLeaderboardLocalizations));
        if (fieldsGameCenterLeaderboardReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardReleases]", string.Join(",", fieldsGameCenterLeaderboardReleases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitGameCenterLeaderboardSets.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets.Value.ToString());
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterGroups
    {
        referenceName,
        gameCenterDetails,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSetLocalizations
    {
        locale,
        name,
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboards
    {
        defaultFormatter,
        referenceName,
        vendorIdentifier,
        submissionType,
        scoreSortType,
        scoreRangeStart,
        scoreRangeEnd,
        recurrenceStartDate,
        recurrenceDuration,
        recurrenceRule,
        archived,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboard,
        gameCenterLeaderboardSets,
        localizations,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedInclude
    {
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    // /v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet
    [Obsolete]
    public Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelated(string id, GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterGroups[]? fieldsGameCenterGroups = default, GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSetLocalizations[]? fieldsGameCenterLeaderboardSetLocalizations = default, GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboards[]? fieldsGameCenterLeaderboards = default, GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelatedInclude[]? include = default, int? limitLocalizations = default, int? limitGameCenterLeaderboards = default, int? limitReleases = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterGroups != null)
            uriBuilder.AddParameter("fields[gameCenterGroups]", string.Join(",", fieldsGameCenterGroups));
        if (fieldsGameCenterLeaderboardSetLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetLocalizations]", string.Join(",", fieldsGameCenterLeaderboardSetLocalizations));
        if (fieldsGameCenterLeaderboards != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboards]", string.Join(",", fieldsGameCenterLeaderboards));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitLocalizations.HasValue)
            uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
        if (limitGameCenterLeaderboards.HasValue)
            uriBuilder.AddParameter("limit[gameCenterLeaderboards]", limitGameCenterLeaderboards.Value.ToString());
        if (limitReleases.HasValue)
            uriBuilder.AddParameter("limit[releases]", limitReleases.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_localizations_getToManyRelatedFieldsGameCenterLeaderboardSetLocalizations
    {
        locale,
        name,
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_localizations_getToManyRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_localizations_getToManyRelatedFieldsGameCenterLeaderboardSetImages
    {
        fileSize,
        fileName,
        imageAsset,
        uploadOperations,
        assetDeliveryState,
        gameCenterLeaderboardSetLocalization,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_localizations_getToManyRelatedInclude
    {
        gameCenterLeaderboardSet,
        gameCenterLeaderboardSetImage,
    }

    // /v1/gameCenterLeaderboardSets/{id}/localizations
    public Task<GameCenterLeaderboardSetLocalizationsResponse> GameCenterLeaderboardSets_localizations_getToManyRelated(string id, GameCenterLeaderboardSets_localizations_getToManyRelatedFieldsGameCenterLeaderboardSetLocalizations[]? fieldsGameCenterLeaderboardSetLocalizations = default, GameCenterLeaderboardSets_localizations_getToManyRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, GameCenterLeaderboardSets_localizations_getToManyRelatedFieldsGameCenterLeaderboardSetImages[]? fieldsGameCenterLeaderboardSetImages = default, int? limit = default, GameCenterLeaderboardSets_localizations_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/localizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterLeaderboardSetLocalizations != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetLocalizations]", string.Join(",", fieldsGameCenterLeaderboardSetLocalizations));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (fieldsGameCenterLeaderboardSetImages != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetImages]", string.Join(",", fieldsGameCenterLeaderboardSetImages));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetLocalizationsResponse>(message, log);
    }

    // /v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards
    public Task<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse> GameCenterLeaderboardSets_gameCenterLeaderboards_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse>(message, log);
    }

    public class GameCenterLeaderboardSets_gameCenterLeaderboards_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards
    public Task GameCenterLeaderboardSets_gameCenterLeaderboards_createToManyRelationship(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class GameCenterLeaderboardSets_gameCenterLeaderboards_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards
    public Task GameCenterLeaderboardSets_gameCenterLeaderboards_replaceToManyRelationship(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class GameCenterLeaderboardSets_gameCenterLeaderboards_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboards";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards
    public Task GameCenterLeaderboardSets_gameCenterLeaderboards_deleteToManyRelationship(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet
    [Obsolete]
    public Task<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse> GameCenterLeaderboardSets_groupLeaderboardSet_getToOneRelationship(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse>(message, log);
    }

    public class GameCenterLeaderboardSets_groupLeaderboardSet_updateToOneRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "gameCenterLeaderboardSets";
            public string @id { get; set; } = "";
        }

        public Data @data { get; set; } = new ();
    }

    // /v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet
    [Obsolete]
    public Task GameCenterLeaderboardSets_groupLeaderboardSet_updateToOneRelationship(string id, GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_releases_getToManyRelatedFieldsGameCenterLeaderboardSetReleases
    {
        live,
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_releases_getToManyRelatedFieldsGameCenterDetails
    {
        arcadeEnabled,
        challengeEnabled,
        app,
        gameCenterAppVersions,
        gameCenterGroup,
        gameCenterLeaderboards,
        gameCenterLeaderboardSets,
        gameCenterAchievements,
        defaultLeaderboard,
        defaultGroupLeaderboard,
        achievementReleases,
        leaderboardReleases,
        leaderboardSetReleases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_releases_getToManyRelatedFieldsGameCenterLeaderboardSets
    {
        referenceName,
        vendorIdentifier,
        gameCenterDetail,
        gameCenterGroup,
        groupLeaderboardSet,
        localizations,
        gameCenterLeaderboards,
        releases,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterLeaderboardSets_releases_getToManyRelatedInclude
    {
        gameCenterDetail,
        gameCenterLeaderboardSet,
    }

    // /v1/gameCenterLeaderboardSets/{id}/releases
    public Task<GameCenterLeaderboardSetReleasesResponse> GameCenterLeaderboardSets_releases_getToManyRelated(string id, string[]? filterLive = default, string[]? filterGameCenterDetail = default, GameCenterLeaderboardSets_releases_getToManyRelatedFieldsGameCenterLeaderboardSetReleases[]? fieldsGameCenterLeaderboardSetReleases = default, GameCenterLeaderboardSets_releases_getToManyRelatedFieldsGameCenterDetails[]? fieldsGameCenterDetails = default, GameCenterLeaderboardSets_releases_getToManyRelatedFieldsGameCenterLeaderboardSets[]? fieldsGameCenterLeaderboardSets = default, int? limit = default, GameCenterLeaderboardSets_releases_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterLeaderboardSets/{id}/releases";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterLive != null)
            uriBuilder.AddParameter("filter[live]", string.Join(",", filterLive));
        if (filterGameCenterDetail != null)
            uriBuilder.AddParameter("filter[gameCenterDetail]", string.Join(",", filterGameCenterDetail));
        if (fieldsGameCenterLeaderboardSetReleases != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSetReleases]", string.Join(",", fieldsGameCenterLeaderboardSetReleases));
        if (fieldsGameCenterDetails != null)
            uriBuilder.AddParameter("fields[gameCenterDetails]", string.Join(",", fieldsGameCenterDetails));
        if (fieldsGameCenterLeaderboardSets != null)
            uriBuilder.AddParameter("fields[gameCenterLeaderboardSets]", string.Join(",", fieldsGameCenterLeaderboardSets));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterLeaderboardSetReleasesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_getCollectionFieldsGameCenterMatchmakingQueues
    {
        referenceName,
        classicMatchmakingBundleIds,
        ruleSet,
        experimentRuleSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_getCollectionInclude
    {
        ruleSet,
        experimentRuleSet,
    }

    // /v1/gameCenterMatchmakingQueues
    public Task<GameCenterMatchmakingQueuesResponse> GameCenterMatchmakingQueues_getCollection(GameCenterMatchmakingQueues_getCollectionFieldsGameCenterMatchmakingQueues[]? fieldsGameCenterMatchmakingQueues = default, int? limit = default, GameCenterMatchmakingQueues_getCollectionInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterMatchmakingQueues != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingQueues]", string.Join(",", fieldsGameCenterMatchmakingQueues));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingQueuesResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingQueues
    public Task<GameCenterMatchmakingQueueResponse> GameCenterMatchmakingQueues_createInstance(GameCenterMatchmakingQueueCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterMatchmakingQueueResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_getInstanceFieldsGameCenterMatchmakingQueues
    {
        referenceName,
        classicMatchmakingBundleIds,
        ruleSet,
        experimentRuleSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_getInstanceInclude
    {
        ruleSet,
        experimentRuleSet,
    }

    // /v1/gameCenterMatchmakingQueues/{id}
    public Task<GameCenterMatchmakingQueueResponse> GameCenterMatchmakingQueues_getInstance(string id, GameCenterMatchmakingQueues_getInstanceFieldsGameCenterMatchmakingQueues[]? fieldsGameCenterMatchmakingQueues = default, GameCenterMatchmakingQueues_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterMatchmakingQueues != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingQueues]", string.Join(",", fieldsGameCenterMatchmakingQueues));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingQueueResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingQueues/{id}
    public Task<GameCenterMatchmakingQueueResponse> GameCenterMatchmakingQueues_updateInstance(string id, GameCenterMatchmakingQueueUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterMatchmakingQueueResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingQueues/{id}
    public Task GameCenterMatchmakingQueues_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_experimentMatchmakingQueueSizes_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_experimentMatchmakingQueueSizes_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
        averageNumberOfRequests,
        [EnumMember(Value = "-averageNumberOfRequests")]
        averageNumberOfRequestsDescending,
        p50NumberOfRequests,
        [EnumMember(Value = "-p50NumberOfRequests")]
        p50NumberOfRequestsDescending,
        p95NumberOfRequests,
        [EnumMember(Value = "-p95NumberOfRequests")]
        p95NumberOfRequestsDescending,
    }

    // /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes
    public Task<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueues_experimentMatchmakingQueueSizes_getMetrics(string id, GameCenterMatchmakingQueues_experimentMatchmakingQueueSizes_getMetricsGranularity granularity, GameCenterMatchmakingQueues_experimentMatchmakingQueueSizes_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingQueueSizesV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_experimentMatchmakingRequests_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_experimentMatchmakingRequests_getMetricsGroupBy
    {
        result,
        gameCenterDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_experimentMatchmakingRequests_getMetricsFilterResult
    {
        MATCHED,
        CANCELED,
        EXPIRED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_experimentMatchmakingRequests_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
        averageSecondsInQueue,
        [EnumMember(Value = "-averageSecondsInQueue")]
        averageSecondsInQueueDescending,
        p50SecondsInQueue,
        [EnumMember(Value = "-p50SecondsInQueue")]
        p50SecondsInQueueDescending,
        p95SecondsInQueue,
        [EnumMember(Value = "-p95SecondsInQueue")]
        p95SecondsInQueueDescending,
    }

    // /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests
    public Task<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueues_experimentMatchmakingRequests_getMetrics(string id, GameCenterMatchmakingQueues_experimentMatchmakingRequests_getMetricsGranularity granularity, GameCenterMatchmakingQueues_experimentMatchmakingRequests_getMetricsGroupBy[]? groupBy = default, GameCenterMatchmakingQueues_experimentMatchmakingRequests_getMetricsFilterResult? filterResult = default, string? filterGameCenterDetail = default, GameCenterMatchmakingQueues_experimentMatchmakingRequests_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (groupBy != null)
            uriBuilder.AddParameter("groupBy", string.Join(",", groupBy));
        if (filterResult.HasValue)
            uriBuilder.AddParameter("filter[result]", filterResult.Value.ToString());
        if (filterGameCenterDetail != null)
            uriBuilder.AddParameter("filter[gameCenterDetail]", filterGameCenterDetail);
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingQueueRequestsV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_matchmakingQueueSizes_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_matchmakingQueueSizes_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
        averageNumberOfRequests,
        [EnumMember(Value = "-averageNumberOfRequests")]
        averageNumberOfRequestsDescending,
        p50NumberOfRequests,
        [EnumMember(Value = "-p50NumberOfRequests")]
        p50NumberOfRequestsDescending,
        p95NumberOfRequests,
        [EnumMember(Value = "-p95NumberOfRequests")]
        p95NumberOfRequestsDescending,
    }

    // /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes
    public Task<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueues_matchmakingQueueSizes_getMetrics(string id, GameCenterMatchmakingQueues_matchmakingQueueSizes_getMetricsGranularity granularity, GameCenterMatchmakingQueues_matchmakingQueueSizes_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingQueueSizesV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_matchmakingRequests_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_matchmakingRequests_getMetricsGroupBy
    {
        result,
        gameCenterDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_matchmakingRequests_getMetricsFilterResult
    {
        MATCHED,
        CANCELED,
        EXPIRED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_matchmakingRequests_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
        averageSecondsInQueue,
        [EnumMember(Value = "-averageSecondsInQueue")]
        averageSecondsInQueueDescending,
        p50SecondsInQueue,
        [EnumMember(Value = "-p50SecondsInQueue")]
        p50SecondsInQueueDescending,
        p95SecondsInQueue,
        [EnumMember(Value = "-p95SecondsInQueue")]
        p95SecondsInQueueDescending,
    }

    // /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests
    public Task<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueues_matchmakingRequests_getMetrics(string id, GameCenterMatchmakingQueues_matchmakingRequests_getMetricsGranularity granularity, GameCenterMatchmakingQueues_matchmakingRequests_getMetricsGroupBy[]? groupBy = default, GameCenterMatchmakingQueues_matchmakingRequests_getMetricsFilterResult? filterResult = default, string? filterGameCenterDetail = default, GameCenterMatchmakingQueues_matchmakingRequests_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (groupBy != null)
            uriBuilder.AddParameter("groupBy", string.Join(",", groupBy));
        if (filterResult.HasValue)
            uriBuilder.AddParameter("filter[result]", filterResult.Value.ToString());
        if (filterGameCenterDetail != null)
            uriBuilder.AddParameter("filter[gameCenterDetail]", filterGameCenterDetail);
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingQueueRequestsV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_matchmakingSessions_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingQueues_matchmakingSessions_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
        averagePlayerCount,
        [EnumMember(Value = "-averagePlayerCount")]
        averagePlayerCountDescending,
        p50PlayerCount,
        [EnumMember(Value = "-p50PlayerCount")]
        p50PlayerCountDescending,
        p95PlayerCount,
        [EnumMember(Value = "-p95PlayerCount")]
        p95PlayerCountDescending,
    }

    // /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions
    public Task<GameCenterMatchmakingSessionsV1MetricResponse> GameCenterMatchmakingQueues_matchmakingSessions_getMetrics(string id, GameCenterMatchmakingQueues_matchmakingSessions_getMetricsGranularity granularity, GameCenterMatchmakingQueues_matchmakingSessions_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingSessionsV1MetricResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingRules
    public Task<GameCenterMatchmakingRuleResponse> GameCenterMatchmakingRules_createInstance(GameCenterMatchmakingRuleCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRules";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterMatchmakingRuleResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingRules/{id}
    public Task<GameCenterMatchmakingRuleResponse> GameCenterMatchmakingRules_updateInstance(string id, GameCenterMatchmakingRuleUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRules/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterMatchmakingRuleResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingRules/{id}
    public Task GameCenterMatchmakingRules_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRules/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRules_matchmakingBooleanRuleResults_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRules_matchmakingBooleanRuleResults_getMetricsGroupBy
    {
        result,
        gameCenterMatchmakingQueue,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRules_matchmakingBooleanRuleResults_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
    }

    // /v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults
    public Task<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> GameCenterMatchmakingRules_matchmakingBooleanRuleResults_getMetrics(string id, GameCenterMatchmakingRules_matchmakingBooleanRuleResults_getMetricsGranularity granularity, GameCenterMatchmakingRules_matchmakingBooleanRuleResults_getMetricsGroupBy[]? groupBy = default, string? filterResult = default, string? filterGameCenterMatchmakingQueue = default, GameCenterMatchmakingRules_matchmakingBooleanRuleResults_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (groupBy != null)
            uriBuilder.AddParameter("groupBy", string.Join(",", groupBy));
        if (filterResult != null)
            uriBuilder.AddParameter("filter[result]", filterResult);
        if (filterGameCenterMatchmakingQueue != null)
            uriBuilder.AddParameter("filter[gameCenterMatchmakingQueue]", filterGameCenterMatchmakingQueue);
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRules_matchmakingNumberRuleResults_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRules_matchmakingNumberRuleResults_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
        averageResult,
        [EnumMember(Value = "-averageResult")]
        averageResultDescending,
        p50Result,
        [EnumMember(Value = "-p50Result")]
        p50ResultDescending,
        p95Result,
        [EnumMember(Value = "-p95Result")]
        p95ResultDescending,
    }

    // /v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults
    public Task<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> GameCenterMatchmakingRules_matchmakingNumberRuleResults_getMetrics(string id, GameCenterMatchmakingRules_matchmakingNumberRuleResults_getMetricsGranularity granularity, string[]? groupBy = default, string? filterGameCenterMatchmakingQueue = default, GameCenterMatchmakingRules_matchmakingNumberRuleResults_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (groupBy != null)
            uriBuilder.AddParameter("groupBy", string.Join(",", groupBy));
        if (filterGameCenterMatchmakingQueue != null)
            uriBuilder.AddParameter("filter[gameCenterMatchmakingQueue]", filterGameCenterMatchmakingQueue);
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRules_matchmakingRuleErrors_getMetricsGranularity
    {
        P1D,
        PT1H,
        PT15M,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRules_matchmakingRuleErrors_getMetricsSort
    {
        count,
        [EnumMember(Value = "-count")]
        countDescending,
    }

    // /v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors
    public Task<GameCenterMatchmakingRuleErrorsV1MetricResponse> GameCenterMatchmakingRules_matchmakingRuleErrors_getMetrics(string id, GameCenterMatchmakingRules_matchmakingRuleErrors_getMetricsGranularity granularity, string[]? groupBy = default, string? filterGameCenterMatchmakingQueue = default, GameCenterMatchmakingRules_matchmakingRuleErrors_getMetricsSort[]? sort = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
uriBuilder.AddParameter("granularity", granularity.ToString());
        if (groupBy != null)
            uriBuilder.AddParameter("groupBy", string.Join(",", groupBy));
        if (filterGameCenterMatchmakingQueue != null)
            uriBuilder.AddParameter("filter[gameCenterMatchmakingQueue]", filterGameCenterMatchmakingQueue);
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingRuleErrorsV1MetricResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getCollectionFieldsGameCenterMatchmakingRuleSets
    {
        referenceName,
        ruleLanguageVersion,
        minPlayers,
        maxPlayers,
        teams,
        rules,
        matchmakingQueues,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getCollectionFieldsGameCenterMatchmakingTeams
    {
        referenceName,
        minPlayers,
        maxPlayers,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getCollectionFieldsGameCenterMatchmakingRules
    {
        referenceName,
        description,
        type,
        expression,
        weight,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getCollectionFieldsGameCenterMatchmakingQueues
    {
        referenceName,
        classicMatchmakingBundleIds,
        ruleSet,
        experimentRuleSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getCollectionInclude
    {
        teams,
        rules,
        matchmakingQueues,
    }

    // /v1/gameCenterMatchmakingRuleSets
    public Task<GameCenterMatchmakingRuleSetsResponse> GameCenterMatchmakingRuleSets_getCollection(GameCenterMatchmakingRuleSets_getCollectionFieldsGameCenterMatchmakingRuleSets[]? fieldsGameCenterMatchmakingRuleSets = default, GameCenterMatchmakingRuleSets_getCollectionFieldsGameCenterMatchmakingTeams[]? fieldsGameCenterMatchmakingTeams = default, GameCenterMatchmakingRuleSets_getCollectionFieldsGameCenterMatchmakingRules[]? fieldsGameCenterMatchmakingRules = default, GameCenterMatchmakingRuleSets_getCollectionFieldsGameCenterMatchmakingQueues[]? fieldsGameCenterMatchmakingQueues = default, int? limit = default, GameCenterMatchmakingRuleSets_getCollectionInclude[]? include = default, int? limitMatchmakingQueues = default, int? limitRules = default, int? limitTeams = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRuleSets";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterMatchmakingRuleSets != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingRuleSets]", string.Join(",", fieldsGameCenterMatchmakingRuleSets));
        if (fieldsGameCenterMatchmakingTeams != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingTeams]", string.Join(",", fieldsGameCenterMatchmakingTeams));
        if (fieldsGameCenterMatchmakingRules != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingRules]", string.Join(",", fieldsGameCenterMatchmakingRules));
        if (fieldsGameCenterMatchmakingQueues != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingQueues]", string.Join(",", fieldsGameCenterMatchmakingQueues));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitMatchmakingQueues.HasValue)
            uriBuilder.AddParameter("limit[matchmakingQueues]", limitMatchmakingQueues.Value.ToString());
        if (limitRules.HasValue)
            uriBuilder.AddParameter("limit[rules]", limitRules.Value.ToString());
        if (limitTeams.HasValue)
            uriBuilder.AddParameter("limit[teams]", limitTeams.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingRuleSetsResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingRuleSets
    public Task<GameCenterMatchmakingRuleSetResponse> GameCenterMatchmakingRuleSets_createInstance(GameCenterMatchmakingRuleSetCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRuleSets";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterMatchmakingRuleSetResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getInstanceFieldsGameCenterMatchmakingRuleSets
    {
        referenceName,
        ruleLanguageVersion,
        minPlayers,
        maxPlayers,
        teams,
        rules,
        matchmakingQueues,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getInstanceFieldsGameCenterMatchmakingTeams
    {
        referenceName,
        minPlayers,
        maxPlayers,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getInstanceFieldsGameCenterMatchmakingRules
    {
        referenceName,
        description,
        type,
        expression,
        weight,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getInstanceFieldsGameCenterMatchmakingQueues
    {
        referenceName,
        classicMatchmakingBundleIds,
        ruleSet,
        experimentRuleSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_getInstanceInclude
    {
        teams,
        rules,
        matchmakingQueues,
    }

    // /v1/gameCenterMatchmakingRuleSets/{id}
    public Task<GameCenterMatchmakingRuleSetResponse> GameCenterMatchmakingRuleSets_getInstance(string id, GameCenterMatchmakingRuleSets_getInstanceFieldsGameCenterMatchmakingRuleSets[]? fieldsGameCenterMatchmakingRuleSets = default, GameCenterMatchmakingRuleSets_getInstanceFieldsGameCenterMatchmakingTeams[]? fieldsGameCenterMatchmakingTeams = default, GameCenterMatchmakingRuleSets_getInstanceFieldsGameCenterMatchmakingRules[]? fieldsGameCenterMatchmakingRules = default, GameCenterMatchmakingRuleSets_getInstanceFieldsGameCenterMatchmakingQueues[]? fieldsGameCenterMatchmakingQueues = default, GameCenterMatchmakingRuleSets_getInstanceInclude[]? include = default, int? limitMatchmakingQueues = default, int? limitRules = default, int? limitTeams = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRuleSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterMatchmakingRuleSets != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingRuleSets]", string.Join(",", fieldsGameCenterMatchmakingRuleSets));
        if (fieldsGameCenterMatchmakingTeams != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingTeams]", string.Join(",", fieldsGameCenterMatchmakingTeams));
        if (fieldsGameCenterMatchmakingRules != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingRules]", string.Join(",", fieldsGameCenterMatchmakingRules));
        if (fieldsGameCenterMatchmakingQueues != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingQueues]", string.Join(",", fieldsGameCenterMatchmakingQueues));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitMatchmakingQueues.HasValue)
            uriBuilder.AddParameter("limit[matchmakingQueues]", limitMatchmakingQueues.Value.ToString());
        if (limitRules.HasValue)
            uriBuilder.AddParameter("limit[rules]", limitRules.Value.ToString());
        if (limitTeams.HasValue)
            uriBuilder.AddParameter("limit[teams]", limitTeams.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingRuleSetResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingRuleSets/{id}
    public Task<GameCenterMatchmakingRuleSetResponse> GameCenterMatchmakingRuleSets_updateInstance(string id, GameCenterMatchmakingRuleSetUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRuleSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterMatchmakingRuleSetResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingRuleSets/{id}
    public Task GameCenterMatchmakingRuleSets_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRuleSets/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_matchmakingQueues_getToManyRelatedFieldsGameCenterMatchmakingQueues
    {
        referenceName,
        classicMatchmakingBundleIds,
        ruleSet,
        experimentRuleSet,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_matchmakingQueues_getToManyRelatedFieldsGameCenterMatchmakingRuleSets
    {
        referenceName,
        ruleLanguageVersion,
        minPlayers,
        maxPlayers,
        teams,
        rules,
        matchmakingQueues,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_matchmakingQueues_getToManyRelatedInclude
    {
        ruleSet,
        experimentRuleSet,
    }

    // /v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues
    public Task<GameCenterMatchmakingQueuesResponse> GameCenterMatchmakingRuleSets_matchmakingQueues_getToManyRelated(string id, GameCenterMatchmakingRuleSets_matchmakingQueues_getToManyRelatedFieldsGameCenterMatchmakingQueues[]? fieldsGameCenterMatchmakingQueues = default, GameCenterMatchmakingRuleSets_matchmakingQueues_getToManyRelatedFieldsGameCenterMatchmakingRuleSets[]? fieldsGameCenterMatchmakingRuleSets = default, int? limit = default, GameCenterMatchmakingRuleSets_matchmakingQueues_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterMatchmakingQueues != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingQueues]", string.Join(",", fieldsGameCenterMatchmakingQueues));
        if (fieldsGameCenterMatchmakingRuleSets != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingRuleSets]", string.Join(",", fieldsGameCenterMatchmakingRuleSets));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingQueuesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_rules_getToManyRelatedFieldsGameCenterMatchmakingRules
    {
        referenceName,
        description,
        type,
        expression,
        weight,
    }

    // /v1/gameCenterMatchmakingRuleSets/{id}/rules
    public Task<GameCenterMatchmakingRulesResponse> GameCenterMatchmakingRuleSets_rules_getToManyRelated(string id, GameCenterMatchmakingRuleSets_rules_getToManyRelatedFieldsGameCenterMatchmakingRules[]? fieldsGameCenterMatchmakingRules = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRuleSets/{id}/rules";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterMatchmakingRules != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingRules]", string.Join(",", fieldsGameCenterMatchmakingRules));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingRulesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum GameCenterMatchmakingRuleSets_teams_getToManyRelatedFieldsGameCenterMatchmakingTeams
    {
        referenceName,
        minPlayers,
        maxPlayers,
    }

    // /v1/gameCenterMatchmakingRuleSets/{id}/teams
    public Task<GameCenterMatchmakingTeamsResponse> GameCenterMatchmakingRuleSets_teams_getToManyRelated(string id, GameCenterMatchmakingRuleSets_teams_getToManyRelatedFieldsGameCenterMatchmakingTeams[]? fieldsGameCenterMatchmakingTeams = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRuleSets/{id}/teams";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsGameCenterMatchmakingTeams != null)
            uriBuilder.AddParameter("fields[gameCenterMatchmakingTeams]", string.Join(",", fieldsGameCenterMatchmakingTeams));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<GameCenterMatchmakingTeamsResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingRuleSetTests
    public Task<GameCenterMatchmakingRuleSetTestResponse> GameCenterMatchmakingRuleSetTests_createInstance(GameCenterMatchmakingRuleSetTestCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingRuleSetTests";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterMatchmakingRuleSetTestResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingTeams
    public Task<GameCenterMatchmakingTeamResponse> GameCenterMatchmakingTeams_createInstance(GameCenterMatchmakingTeamCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingTeams";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterMatchmakingTeamResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingTeams/{id}
    public Task<GameCenterMatchmakingTeamResponse> GameCenterMatchmakingTeams_updateInstance(string id, GameCenterMatchmakingTeamUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingTeams/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterMatchmakingTeamResponse>(message, log);
    }

    // /v1/gameCenterMatchmakingTeams/{id}
    public Task GameCenterMatchmakingTeams_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/gameCenterMatchmakingTeams/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/gameCenterPlayerAchievementSubmissions
    public Task<GameCenterPlayerAchievementSubmissionResponse> GameCenterPlayerAchievementSubmissions_createInstance(GameCenterPlayerAchievementSubmissionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/gameCenterPlayerAchievementSubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<GameCenterPlayerAchievementSubmissionResponse>(message, log);
    }

    // /v1/inAppPurchaseAppStoreReviewScreenshots
    public Task<InAppPurchaseAppStoreReviewScreenshotResponse> InAppPurchaseAppStoreReviewScreenshots_createInstance(InAppPurchaseAppStoreReviewScreenshotCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseAppStoreReviewScreenshots";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseAppStoreReviewScreenshotResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchaseAppStoreReviewScreenshots_getInstanceFieldsInAppPurchaseAppStoreReviewScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        inAppPurchaseV2,
    }

    // /v1/inAppPurchaseAppStoreReviewScreenshots/{id}
    public Task<InAppPurchaseAppStoreReviewScreenshotResponse> InAppPurchaseAppStoreReviewScreenshots_getInstance(string id, InAppPurchaseAppStoreReviewScreenshots_getInstanceFieldsInAppPurchaseAppStoreReviewScreenshots[]? fieldsInAppPurchaseAppStoreReviewScreenshots = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseAppStoreReviewScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            uriBuilder.AddParameter("fields[inAppPurchaseAppStoreReviewScreenshots]", string.Join(",", fieldsInAppPurchaseAppStoreReviewScreenshots));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseAppStoreReviewScreenshotResponse>(message, log);
    }

    // /v1/inAppPurchaseAppStoreReviewScreenshots/{id}
    public Task<InAppPurchaseAppStoreReviewScreenshotResponse> InAppPurchaseAppStoreReviewScreenshots_updateInstance(string id, InAppPurchaseAppStoreReviewScreenshotUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseAppStoreReviewScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseAppStoreReviewScreenshotResponse>(message, log);
    }

    // /v1/inAppPurchaseAppStoreReviewScreenshots/{id}
    public Task InAppPurchaseAppStoreReviewScreenshots_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseAppStoreReviewScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/inAppPurchaseAvailabilities
    public Task<InAppPurchaseAvailabilityResponse> InAppPurchaseAvailabilities_createInstance(InAppPurchaseAvailabilityCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseAvailabilities";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseAvailabilityResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchaseAvailabilities_getInstanceFieldsInAppPurchaseAvailabilities
    {
        availableInNewTerritories,
        availableTerritories,
    }

    // /v1/inAppPurchaseAvailabilities/{id}
    public Task<InAppPurchaseAvailabilityResponse> InAppPurchaseAvailabilities_getInstance(string id, InAppPurchaseAvailabilities_getInstanceFieldsInAppPurchaseAvailabilities[]? fieldsInAppPurchaseAvailabilities = default, string[]? fieldsTerritories = default, string[]? include = default, int? limitAvailableTerritories = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseAvailabilities/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseAvailabilities != null)
            uriBuilder.AddParameter("fields[inAppPurchaseAvailabilities]", string.Join(",", fieldsInAppPurchaseAvailabilities));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAvailableTerritories.HasValue)
            uriBuilder.AddParameter("limit[availableTerritories]", limitAvailableTerritories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseAvailabilityResponse>(message, log);
    }

    // /v1/inAppPurchaseAvailabilities/{id}/availableTerritories
    public Task<TerritoriesResponse> InAppPurchaseAvailabilities_availableTerritories_getToManyRelated(string id, string[]? fieldsTerritories = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseAvailabilities/{id}/availableTerritories";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<TerritoriesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchaseContents_getInstanceFieldsInAppPurchaseContents
    {
        fileName,
        fileSize,
        url,
        lastModifiedDate,
        inAppPurchaseV2,
    }

    // /v1/inAppPurchaseContents/{id}
    public Task<InAppPurchaseContentResponse> InAppPurchaseContents_getInstance(string id, InAppPurchaseContents_getInstanceFieldsInAppPurchaseContents[]? fieldsInAppPurchaseContents = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseContents/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseContents != null)
            uriBuilder.AddParameter("fields[inAppPurchaseContents]", string.Join(",", fieldsInAppPurchaseContents));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseContentResponse>(message, log);
    }

    // /v1/inAppPurchaseImages
    public Task<InAppPurchaseImageResponse> InAppPurchaseImages_createInstance(InAppPurchaseImageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseImages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseImageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchaseImages_getInstanceFieldsInAppPurchaseImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        uploadOperations,
        state,
        inAppPurchase,
    }

    // /v1/inAppPurchaseImages/{id}
    public Task<InAppPurchaseImageResponse> InAppPurchaseImages_getInstance(string id, InAppPurchaseImages_getInstanceFieldsInAppPurchaseImages[]? fieldsInAppPurchaseImages = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseImages != null)
            uriBuilder.AddParameter("fields[inAppPurchaseImages]", string.Join(",", fieldsInAppPurchaseImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseImageResponse>(message, log);
    }

    // /v1/inAppPurchaseImages/{id}
    public Task<InAppPurchaseImageResponse> InAppPurchaseImages_updateInstance(string id, InAppPurchaseImageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseImageResponse>(message, log);
    }

    // /v1/inAppPurchaseImages/{id}
    public Task InAppPurchaseImages_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/inAppPurchaseLocalizations
    public Task<InAppPurchaseLocalizationResponse> InAppPurchaseLocalizations_createInstance(InAppPurchaseLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchaseLocalizations_getInstanceFieldsInAppPurchaseLocalizations
    {
        name,
        locale,
        description,
        state,
        inAppPurchaseV2,
    }

    // /v1/inAppPurchaseLocalizations/{id}
    public Task<InAppPurchaseLocalizationResponse> InAppPurchaseLocalizations_getInstance(string id, InAppPurchaseLocalizations_getInstanceFieldsInAppPurchaseLocalizations[]? fieldsInAppPurchaseLocalizations = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseLocalizations != null)
            uriBuilder.AddParameter("fields[inAppPurchaseLocalizations]", string.Join(",", fieldsInAppPurchaseLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseLocalizationResponse>(message, log);
    }

    // /v1/inAppPurchaseLocalizations/{id}
    public Task<InAppPurchaseLocalizationResponse> InAppPurchaseLocalizations_updateInstance(string id, InAppPurchaseLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseLocalizationResponse>(message, log);
    }

    // /v1/inAppPurchaseLocalizations/{id}
    public Task InAppPurchaseLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePricePoints_equalizations_getToManyRelatedFieldsInAppPurchasePricePoints
    {
        customerPrice,
        proceeds,
        territory,
        equalizations,
    }

    // /v1/inAppPurchasePricePoints/{id}/equalizations
    public Task<InAppPurchasePricePointsResponse> InAppPurchasePricePoints_equalizations_getToManyRelated(string id, string[]? filterTerritory = default, string[]? filterInAppPurchaseV2 = default, InAppPurchasePricePoints_equalizations_getToManyRelatedFieldsInAppPurchasePricePoints[]? fieldsInAppPurchasePricePoints = default, string[]? fieldsTerritories = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchasePricePoints/{id}/equalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (filterInAppPurchaseV2 != null)
            uriBuilder.AddParameter("filter[inAppPurchaseV2]", string.Join(",", filterInAppPurchaseV2));
        if (fieldsInAppPurchasePricePoints != null)
            uriBuilder.AddParameter("fields[inAppPurchasePricePoints]", string.Join(",", fieldsInAppPurchasePricePoints));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchasePricePointsResponse>(message, log);
    }

    // /v1/inAppPurchasePriceSchedules
    public Task<InAppPurchasePriceScheduleResponse> InAppPurchasePriceSchedules_createInstance(InAppPurchasePriceScheduleCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchasePriceSchedules";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchasePriceScheduleResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePriceSchedules_getInstanceFieldsInAppPurchasePriceSchedules
    {
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePriceSchedules_getInstanceFieldsInAppPurchasePrices
    {
        startDate,
        endDate,
        manual,
        inAppPurchasePricePoint,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePriceSchedules_getInstanceInclude
    {
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    // /v1/inAppPurchasePriceSchedules/{id}
    public Task<InAppPurchasePriceScheduleResponse> InAppPurchasePriceSchedules_getInstance(string id, InAppPurchasePriceSchedules_getInstanceFieldsInAppPurchasePriceSchedules[]? fieldsInAppPurchasePriceSchedules = default, string[]? fieldsTerritories = default, InAppPurchasePriceSchedules_getInstanceFieldsInAppPurchasePrices[]? fieldsInAppPurchasePrices = default, InAppPurchasePriceSchedules_getInstanceInclude[]? include = default, int? limitAutomaticPrices = default, int? limitManualPrices = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchasePriceSchedules/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchasePriceSchedules != null)
            uriBuilder.AddParameter("fields[inAppPurchasePriceSchedules]", string.Join(",", fieldsInAppPurchasePriceSchedules));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (fieldsInAppPurchasePrices != null)
            uriBuilder.AddParameter("fields[inAppPurchasePrices]", string.Join(",", fieldsInAppPurchasePrices));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAutomaticPrices.HasValue)
            uriBuilder.AddParameter("limit[automaticPrices]", limitAutomaticPrices.Value.ToString());
        if (limitManualPrices.HasValue)
            uriBuilder.AddParameter("limit[manualPrices]", limitManualPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchasePriceScheduleResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePriceSchedules_automaticPrices_getToManyRelatedFieldsInAppPurchasePrices
    {
        startDate,
        endDate,
        manual,
        inAppPurchasePricePoint,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePriceSchedules_automaticPrices_getToManyRelatedFieldsInAppPurchasePricePoints
    {
        customerPrice,
        proceeds,
        territory,
        equalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePriceSchedules_automaticPrices_getToManyRelatedInclude
    {
        inAppPurchasePricePoint,
        territory,
    }

    // /v1/inAppPurchasePriceSchedules/{id}/automaticPrices
    public Task<InAppPurchasePricesResponse> InAppPurchasePriceSchedules_automaticPrices_getToManyRelated(string id, string[]? filterTerritory = default, InAppPurchasePriceSchedules_automaticPrices_getToManyRelatedFieldsInAppPurchasePrices[]? fieldsInAppPurchasePrices = default, InAppPurchasePriceSchedules_automaticPrices_getToManyRelatedFieldsInAppPurchasePricePoints[]? fieldsInAppPurchasePricePoints = default, string[]? fieldsTerritories = default, int? limit = default, InAppPurchasePriceSchedules_automaticPrices_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchasePriceSchedules/{id}/automaticPrices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsInAppPurchasePrices != null)
            uriBuilder.AddParameter("fields[inAppPurchasePrices]", string.Join(",", fieldsInAppPurchasePrices));
        if (fieldsInAppPurchasePricePoints != null)
            uriBuilder.AddParameter("fields[inAppPurchasePricePoints]", string.Join(",", fieldsInAppPurchasePricePoints));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchasePricesResponse>(message, log);
    }

    // /v1/inAppPurchasePriceSchedules/{id}/baseTerritory
    public Task<TerritoryResponse> InAppPurchasePriceSchedules_baseTerritory_getToOneRelated(string id, string[]? fieldsTerritories = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchasePriceSchedules/{id}/baseTerritory";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<TerritoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePriceSchedules_manualPrices_getToManyRelatedFieldsInAppPurchasePrices
    {
        startDate,
        endDate,
        manual,
        inAppPurchasePricePoint,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePriceSchedules_manualPrices_getToManyRelatedFieldsInAppPurchasePricePoints
    {
        customerPrice,
        proceeds,
        territory,
        equalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasePriceSchedules_manualPrices_getToManyRelatedInclude
    {
        inAppPurchasePricePoint,
        territory,
    }

    // /v1/inAppPurchasePriceSchedules/{id}/manualPrices
    public Task<InAppPurchasePricesResponse> InAppPurchasePriceSchedules_manualPrices_getToManyRelated(string id, string[]? filterTerritory = default, InAppPurchasePriceSchedules_manualPrices_getToManyRelatedFieldsInAppPurchasePrices[]? fieldsInAppPurchasePrices = default, InAppPurchasePriceSchedules_manualPrices_getToManyRelatedFieldsInAppPurchasePricePoints[]? fieldsInAppPurchasePricePoints = default, string[]? fieldsTerritories = default, int? limit = default, InAppPurchasePriceSchedules_manualPrices_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchasePriceSchedules/{id}/manualPrices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsInAppPurchasePrices != null)
            uriBuilder.AddParameter("fields[inAppPurchasePrices]", string.Join(",", fieldsInAppPurchasePrices));
        if (fieldsInAppPurchasePricePoints != null)
            uriBuilder.AddParameter("fields[inAppPurchasePricePoints]", string.Join(",", fieldsInAppPurchasePricePoints));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchasePricesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchases_getInstanceFieldsInAppPurchases
    {
        referenceName,
        productId,
        inAppPurchaseType,
        state,
        apps,
    }

    // /v1/inAppPurchases/{id}
    [Obsolete]
    public Task<InAppPurchaseResponse> InAppPurchases_getInstance(string id, InAppPurchases_getInstanceFieldsInAppPurchases[]? fieldsInAppPurchases = default, string[]? include = default, int? limitApps = default, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitApps.HasValue)
            uriBuilder.AddParameter("limit[apps]", limitApps.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseResponse>(message, log);
    }

    // /v1/inAppPurchaseSubmissions
    public Task<InAppPurchaseSubmissionResponse> InAppPurchaseSubmissions_createInstance(InAppPurchaseSubmissionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/inAppPurchaseSubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseSubmissionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum MarketplaceDomains_getCollectionFieldsMarketplaceDomains
    {
        domain,
        referenceName,
        createdDate,
    }

    // /v1/marketplaceDomains
    [Obsolete]
    public Task<MarketplaceDomainsResponse> MarketplaceDomains_getCollection(MarketplaceDomains_getCollectionFieldsMarketplaceDomains[]? fieldsMarketplaceDomains = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/marketplaceDomains";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsMarketplaceDomains != null)
            uriBuilder.AddParameter("fields[marketplaceDomains]", string.Join(",", fieldsMarketplaceDomains));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<MarketplaceDomainsResponse>(message, log);
    }

    // /v1/marketplaceDomains
    [Obsolete]
    public Task<MarketplaceDomainResponse> MarketplaceDomains_createInstance(MarketplaceDomainCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/marketplaceDomains";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<MarketplaceDomainResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum MarketplaceDomains_getInstanceFieldsMarketplaceDomains
    {
        domain,
        referenceName,
        createdDate,
    }

    // /v1/marketplaceDomains/{id}
    [Obsolete]
    public Task<MarketplaceDomainResponse> MarketplaceDomains_getInstance(string id, MarketplaceDomains_getInstanceFieldsMarketplaceDomains[]? fieldsMarketplaceDomains = default, INestedLog? log = null)
    {
        string path = "/v1/marketplaceDomains/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsMarketplaceDomains != null)
            uriBuilder.AddParameter("fields[marketplaceDomains]", string.Join(",", fieldsMarketplaceDomains));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<MarketplaceDomainResponse>(message, log);
    }

    // /v1/marketplaceDomains/{id}
    [Obsolete]
    public Task MarketplaceDomains_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/marketplaceDomains/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/marketplaceSearchDetails
    public Task<MarketplaceSearchDetailResponse> MarketplaceSearchDetails_createInstance(MarketplaceSearchDetailCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/marketplaceSearchDetails";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<MarketplaceSearchDetailResponse>(message, log);
    }

    // /v1/marketplaceSearchDetails/{id}
    public Task<MarketplaceSearchDetailResponse> MarketplaceSearchDetails_updateInstance(string id, MarketplaceSearchDetailUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/marketplaceSearchDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<MarketplaceSearchDetailResponse>(message, log);
    }

    // /v1/marketplaceSearchDetails/{id}
    public Task MarketplaceSearchDetails_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/marketplaceSearchDetails/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/marketplaceWebhooks
    public Task<MarketplaceWebhooksResponse> MarketplaceWebhooks_getCollection(string[]? fieldsMarketplaceWebhooks = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/marketplaceWebhooks";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsMarketplaceWebhooks != null)
            uriBuilder.AddParameter("fields[marketplaceWebhooks]", string.Join(",", fieldsMarketplaceWebhooks));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<MarketplaceWebhooksResponse>(message, log);
    }

    // /v1/marketplaceWebhooks
    public Task<MarketplaceWebhookResponse> MarketplaceWebhooks_createInstance(MarketplaceWebhookCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/marketplaceWebhooks";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<MarketplaceWebhookResponse>(message, log);
    }

    // /v1/marketplaceWebhooks/{id}
    public Task<MarketplaceWebhookResponse> MarketplaceWebhooks_updateInstance(string id, MarketplaceWebhookUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/marketplaceWebhooks/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<MarketplaceWebhookResponse>(message, log);
    }

    // /v1/marketplaceWebhooks/{id}
    public Task MarketplaceWebhooks_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/marketplaceWebhooks/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getCollectionFilterBuildsProcessingState
    {
        PROCESSING,
        FAILED,
        INVALID,
        VALID,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getCollectionFilterPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getCollectionSort
    {
        version,
        [EnumMember(Value = "-version")]
        versionDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getCollectionFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getCollectionFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getCollectionInclude
    {
        builds,
        app,
    }

    // /v1/preReleaseVersions
    public Task<PreReleaseVersionsResponse> PreReleaseVersions_getCollection(string[]? filterBuildsExpired = default, PreReleaseVersions_getCollectionFilterBuildsProcessingState[]? filterBuildsProcessingState = default, string[]? filterBuildsVersion = default, PreReleaseVersions_getCollectionFilterPlatform[]? filterPlatform = default, string[]? filterVersion = default, string[]? filterApp = default, string[]? filterBuilds = default, PreReleaseVersions_getCollectionSort[]? sort = default, PreReleaseVersions_getCollectionFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, PreReleaseVersions_getCollectionFieldsBuilds[]? fieldsBuilds = default, PreReleaseVersions_getCollectionFieldsApps[]? fieldsApps = default, int? limit = default, PreReleaseVersions_getCollectionInclude[]? include = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/preReleaseVersions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterBuildsExpired != null)
            uriBuilder.AddParameter("filter[builds.expired]", string.Join(",", filterBuildsExpired));
        if (filterBuildsProcessingState != null)
            uriBuilder.AddParameter("filter[builds.processingState]", string.Join(",", filterBuildsProcessingState));
        if (filterBuildsVersion != null)
            uriBuilder.AddParameter("filter[builds.version]", string.Join(",", filterBuildsVersion));
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterVersion != null)
            uriBuilder.AddParameter("filter[version]", string.Join(",", filterVersion));
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (filterBuilds != null)
            uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PreReleaseVersionsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getInstanceFieldsPreReleaseVersions
    {
        version,
        platform,
        builds,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getInstanceFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_getInstanceInclude
    {
        builds,
        app,
    }

    // /v1/preReleaseVersions/{id}
    public Task<PrereleaseVersionResponse> PreReleaseVersions_getInstance(string id, PreReleaseVersions_getInstanceFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, PreReleaseVersions_getInstanceFieldsBuilds[]? fieldsBuilds = default, PreReleaseVersions_getInstanceFieldsApps[]? fieldsApps = default, PreReleaseVersions_getInstanceInclude[]? include = default, int? limitBuilds = default, INestedLog? log = null)
    {
        string path = "/v1/preReleaseVersions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsPreReleaseVersions != null)
            uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitBuilds.HasValue)
            uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PrereleaseVersionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_app_getToOneRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/preReleaseVersions/{id}/app
    public Task<AppWithoutIncludesResponse> PreReleaseVersions_app_getToOneRelated(string id, PreReleaseVersions_app_getToOneRelatedFieldsApps[]? fieldsApps = default, INestedLog? log = null)
    {
        string path = "/v1/preReleaseVersions/{id}/app";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PreReleaseVersions_builds_getToManyRelatedFieldsBuilds
    {
        version,
        uploadedDate,
        expirationDate,
        expired,
        minOsVersion,
        lsMinimumSystemVersion,
        computedMinMacOsVersion,
        iconAssetToken,
        processingState,
        buildAudienceType,
        usesNonExemptEncryption,
        preReleaseVersion,
        individualTesters,
        betaGroups,
        betaBuildLocalizations,
        appEncryptionDeclaration,
        betaAppReviewSubmission,
        app,
        buildBetaDetail,
        appStoreVersion,
        icons,
        buildBundles,
        perfPowerMetrics,
        diagnosticSignatures,
    }

    // /v1/preReleaseVersions/{id}/builds
    public Task<BuildsWithoutIncludesResponse> PreReleaseVersions_builds_getToManyRelated(string id, PreReleaseVersions_builds_getToManyRelatedFieldsBuilds[]? fieldsBuilds = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/preReleaseVersions/{id}/builds";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBuilds != null)
            uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BuildsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getCollectionFilterProfileType
    {
        IOS_APP_DEVELOPMENT,
        IOS_APP_STORE,
        IOS_APP_ADHOC,
        IOS_APP_INHOUSE,
        MAC_APP_DEVELOPMENT,
        MAC_APP_STORE,
        MAC_APP_DIRECT,
        TVOS_APP_DEVELOPMENT,
        TVOS_APP_STORE,
        TVOS_APP_ADHOC,
        TVOS_APP_INHOUSE,
        MAC_CATALYST_APP_DEVELOPMENT,
        MAC_CATALYST_APP_STORE,
        MAC_CATALYST_APP_DIRECT,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getCollectionFilterProfileState
    {
        ACTIVE,
        INVALID,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getCollectionSort
    {
        name,
        [EnumMember(Value = "-name")]
        nameDescending,
        profileType,
        [EnumMember(Value = "-profileType")]
        profileTypeDescending,
        profileState,
        [EnumMember(Value = "-profileState")]
        profileStateDescending,
        id,
        [EnumMember(Value = "-id")]
        idDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getCollectionFieldsProfiles
    {
        name,
        platform,
        profileType,
        profileState,
        profileContent,
        uuid,
        createdDate,
        expirationDate,
        bundleId,
        devices,
        certificates,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getCollectionFieldsBundleIds
    {
        name,
        platform,
        identifier,
        seedId,
        profiles,
        bundleIdCapabilities,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getCollectionFieldsDevices
    {
        name,
        platform,
        udid,
        deviceClass,
        status,
        model,
        addedDate,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getCollectionFieldsCertificates
    {
        name,
        certificateType,
        displayName,
        serialNumber,
        platform,
        expirationDate,
        certificateContent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getCollectionInclude
    {
        bundleId,
        devices,
        certificates,
    }

    // /v1/profiles
    public Task<ProfilesResponse> Profiles_getCollection(string[]? filterName = default, Profiles_getCollectionFilterProfileType[]? filterProfileType = default, Profiles_getCollectionFilterProfileState[]? filterProfileState = default, string[]? filterId = default, Profiles_getCollectionSort[]? sort = default, Profiles_getCollectionFieldsProfiles[]? fieldsProfiles = default, Profiles_getCollectionFieldsBundleIds[]? fieldsBundleIds = default, Profiles_getCollectionFieldsDevices[]? fieldsDevices = default, Profiles_getCollectionFieldsCertificates[]? fieldsCertificates = default, int? limit = default, Profiles_getCollectionInclude[]? include = default, int? limitCertificates = default, int? limitDevices = default, INestedLog? log = null)
    {
        string path = "/v1/profiles";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterName != null)
            uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
        if (filterProfileType != null)
            uriBuilder.AddParameter("filter[profileType]", string.Join(",", filterProfileType));
        if (filterProfileState != null)
            uriBuilder.AddParameter("filter[profileState]", string.Join(",", filterProfileState));
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsProfiles != null)
            uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
        if (fieldsBundleIds != null)
            uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
        if (fieldsDevices != null)
            uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));
        if (fieldsCertificates != null)
            uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitCertificates.HasValue)
            uriBuilder.AddParameter("limit[certificates]", limitCertificates.Value.ToString());
        if (limitDevices.HasValue)
            uriBuilder.AddParameter("limit[devices]", limitDevices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ProfilesResponse>(message, log);
    }

    // /v1/profiles
    public Task<ProfileResponse> Profiles_createInstance(ProfileCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/profiles";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<ProfileResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getInstanceFieldsProfiles
    {
        name,
        platform,
        profileType,
        profileState,
        profileContent,
        uuid,
        createdDate,
        expirationDate,
        bundleId,
        devices,
        certificates,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getInstanceFieldsBundleIds
    {
        name,
        platform,
        identifier,
        seedId,
        profiles,
        bundleIdCapabilities,
        app,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getInstanceFieldsDevices
    {
        name,
        platform,
        udid,
        deviceClass,
        status,
        model,
        addedDate,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getInstanceFieldsCertificates
    {
        name,
        certificateType,
        displayName,
        serialNumber,
        platform,
        expirationDate,
        certificateContent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_getInstanceInclude
    {
        bundleId,
        devices,
        certificates,
    }

    // /v1/profiles/{id}
    public Task<ProfileResponse> Profiles_getInstance(string id, Profiles_getInstanceFieldsProfiles[]? fieldsProfiles = default, Profiles_getInstanceFieldsBundleIds[]? fieldsBundleIds = default, Profiles_getInstanceFieldsDevices[]? fieldsDevices = default, Profiles_getInstanceFieldsCertificates[]? fieldsCertificates = default, Profiles_getInstanceInclude[]? include = default, int? limitCertificates = default, int? limitDevices = default, INestedLog? log = null)
    {
        string path = "/v1/profiles/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsProfiles != null)
            uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
        if (fieldsBundleIds != null)
            uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
        if (fieldsDevices != null)
            uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));
        if (fieldsCertificates != null)
            uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitCertificates.HasValue)
            uriBuilder.AddParameter("limit[certificates]", limitCertificates.Value.ToString());
        if (limitDevices.HasValue)
            uriBuilder.AddParameter("limit[devices]", limitDevices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ProfileResponse>(message, log);
    }

    // /v1/profiles/{id}
    public Task Profiles_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/profiles/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_bundleId_getToOneRelatedFieldsBundleIds
    {
        name,
        platform,
        identifier,
        seedId,
        profiles,
        bundleIdCapabilities,
        app,
    }

    // /v1/profiles/{id}/bundleId
    public Task<BundleIdWithoutIncludesResponse> Profiles_bundleId_getToOneRelated(string id, Profiles_bundleId_getToOneRelatedFieldsBundleIds[]? fieldsBundleIds = default, INestedLog? log = null)
    {
        string path = "/v1/profiles/{id}/bundleId";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsBundleIds != null)
            uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<BundleIdWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_certificates_getToManyRelatedFieldsCertificates
    {
        name,
        certificateType,
        displayName,
        serialNumber,
        platform,
        expirationDate,
        certificateContent,
    }

    // /v1/profiles/{id}/certificates
    public Task<CertificatesWithoutIncludesResponse> Profiles_certificates_getToManyRelated(string id, Profiles_certificates_getToManyRelatedFieldsCertificates[]? fieldsCertificates = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/profiles/{id}/certificates";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsCertificates != null)
            uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<CertificatesWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Profiles_devices_getToManyRelatedFieldsDevices
    {
        name,
        platform,
        udid,
        deviceClass,
        status,
        model,
        addedDate,
    }

    // /v1/profiles/{id}/devices
    public Task<DevicesWithoutIncludesResponse> Profiles_devices_getToManyRelated(string id, Profiles_devices_getToManyRelatedFieldsDevices[]? fieldsDevices = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/profiles/{id}/devices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsDevices != null)
            uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<DevicesWithoutIncludesResponse>(message, log);
    }

    // /v1/promotedPurchaseImages
    [Obsolete]
    public Task<PromotedPurchaseImageResponse> PromotedPurchaseImages_createInstance(PromotedPurchaseImageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/promotedPurchaseImages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<PromotedPurchaseImageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PromotedPurchaseImages_getInstanceFieldsPromotedPurchaseImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        assetType,
        uploadOperations,
        state,
        promotedPurchase,
    }

    // /v1/promotedPurchaseImages/{id}
    [Obsolete]
    public Task<PromotedPurchaseImageResponse> PromotedPurchaseImages_getInstance(string id, PromotedPurchaseImages_getInstanceFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/promotedPurchaseImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsPromotedPurchaseImages != null)
            uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PromotedPurchaseImageResponse>(message, log);
    }

    // /v1/promotedPurchaseImages/{id}
    [Obsolete]
    public Task<PromotedPurchaseImageResponse> PromotedPurchaseImages_updateInstance(string id, PromotedPurchaseImageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/promotedPurchaseImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<PromotedPurchaseImageResponse>(message, log);
    }

    // /v1/promotedPurchaseImages/{id}
    [Obsolete]
    public Task PromotedPurchaseImages_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/promotedPurchaseImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/promotedPurchases
    public Task<PromotedPurchaseResponse> PromotedPurchases_createInstance(PromotedPurchaseCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/promotedPurchases";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<PromotedPurchaseResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PromotedPurchases_getInstanceFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PromotedPurchases_getInstanceInclude
    {
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    // /v1/promotedPurchases/{id}
    public Task<PromotedPurchaseResponse> PromotedPurchases_getInstance(string id, PromotedPurchases_getInstanceFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, PromotedPurchases_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/promotedPurchases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PromotedPurchaseResponse>(message, log);
    }

    // /v1/promotedPurchases/{id}
    public Task<PromotedPurchaseResponse> PromotedPurchases_updateInstance(string id, PromotedPurchaseUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/promotedPurchases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<PromotedPurchaseResponse>(message, log);
    }

    // /v1/promotedPurchases/{id}
    public Task PromotedPurchases_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/promotedPurchases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PromotedPurchases_promotionImages_getToManyRelatedFieldsPromotedPurchaseImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        assetType,
        uploadOperations,
        state,
        promotedPurchase,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PromotedPurchases_promotionImages_getToManyRelatedFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    // /v1/promotedPurchases/{id}/promotionImages
    [Obsolete]
    public Task<PromotedPurchaseImagesResponse> PromotedPurchases_promotionImages_getToManyRelated(string id, PromotedPurchases_promotionImages_getToManyRelatedFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, PromotedPurchases_promotionImages_getToManyRelatedFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/promotedPurchases/{id}/promotionImages";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsPromotedPurchaseImages != null)
            uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PromotedPurchaseImagesResponse>(message, log);
    }

    // /v1/reviewSubmissionItems
    public Task<ReviewSubmissionItemResponse> ReviewSubmissionItems_createInstance(ReviewSubmissionItemCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/reviewSubmissionItems";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<ReviewSubmissionItemResponse>(message, log);
    }

    // /v1/reviewSubmissionItems/{id}
    public Task<ReviewSubmissionItemResponse> ReviewSubmissionItems_updateInstance(string id, ReviewSubmissionItemUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/reviewSubmissionItems/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<ReviewSubmissionItemResponse>(message, log);
    }

    // /v1/reviewSubmissionItems/{id}
    public Task ReviewSubmissionItems_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/reviewSubmissionItems/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_getCollectionFilterPlatform
    {
        IOS,
        MAC_OS,
        TV_OS,
        VISION_OS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_getCollectionFilterState
    {
        READY_FOR_REVIEW,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        UNRESOLVED_ISSUES,
        CANCELING,
        COMPLETING,
        COMPLETE,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_getCollectionFieldsReviewSubmissions
    {
        platform,
        submittedDate,
        state,
        app,
        items,
        appStoreVersionForReview,
        submittedByActor,
        lastUpdatedByActor,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_getCollectionFieldsReviewSubmissionItems
    {
        state,
        appStoreVersion,
        appCustomProductPageVersion,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appEvent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_getCollectionInclude
    {
        app,
        items,
        appStoreVersionForReview,
        submittedByActor,
        lastUpdatedByActor,
    }

    // /v1/reviewSubmissions
    public Task<ReviewSubmissionsResponse> ReviewSubmissions_getCollection(string[] filterApp, ReviewSubmissions_getCollectionFilterPlatform[]? filterPlatform = default, ReviewSubmissions_getCollectionFilterState[]? filterState = default, ReviewSubmissions_getCollectionFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, ReviewSubmissions_getCollectionFieldsReviewSubmissionItems[]? fieldsReviewSubmissionItems = default, int? limit = default, ReviewSubmissions_getCollectionInclude[]? include = default, int? limitItems = default, INestedLog? log = null)
    {
        string path = "/v1/reviewSubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterApp != null)
            uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
        if (filterPlatform != null)
            uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
        if (filterState != null)
            uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
        if (fieldsReviewSubmissions != null)
            uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
        if (fieldsReviewSubmissionItems != null)
            uriBuilder.AddParameter("fields[reviewSubmissionItems]", string.Join(",", fieldsReviewSubmissionItems));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitItems.HasValue)
            uriBuilder.AddParameter("limit[items]", limitItems.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ReviewSubmissionsResponse>(message, log);
    }

    // /v1/reviewSubmissions
    public Task<ReviewSubmissionResponse> ReviewSubmissions_createInstance(ReviewSubmissionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/reviewSubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<ReviewSubmissionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_getInstanceFieldsReviewSubmissions
    {
        platform,
        submittedDate,
        state,
        app,
        items,
        appStoreVersionForReview,
        submittedByActor,
        lastUpdatedByActor,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_getInstanceFieldsReviewSubmissionItems
    {
        state,
        appStoreVersion,
        appCustomProductPageVersion,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appEvent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_getInstanceInclude
    {
        app,
        items,
        appStoreVersionForReview,
        submittedByActor,
        lastUpdatedByActor,
    }

    // /v1/reviewSubmissions/{id}
    public Task<ReviewSubmissionResponse> ReviewSubmissions_getInstance(string id, ReviewSubmissions_getInstanceFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, ReviewSubmissions_getInstanceFieldsReviewSubmissionItems[]? fieldsReviewSubmissionItems = default, ReviewSubmissions_getInstanceInclude[]? include = default, int? limitItems = default, INestedLog? log = null)
    {
        string path = "/v1/reviewSubmissions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsReviewSubmissions != null)
            uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
        if (fieldsReviewSubmissionItems != null)
            uriBuilder.AddParameter("fields[reviewSubmissionItems]", string.Join(",", fieldsReviewSubmissionItems));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitItems.HasValue)
            uriBuilder.AddParameter("limit[items]", limitItems.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ReviewSubmissionResponse>(message, log);
    }

    // /v1/reviewSubmissions/{id}
    public Task<ReviewSubmissionResponse> ReviewSubmissions_updateInstance(string id, ReviewSubmissionUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/reviewSubmissions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<ReviewSubmissionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_items_getToManyRelatedFieldsReviewSubmissionItems
    {
        state,
        appStoreVersion,
        appCustomProductPageVersion,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appEvent,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_items_getToManyRelatedFieldsAppStoreVersions
    {
        platform,
        versionString,
        appStoreState,
        appVersionState,
        copyright,
        reviewType,
        releaseType,
        earliestReleaseDate,
        downloadable,
        createdDate,
        app,
        ageRatingDeclaration,
        appStoreVersionLocalizations,
        build,
        appStoreVersionPhasedRelease,
        gameCenterAppVersion,
        routingAppCoverage,
        appStoreReviewDetail,
        appStoreVersionSubmission,
        appClipDefaultExperience,
        appStoreVersionExperiments,
        appStoreVersionExperimentsV2,
        customerReviews,
        alternativeDistributionPackage,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_items_getToManyRelatedFieldsAppCustomProductPageVersions
    {
        version,
        state,
        deepLink,
        appCustomProductPage,
        appCustomProductPageLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_items_getToManyRelatedFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
        platform,
        app,
        latestControlVersion,
        controlVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_items_getToManyRelatedFieldsAppEvents
    {
        referenceName,
        badge,
        eventState,
        deepLink,
        purchaseRequirement,
        primaryLocale,
        priority,
        purpose,
        territorySchedules,
        archivedTerritorySchedules,
        localizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ReviewSubmissions_items_getToManyRelatedInclude
    {
        appStoreVersion,
        appCustomProductPageVersion,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appEvent,
    }

    // /v1/reviewSubmissions/{id}/items
    public Task<ReviewSubmissionItemsResponse> ReviewSubmissions_items_getToManyRelated(string id, ReviewSubmissions_items_getToManyRelatedFieldsReviewSubmissionItems[]? fieldsReviewSubmissionItems = default, ReviewSubmissions_items_getToManyRelatedFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, ReviewSubmissions_items_getToManyRelatedFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, ReviewSubmissions_items_getToManyRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, ReviewSubmissions_items_getToManyRelatedFieldsAppEvents[]? fieldsAppEvents = default, int? limit = default, ReviewSubmissions_items_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/reviewSubmissions/{id}/items";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsReviewSubmissionItems != null)
            uriBuilder.AddParameter("fields[reviewSubmissionItems]", string.Join(",", fieldsReviewSubmissionItems));
        if (fieldsAppStoreVersions != null)
            uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
        if (fieldsAppCustomProductPageVersions != null)
            uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAppEvents != null)
            uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ReviewSubmissionItemsResponse>(message, log);
    }

    // /v1/routingAppCoverages
    public Task<RoutingAppCoverageResponse> RoutingAppCoverages_createInstance(RoutingAppCoverageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/routingAppCoverages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<RoutingAppCoverageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum RoutingAppCoverages_getInstanceFieldsRoutingAppCoverages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        uploadOperations,
        assetDeliveryState,
        appStoreVersion,
    }

    // /v1/routingAppCoverages/{id}
    public Task<RoutingAppCoverageResponse> RoutingAppCoverages_getInstance(string id, RoutingAppCoverages_getInstanceFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/routingAppCoverages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsRoutingAppCoverages != null)
            uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<RoutingAppCoverageResponse>(message, log);
    }

    // /v1/routingAppCoverages/{id}
    public Task<RoutingAppCoverageResponse> RoutingAppCoverages_updateInstance(string id, RoutingAppCoverageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/routingAppCoverages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<RoutingAppCoverageResponse>(message, log);
    }

    // /v1/routingAppCoverages/{id}
    public Task RoutingAppCoverages_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/routingAppCoverages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SalesReports_getCollectionFilterReportType
    {
        SALES,
        PRE_ORDER,
        NEWSSTAND,
        SUBSCRIPTION,
        SUBSCRIPTION_EVENT,
        SUBSCRIBER,
        SUBSCRIPTION_OFFER_CODE_REDEMPTION,
        INSTALLS,
        FIRST_ANNUAL,
        WIN_BACK_ELIGIBILITY,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SalesReports_getCollectionFilterReportSubType
    {
        SUMMARY,
        DETAILED,
        SUMMARY_INSTALL_TYPE,
        SUMMARY_TERRITORY,
        SUMMARY_CHANNEL,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SalesReports_getCollectionFilterFrequency
    {
        DAILY,
        WEEKLY,
        MONTHLY,
        YEARLY,
    }

    // /v1/salesReports
    public Task SalesReports_getCollection(string[] filterVendorNumber, SalesReports_getCollectionFilterReportType[] filterReportType, SalesReports_getCollectionFilterReportSubType[] filterReportSubType, SalesReports_getCollectionFilterFrequency[] filterFrequency, string[]? filterReportDate = default, string[]? filterVersion = default, INestedLog? log = null)
    {
        string path = "/v1/salesReports";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterVendorNumber != null)
            uriBuilder.AddParameter("filter[vendorNumber]", string.Join(",", filterVendorNumber));
        if (filterReportType != null)
            uriBuilder.AddParameter("filter[reportType]", string.Join(",", filterReportType));
        if (filterReportSubType != null)
            uriBuilder.AddParameter("filter[reportSubType]", string.Join(",", filterReportSubType));
        if (filterFrequency != null)
            uriBuilder.AddParameter("filter[frequency]", string.Join(",", filterFrequency));
        if (filterReportDate != null)
            uriBuilder.AddParameter("filter[reportDate]", string.Join(",", filterReportDate));
        if (filterVersion != null)
            uriBuilder.AddParameter("filter[version]", string.Join(",", filterVersion));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmGitReferences_getInstanceFieldsScmGitReferences
    {
        name,
        canonicalName,
        isDeleted,
        kind,
        repository,
    }

    // /v1/scmGitReferences/{id}
    public Task<ScmGitReferenceResponse> ScmGitReferences_getInstance(string id, ScmGitReferences_getInstanceFieldsScmGitReferences[]? fieldsScmGitReferences = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/scmGitReferences/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsScmGitReferences != null)
            uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmGitReferenceResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmProviders_getCollectionFieldsScmProviders
    {
        scmProviderType,
        url,
        repositories,
    }

    // /v1/scmProviders
    public Task<ScmProvidersResponse> ScmProviders_getCollection(ScmProviders_getCollectionFieldsScmProviders[]? fieldsScmProviders = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/scmProviders";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsScmProviders != null)
            uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmProvidersResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmProviders_getInstanceFieldsScmProviders
    {
        scmProviderType,
        url,
        repositories,
    }

    // /v1/scmProviders/{id}
    public Task<ScmProviderResponse> ScmProviders_getInstance(string id, ScmProviders_getInstanceFieldsScmProviders[]? fieldsScmProviders = default, INestedLog? log = null)
    {
        string path = "/v1/scmProviders/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsScmProviders != null)
            uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmProviderResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmProviders_repositories_getToManyRelatedFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmProviders_repositories_getToManyRelatedFieldsScmProviders
    {
        scmProviderType,
        url,
        repositories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmProviders_repositories_getToManyRelatedFieldsScmGitReferences
    {
        name,
        canonicalName,
        isDeleted,
        kind,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmProviders_repositories_getToManyRelatedInclude
    {
        scmProvider,
        defaultBranch,
    }

    // /v1/scmProviders/{id}/repositories
    public Task<ScmRepositoriesResponse> ScmProviders_repositories_getToManyRelated(string id, string[]? filterId = default, ScmProviders_repositories_getToManyRelatedFieldsScmRepositories[]? fieldsScmRepositories = default, ScmProviders_repositories_getToManyRelatedFieldsScmProviders[]? fieldsScmProviders = default, ScmProviders_repositories_getToManyRelatedFieldsScmGitReferences[]? fieldsScmGitReferences = default, int? limit = default, ScmProviders_repositories_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/scmProviders/{id}/repositories";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (fieldsScmProviders != null)
            uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
        if (fieldsScmGitReferences != null)
            uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmRepositoriesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmPullRequests_getInstanceFieldsScmPullRequests
    {
        title,
        number,
        webUrl,
        sourceRepositoryOwner,
        sourceRepositoryName,
        sourceBranchName,
        destinationRepositoryOwner,
        destinationRepositoryName,
        destinationBranchName,
        isClosed,
        isCrossRepository,
        repository,
    }

    // /v1/scmPullRequests/{id}
    public Task<ScmPullRequestResponse> ScmPullRequests_getInstance(string id, ScmPullRequests_getInstanceFieldsScmPullRequests[]? fieldsScmPullRequests = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/scmPullRequests/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsScmPullRequests != null)
            uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmPullRequestResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmRepositories_getCollectionFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmRepositories_getCollectionInclude
    {
        scmProvider,
        defaultBranch,
    }

    // /v1/scmRepositories
    public Task<ScmRepositoriesResponse> ScmRepositories_getCollection(string[]? filterId = default, ScmRepositories_getCollectionFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, ScmRepositories_getCollectionInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/scmRepositories";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterId != null)
            uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmRepositoriesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmRepositories_getInstanceFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmRepositories_getInstanceInclude
    {
        scmProvider,
        defaultBranch,
    }

    // /v1/scmRepositories/{id}
    public Task<ScmRepositoryResponse> ScmRepositories_getInstance(string id, ScmRepositories_getInstanceFieldsScmRepositories[]? fieldsScmRepositories = default, ScmRepositories_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/scmRepositories/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmRepositoryResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmRepositories_gitReferences_getToManyRelatedFieldsScmGitReferences
    {
        name,
        canonicalName,
        isDeleted,
        kind,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmRepositories_gitReferences_getToManyRelatedFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    // /v1/scmRepositories/{id}/gitReferences
    public Task<ScmGitReferencesResponse> ScmRepositories_gitReferences_getToManyRelated(string id, ScmRepositories_gitReferences_getToManyRelatedFieldsScmGitReferences[]? fieldsScmGitReferences = default, ScmRepositories_gitReferences_getToManyRelatedFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/scmRepositories/{id}/gitReferences";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsScmGitReferences != null)
            uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmGitReferencesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmRepositories_pullRequests_getToManyRelatedFieldsScmPullRequests
    {
        title,
        number,
        webUrl,
        sourceRepositoryOwner,
        sourceRepositoryName,
        sourceBranchName,
        destinationRepositoryOwner,
        destinationRepositoryName,
        destinationBranchName,
        isClosed,
        isCrossRepository,
        repository,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ScmRepositories_pullRequests_getToManyRelatedFieldsScmRepositories
    {
        lastAccessedDate,
        httpCloneUrl,
        sshCloneUrl,
        ownerName,
        repositoryName,
        scmProvider,
        defaultBranch,
        gitReferences,
        pullRequests,
    }

    // /v1/scmRepositories/{id}/pullRequests
    public Task<ScmPullRequestsResponse> ScmRepositories_pullRequests_getToManyRelated(string id, ScmRepositories_pullRequests_getToManyRelatedFieldsScmPullRequests[]? fieldsScmPullRequests = default, ScmRepositories_pullRequests_getToManyRelatedFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/scmRepositories/{id}/pullRequests";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsScmPullRequests != null)
            uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
        if (fieldsScmRepositories != null)
            uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<ScmPullRequestsResponse>(message, log);
    }

    // /v1/subscriptionAppStoreReviewScreenshots
    public Task<SubscriptionAppStoreReviewScreenshotResponse> SubscriptionAppStoreReviewScreenshots_createInstance(SubscriptionAppStoreReviewScreenshotCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionAppStoreReviewScreenshots";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionAppStoreReviewScreenshotResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionAppStoreReviewScreenshots_getInstanceFieldsSubscriptionAppStoreReviewScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        subscription,
    }

    // /v1/subscriptionAppStoreReviewScreenshots/{id}
    public Task<SubscriptionAppStoreReviewScreenshotResponse> SubscriptionAppStoreReviewScreenshots_getInstance(string id, SubscriptionAppStoreReviewScreenshots_getInstanceFieldsSubscriptionAppStoreReviewScreenshots[]? fieldsSubscriptionAppStoreReviewScreenshots = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionAppStoreReviewScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            uriBuilder.AddParameter("fields[subscriptionAppStoreReviewScreenshots]", string.Join(",", fieldsSubscriptionAppStoreReviewScreenshots));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionAppStoreReviewScreenshotResponse>(message, log);
    }

    // /v1/subscriptionAppStoreReviewScreenshots/{id}
    public Task<SubscriptionAppStoreReviewScreenshotResponse> SubscriptionAppStoreReviewScreenshots_updateInstance(string id, SubscriptionAppStoreReviewScreenshotUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionAppStoreReviewScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionAppStoreReviewScreenshotResponse>(message, log);
    }

    // /v1/subscriptionAppStoreReviewScreenshots/{id}
    public Task SubscriptionAppStoreReviewScreenshots_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptionAppStoreReviewScreenshots/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/subscriptionAvailabilities
    public Task<SubscriptionAvailabilityResponse> SubscriptionAvailabilities_createInstance(SubscriptionAvailabilityCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionAvailabilities";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionAvailabilityResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionAvailabilities_getInstanceFieldsSubscriptionAvailabilities
    {
        availableInNewTerritories,
        availableTerritories,
    }

    // /v1/subscriptionAvailabilities/{id}
    public Task<SubscriptionAvailabilityResponse> SubscriptionAvailabilities_getInstance(string id, SubscriptionAvailabilities_getInstanceFieldsSubscriptionAvailabilities[]? fieldsSubscriptionAvailabilities = default, string[]? fieldsTerritories = default, string[]? include = default, int? limitAvailableTerritories = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionAvailabilities/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionAvailabilities != null)
            uriBuilder.AddParameter("fields[subscriptionAvailabilities]", string.Join(",", fieldsSubscriptionAvailabilities));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAvailableTerritories.HasValue)
            uriBuilder.AddParameter("limit[availableTerritories]", limitAvailableTerritories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionAvailabilityResponse>(message, log);
    }

    // /v1/subscriptionAvailabilities/{id}/availableTerritories
    public Task<TerritoriesResponse> SubscriptionAvailabilities_availableTerritories_getToManyRelated(string id, string[]? fieldsTerritories = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionAvailabilities/{id}/availableTerritories";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<TerritoriesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGracePeriods_getInstanceFieldsSubscriptionGracePeriods
    {
        optIn,
        sandboxOptIn,
        duration,
        renewalType,
    }

    // /v1/subscriptionGracePeriods/{id}
    public Task<SubscriptionGracePeriodResponse> SubscriptionGracePeriods_getInstance(string id, SubscriptionGracePeriods_getInstanceFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGracePeriods/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionGracePeriods != null)
            uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionGracePeriodResponse>(message, log);
    }

    // /v1/subscriptionGracePeriods/{id}
    public Task<SubscriptionGracePeriodResponse> SubscriptionGracePeriods_updateInstance(string id, SubscriptionGracePeriodUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGracePeriods/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionGracePeriodResponse>(message, log);
    }

    // /v1/subscriptionGroupLocalizations
    public Task<SubscriptionGroupLocalizationResponse> SubscriptionGroupLocalizations_createInstance(SubscriptionGroupLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroupLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionGroupLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroupLocalizations_getInstanceFieldsSubscriptionGroupLocalizations
    {
        name,
        customAppName,
        locale,
        state,
        subscriptionGroup,
    }

    // /v1/subscriptionGroupLocalizations/{id}
    public Task<SubscriptionGroupLocalizationResponse> SubscriptionGroupLocalizations_getInstance(string id, SubscriptionGroupLocalizations_getInstanceFieldsSubscriptionGroupLocalizations[]? fieldsSubscriptionGroupLocalizations = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroupLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionGroupLocalizations != null)
            uriBuilder.AddParameter("fields[subscriptionGroupLocalizations]", string.Join(",", fieldsSubscriptionGroupLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionGroupLocalizationResponse>(message, log);
    }

    // /v1/subscriptionGroupLocalizations/{id}
    public Task<SubscriptionGroupLocalizationResponse> SubscriptionGroupLocalizations_updateInstance(string id, SubscriptionGroupLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroupLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionGroupLocalizationResponse>(message, log);
    }

    // /v1/subscriptionGroupLocalizations/{id}
    public Task SubscriptionGroupLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroupLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/subscriptionGroups
    public Task<SubscriptionGroupResponse> SubscriptionGroups_createInstance(SubscriptionGroupCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroups";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionGroupResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_getInstanceFieldsSubscriptionGroups
    {
        referenceName,
        subscriptions,
        subscriptionGroupLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_getInstanceFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_getInstanceFieldsSubscriptionGroupLocalizations
    {
        name,
        customAppName,
        locale,
        state,
        subscriptionGroup,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_getInstanceInclude
    {
        subscriptions,
        subscriptionGroupLocalizations,
    }

    // /v1/subscriptionGroups/{id}
    public Task<SubscriptionGroupResponse> SubscriptionGroups_getInstance(string id, SubscriptionGroups_getInstanceFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, SubscriptionGroups_getInstanceFieldsSubscriptions[]? fieldsSubscriptions = default, SubscriptionGroups_getInstanceFieldsSubscriptionGroupLocalizations[]? fieldsSubscriptionGroupLocalizations = default, SubscriptionGroups_getInstanceInclude[]? include = default, int? limitSubscriptionGroupLocalizations = default, int? limitSubscriptions = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroups/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionGroups != null)
            uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsSubscriptionGroupLocalizations != null)
            uriBuilder.AddParameter("fields[subscriptionGroupLocalizations]", string.Join(",", fieldsSubscriptionGroupLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubscriptionGroupLocalizations.HasValue)
            uriBuilder.AddParameter("limit[subscriptionGroupLocalizations]", limitSubscriptionGroupLocalizations.Value.ToString());
        if (limitSubscriptions.HasValue)
            uriBuilder.AddParameter("limit[subscriptions]", limitSubscriptions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionGroupResponse>(message, log);
    }

    // /v1/subscriptionGroups/{id}
    public Task<SubscriptionGroupResponse> SubscriptionGroups_updateInstance(string id, SubscriptionGroupUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroups/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionGroupResponse>(message, log);
    }

    // /v1/subscriptionGroups/{id}
    public Task SubscriptionGroups_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroups/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptionGroupLocalizations_getToManyRelatedFieldsSubscriptionGroupLocalizations
    {
        name,
        customAppName,
        locale,
        state,
        subscriptionGroup,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptionGroupLocalizations_getToManyRelatedFieldsSubscriptionGroups
    {
        referenceName,
        subscriptions,
        subscriptionGroupLocalizations,
    }

    // /v1/subscriptionGroups/{id}/subscriptionGroupLocalizations
    public Task<SubscriptionGroupLocalizationsResponse> SubscriptionGroups_subscriptionGroupLocalizations_getToManyRelated(string id, SubscriptionGroups_subscriptionGroupLocalizations_getToManyRelatedFieldsSubscriptionGroupLocalizations[]? fieldsSubscriptionGroupLocalizations = default, SubscriptionGroups_subscriptionGroupLocalizations_getToManyRelatedFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionGroupLocalizations != null)
            uriBuilder.AddParameter("fields[subscriptionGroupLocalizations]", string.Join(",", fieldsSubscriptionGroupLocalizations));
        if (fieldsSubscriptionGroups != null)
            uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionGroupLocalizationsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFilterState
    {
        MISSING_METADATA,
        READY_TO_SUBMIT,
        WAITING_FOR_REVIEW,
        IN_REVIEW,
        DEVELOPER_ACTION_NEEDED,
        PENDING_BINARY_APPROVAL,
        APPROVED,
        DEVELOPER_REMOVED_FROM_SALE,
        REMOVED_FROM_SALE,
        REJECTED,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedSort
    {
        name,
        [EnumMember(Value = "-name")]
        nameDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionLocalizations
    {
        name,
        locale,
        description,
        state,
        subscription,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionAppStoreReviewScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        subscription,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionGroups
    {
        referenceName,
        subscriptions,
        subscriptionGroupLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionIntroductoryOffers
    {
        startDate,
        endDate,
        duration,
        offerMode,
        numberOfPeriods,
        subscription,
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionPromotionalOffers
    {
        name,
        offerCode,
        duration,
        offerMode,
        numberOfPeriods,
        subscription,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionOfferCodes
    {
        name,
        customerEligibilities,
        offerEligibility,
        duration,
        offerMode,
        numberOfPeriods,
        totalNumberOfCodes,
        active,
        subscription,
        oneTimeUseCodes,
        customCodes,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionPrices
    {
        startDate,
        preserved,
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionAvailabilities
    {
        availableInNewTerritories,
        availableTerritories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsWinBackOffers
    {
        referenceName,
        offerId,
        duration,
        offerMode,
        periodCount,
        customerEligibilityPaidSubscriptionDurationInMonths,
        customerEligibilityTimeSinceLastSubscribedInMonths,
        customerEligibilityWaitBetweenOffersInMonths,
        startDate,
        endDate,
        priority,
        promotionIntent,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        uploadOperations,
        state,
        subscription,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionGroups_subscriptions_getToManyRelatedInclude
    {
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    // /v1/subscriptionGroups/{id}/subscriptions
    public Task<SubscriptionsResponse> SubscriptionGroups_subscriptions_getToManyRelated(string id, string[]? filterProductId = default, string[]? filterName = default, SubscriptionGroups_subscriptions_getToManyRelatedFilterState[]? filterState = default, SubscriptionGroups_subscriptions_getToManyRelatedSort[]? sort = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionLocalizations[]? fieldsSubscriptionLocalizations = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionAppStoreReviewScreenshots[]? fieldsSubscriptionAppStoreReviewScreenshots = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionIntroductoryOffers[]? fieldsSubscriptionIntroductoryOffers = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionPromotionalOffers[]? fieldsSubscriptionPromotionalOffers = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionPrices[]? fieldsSubscriptionPrices = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionAvailabilities[]? fieldsSubscriptionAvailabilities = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsWinBackOffers[]? fieldsWinBackOffers = default, SubscriptionGroups_subscriptions_getToManyRelatedFieldsSubscriptionImages[]? fieldsSubscriptionImages = default, int? limit = default, SubscriptionGroups_subscriptions_getToManyRelatedInclude[]? include = default, int? limitSubscriptionLocalizations = default, int? limitIntroductoryOffers = default, int? limitPromotionalOffers = default, int? limitOfferCodes = default, int? limitPrices = default, int? limitWinBackOffers = default, int? limitImages = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroups/{id}/subscriptions";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterProductId != null)
            uriBuilder.AddParameter("filter[productId]", string.Join(",", filterProductId));
        if (filterName != null)
            uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
        if (filterState != null)
            uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsSubscriptionLocalizations != null)
            uriBuilder.AddParameter("fields[subscriptionLocalizations]", string.Join(",", fieldsSubscriptionLocalizations));
        if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            uriBuilder.AddParameter("fields[subscriptionAppStoreReviewScreenshots]", string.Join(",", fieldsSubscriptionAppStoreReviewScreenshots));
        if (fieldsSubscriptionGroups != null)
            uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
        if (fieldsSubscriptionIntroductoryOffers != null)
            uriBuilder.AddParameter("fields[subscriptionIntroductoryOffers]", string.Join(",", fieldsSubscriptionIntroductoryOffers));
        if (fieldsSubscriptionPromotionalOffers != null)
            uriBuilder.AddParameter("fields[subscriptionPromotionalOffers]", string.Join(",", fieldsSubscriptionPromotionalOffers));
        if (fieldsSubscriptionOfferCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
        if (fieldsSubscriptionPrices != null)
            uriBuilder.AddParameter("fields[subscriptionPrices]", string.Join(",", fieldsSubscriptionPrices));
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsSubscriptionAvailabilities != null)
            uriBuilder.AddParameter("fields[subscriptionAvailabilities]", string.Join(",", fieldsSubscriptionAvailabilities));
        if (fieldsWinBackOffers != null)
            uriBuilder.AddParameter("fields[winBackOffers]", string.Join(",", fieldsWinBackOffers));
        if (fieldsSubscriptionImages != null)
            uriBuilder.AddParameter("fields[subscriptionImages]", string.Join(",", fieldsSubscriptionImages));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitSubscriptionLocalizations.HasValue)
            uriBuilder.AddParameter("limit[subscriptionLocalizations]", limitSubscriptionLocalizations.Value.ToString());
        if (limitIntroductoryOffers.HasValue)
            uriBuilder.AddParameter("limit[introductoryOffers]", limitIntroductoryOffers.Value.ToString());
        if (limitPromotionalOffers.HasValue)
            uriBuilder.AddParameter("limit[promotionalOffers]", limitPromotionalOffers.Value.ToString());
        if (limitOfferCodes.HasValue)
            uriBuilder.AddParameter("limit[offerCodes]", limitOfferCodes.Value.ToString());
        if (limitPrices.HasValue)
            uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());
        if (limitWinBackOffers.HasValue)
            uriBuilder.AddParameter("limit[winBackOffers]", limitWinBackOffers.Value.ToString());
        if (limitImages.HasValue)
            uriBuilder.AddParameter("limit[images]", limitImages.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionsResponse>(message, log);
    }

    // /v1/subscriptionGroupSubmissions
    public Task<SubscriptionGroupSubmissionResponse> SubscriptionGroupSubmissions_createInstance(SubscriptionGroupSubmissionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionGroupSubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionGroupSubmissionResponse>(message, log);
    }

    // /v1/subscriptionImages
    public Task<SubscriptionImageResponse> SubscriptionImages_createInstance(SubscriptionImageCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionImages";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionImageResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionImages_getInstanceFieldsSubscriptionImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        uploadOperations,
        state,
        subscription,
    }

    // /v1/subscriptionImages/{id}
    public Task<SubscriptionImageResponse> SubscriptionImages_getInstance(string id, SubscriptionImages_getInstanceFieldsSubscriptionImages[]? fieldsSubscriptionImages = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionImages != null)
            uriBuilder.AddParameter("fields[subscriptionImages]", string.Join(",", fieldsSubscriptionImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionImageResponse>(message, log);
    }

    // /v1/subscriptionImages/{id}
    public Task<SubscriptionImageResponse> SubscriptionImages_updateInstance(string id, SubscriptionImageUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionImageResponse>(message, log);
    }

    // /v1/subscriptionImages/{id}
    public Task SubscriptionImages_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptionImages/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/subscriptionIntroductoryOffers
    public Task<SubscriptionIntroductoryOfferResponse> SubscriptionIntroductoryOffers_createInstance(SubscriptionIntroductoryOfferCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionIntroductoryOffers";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionIntroductoryOfferResponse>(message, log);
    }

    // /v1/subscriptionIntroductoryOffers/{id}
    public Task<SubscriptionIntroductoryOfferResponse> SubscriptionIntroductoryOffers_updateInstance(string id, SubscriptionIntroductoryOfferUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionIntroductoryOffers/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionIntroductoryOfferResponse>(message, log);
    }

    // /v1/subscriptionIntroductoryOffers/{id}
    public Task SubscriptionIntroductoryOffers_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptionIntroductoryOffers/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/subscriptionLocalizations
    public Task<SubscriptionLocalizationResponse> SubscriptionLocalizations_createInstance(SubscriptionLocalizationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionLocalizations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionLocalizationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionLocalizations_getInstanceFieldsSubscriptionLocalizations
    {
        name,
        locale,
        description,
        state,
        subscription,
    }

    // /v1/subscriptionLocalizations/{id}
    public Task<SubscriptionLocalizationResponse> SubscriptionLocalizations_getInstance(string id, SubscriptionLocalizations_getInstanceFieldsSubscriptionLocalizations[]? fieldsSubscriptionLocalizations = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionLocalizations != null)
            uriBuilder.AddParameter("fields[subscriptionLocalizations]", string.Join(",", fieldsSubscriptionLocalizations));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionLocalizationResponse>(message, log);
    }

    // /v1/subscriptionLocalizations/{id}
    public Task<SubscriptionLocalizationResponse> SubscriptionLocalizations_updateInstance(string id, SubscriptionLocalizationUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionLocalizationResponse>(message, log);
    }

    // /v1/subscriptionLocalizations/{id}
    public Task SubscriptionLocalizations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptionLocalizations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/subscriptionOfferCodeCustomCodes
    public Task<SubscriptionOfferCodeCustomCodeResponse> SubscriptionOfferCodeCustomCodes_createInstance(SubscriptionOfferCodeCustomCodeCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodeCustomCodes";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionOfferCodeCustomCodeResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodeCustomCodes_getInstanceFieldsSubscriptionOfferCodeCustomCodes
    {
        customCode,
        numberOfCodes,
        createdDate,
        expirationDate,
        active,
        offerCode,
    }

    // /v1/subscriptionOfferCodeCustomCodes/{id}
    public Task<SubscriptionOfferCodeCustomCodeResponse> SubscriptionOfferCodeCustomCodes_getInstance(string id, SubscriptionOfferCodeCustomCodes_getInstanceFieldsSubscriptionOfferCodeCustomCodes[]? fieldsSubscriptionOfferCodeCustomCodes = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodeCustomCodes/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionOfferCodeCustomCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodeCustomCodes]", string.Join(",", fieldsSubscriptionOfferCodeCustomCodes));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionOfferCodeCustomCodeResponse>(message, log);
    }

    // /v1/subscriptionOfferCodeCustomCodes/{id}
    public Task<SubscriptionOfferCodeCustomCodeResponse> SubscriptionOfferCodeCustomCodes_updateInstance(string id, SubscriptionOfferCodeCustomCodeUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodeCustomCodes/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionOfferCodeCustomCodeResponse>(message, log);
    }

    // /v1/subscriptionOfferCodeOneTimeUseCodes
    public Task<SubscriptionOfferCodeOneTimeUseCodeResponse> SubscriptionOfferCodeOneTimeUseCodes_createInstance(SubscriptionOfferCodeOneTimeUseCodeCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodeOneTimeUseCodes";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionOfferCodeOneTimeUseCodeResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodeOneTimeUseCodes_getInstanceFieldsSubscriptionOfferCodeOneTimeUseCodes
    {
        numberOfCodes,
        createdDate,
        expirationDate,
        active,
        offerCode,
        values,
    }

    // /v1/subscriptionOfferCodeOneTimeUseCodes/{id}
    public Task<SubscriptionOfferCodeOneTimeUseCodeResponse> SubscriptionOfferCodeOneTimeUseCodes_getInstance(string id, SubscriptionOfferCodeOneTimeUseCodes_getInstanceFieldsSubscriptionOfferCodeOneTimeUseCodes[]? fieldsSubscriptionOfferCodeOneTimeUseCodes = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodeOneTimeUseCodes/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodeOneTimeUseCodes]", string.Join(",", fieldsSubscriptionOfferCodeOneTimeUseCodes));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionOfferCodeOneTimeUseCodeResponse>(message, log);
    }

    // /v1/subscriptionOfferCodeOneTimeUseCodes/{id}
    public Task<SubscriptionOfferCodeOneTimeUseCodeResponse> SubscriptionOfferCodeOneTimeUseCodes_updateInstance(string id, SubscriptionOfferCodeOneTimeUseCodeUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodeOneTimeUseCodes/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionOfferCodeOneTimeUseCodeResponse>(message, log);
    }

    // /v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values
    public Task SubscriptionOfferCodeOneTimeUseCodes_values_getToOneRelated(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/subscriptionOfferCodes
    public Task<SubscriptionOfferCodeResponse> SubscriptionOfferCodes_createInstance(SubscriptionOfferCodeCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodes";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionOfferCodeResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_getInstanceFieldsSubscriptionOfferCodes
    {
        name,
        customerEligibilities,
        offerEligibility,
        duration,
        offerMode,
        numberOfPeriods,
        totalNumberOfCodes,
        active,
        subscription,
        oneTimeUseCodes,
        customCodes,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_getInstanceFieldsSubscriptionOfferCodeOneTimeUseCodes
    {
        numberOfCodes,
        createdDate,
        expirationDate,
        active,
        offerCode,
        values,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_getInstanceFieldsSubscriptionOfferCodeCustomCodes
    {
        customCode,
        numberOfCodes,
        createdDate,
        expirationDate,
        active,
        offerCode,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_getInstanceFieldsSubscriptionOfferCodePrices
    {
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_getInstanceInclude
    {
        subscription,
        oneTimeUseCodes,
        customCodes,
        prices,
    }

    // /v1/subscriptionOfferCodes/{id}
    public Task<SubscriptionOfferCodeResponse> SubscriptionOfferCodes_getInstance(string id, SubscriptionOfferCodes_getInstanceFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, SubscriptionOfferCodes_getInstanceFieldsSubscriptionOfferCodeOneTimeUseCodes[]? fieldsSubscriptionOfferCodeOneTimeUseCodes = default, SubscriptionOfferCodes_getInstanceFieldsSubscriptionOfferCodeCustomCodes[]? fieldsSubscriptionOfferCodeCustomCodes = default, SubscriptionOfferCodes_getInstanceFieldsSubscriptionOfferCodePrices[]? fieldsSubscriptionOfferCodePrices = default, SubscriptionOfferCodes_getInstanceInclude[]? include = default, int? limitCustomCodes = default, int? limitOneTimeUseCodes = default, int? limitPrices = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodes/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionOfferCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
        if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodeOneTimeUseCodes]", string.Join(",", fieldsSubscriptionOfferCodeOneTimeUseCodes));
        if (fieldsSubscriptionOfferCodeCustomCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodeCustomCodes]", string.Join(",", fieldsSubscriptionOfferCodeCustomCodes));
        if (fieldsSubscriptionOfferCodePrices != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodePrices]", string.Join(",", fieldsSubscriptionOfferCodePrices));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitCustomCodes.HasValue)
            uriBuilder.AddParameter("limit[customCodes]", limitCustomCodes.Value.ToString());
        if (limitOneTimeUseCodes.HasValue)
            uriBuilder.AddParameter("limit[oneTimeUseCodes]", limitOneTimeUseCodes.Value.ToString());
        if (limitPrices.HasValue)
            uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionOfferCodeResponse>(message, log);
    }

    // /v1/subscriptionOfferCodes/{id}
    public Task<SubscriptionOfferCodeResponse> SubscriptionOfferCodes_updateInstance(string id, SubscriptionOfferCodeUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodes/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionOfferCodeResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_customCodes_getToManyRelatedFieldsSubscriptionOfferCodeCustomCodes
    {
        customCode,
        numberOfCodes,
        createdDate,
        expirationDate,
        active,
        offerCode,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_customCodes_getToManyRelatedFieldsSubscriptionOfferCodes
    {
        name,
        customerEligibilities,
        offerEligibility,
        duration,
        offerMode,
        numberOfPeriods,
        totalNumberOfCodes,
        active,
        subscription,
        oneTimeUseCodes,
        customCodes,
        prices,
    }

    // /v1/subscriptionOfferCodes/{id}/customCodes
    public Task<SubscriptionOfferCodeCustomCodesResponse> SubscriptionOfferCodes_customCodes_getToManyRelated(string id, SubscriptionOfferCodes_customCodes_getToManyRelatedFieldsSubscriptionOfferCodeCustomCodes[]? fieldsSubscriptionOfferCodeCustomCodes = default, SubscriptionOfferCodes_customCodes_getToManyRelatedFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodes/{id}/customCodes";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionOfferCodeCustomCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodeCustomCodes]", string.Join(",", fieldsSubscriptionOfferCodeCustomCodes));
        if (fieldsSubscriptionOfferCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionOfferCodeCustomCodesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_oneTimeUseCodes_getToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodes
    {
        numberOfCodes,
        createdDate,
        expirationDate,
        active,
        offerCode,
        values,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_oneTimeUseCodes_getToManyRelatedFieldsSubscriptionOfferCodes
    {
        name,
        customerEligibilities,
        offerEligibility,
        duration,
        offerMode,
        numberOfPeriods,
        totalNumberOfCodes,
        active,
        subscription,
        oneTimeUseCodes,
        customCodes,
        prices,
    }

    // /v1/subscriptionOfferCodes/{id}/oneTimeUseCodes
    public Task<SubscriptionOfferCodeOneTimeUseCodesResponse> SubscriptionOfferCodes_oneTimeUseCodes_getToManyRelated(string id, SubscriptionOfferCodes_oneTimeUseCodes_getToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodes[]? fieldsSubscriptionOfferCodeOneTimeUseCodes = default, SubscriptionOfferCodes_oneTimeUseCodes_getToManyRelatedFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodeOneTimeUseCodes]", string.Join(",", fieldsSubscriptionOfferCodeOneTimeUseCodes));
        if (fieldsSubscriptionOfferCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionOfferCodeOneTimeUseCodesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_prices_getToManyRelatedFieldsSubscriptionOfferCodePrices
    {
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_prices_getToManyRelatedFieldsSubscriptionPricePoints
    {
        customerPrice,
        proceeds,
        proceedsYear2,
        territory,
        equalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionOfferCodes_prices_getToManyRelatedInclude
    {
        territory,
        subscriptionPricePoint,
    }

    // /v1/subscriptionOfferCodes/{id}/prices
    public Task<SubscriptionOfferCodePricesResponse> SubscriptionOfferCodes_prices_getToManyRelated(string id, string[]? filterTerritory = default, SubscriptionOfferCodes_prices_getToManyRelatedFieldsSubscriptionOfferCodePrices[]? fieldsSubscriptionOfferCodePrices = default, string[]? fieldsTerritories = default, SubscriptionOfferCodes_prices_getToManyRelatedFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, int? limit = default, SubscriptionOfferCodes_prices_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionOfferCodes/{id}/prices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsSubscriptionOfferCodePrices != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodePrices]", string.Join(",", fieldsSubscriptionOfferCodePrices));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (fieldsSubscriptionPricePoints != null)
            uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionOfferCodePricesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionPricePoints_getInstanceFieldsSubscriptionPricePoints
    {
        customerPrice,
        proceeds,
        proceedsYear2,
        territory,
        equalizations,
    }

    // /v1/subscriptionPricePoints/{id}
    public Task<SubscriptionPricePointResponse> SubscriptionPricePoints_getInstance(string id, SubscriptionPricePoints_getInstanceFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionPricePoints/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionPricePoints != null)
            uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionPricePointResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionPricePoints_equalizations_getToManyRelatedFieldsSubscriptionPricePoints
    {
        customerPrice,
        proceeds,
        proceedsYear2,
        territory,
        equalizations,
    }

    // /v1/subscriptionPricePoints/{id}/equalizations
    public Task<SubscriptionPricePointsResponse> SubscriptionPricePoints_equalizations_getToManyRelated(string id, string[]? filterTerritory = default, string[]? filterSubscription = default, SubscriptionPricePoints_equalizations_getToManyRelatedFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, string[]? fieldsTerritories = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionPricePoints/{id}/equalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (filterSubscription != null)
            uriBuilder.AddParameter("filter[subscription]", string.Join(",", filterSubscription));
        if (fieldsSubscriptionPricePoints != null)
            uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionPricePointsResponse>(message, log);
    }

    // /v1/subscriptionPrices
    public Task<SubscriptionPriceResponse> SubscriptionPrices_createInstance(SubscriptionPriceCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionPrices";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionPriceResponse>(message, log);
    }

    // /v1/subscriptionPrices/{id}
    public Task SubscriptionPrices_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptionPrices/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/subscriptionPromotionalOffers
    public Task<SubscriptionPromotionalOfferResponse> SubscriptionPromotionalOffers_createInstance(SubscriptionPromotionalOfferCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionPromotionalOffers";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionPromotionalOfferResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionPromotionalOffers_getInstanceFieldsSubscriptionPromotionalOffers
    {
        name,
        offerCode,
        duration,
        offerMode,
        numberOfPeriods,
        subscription,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionPromotionalOffers_getInstanceFieldsSubscriptionPromotionalOfferPrices
    {
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionPromotionalOffers_getInstanceInclude
    {
        subscription,
        prices,
    }

    // /v1/subscriptionPromotionalOffers/{id}
    public Task<SubscriptionPromotionalOfferResponse> SubscriptionPromotionalOffers_getInstance(string id, SubscriptionPromotionalOffers_getInstanceFieldsSubscriptionPromotionalOffers[]? fieldsSubscriptionPromotionalOffers = default, SubscriptionPromotionalOffers_getInstanceFieldsSubscriptionPromotionalOfferPrices[]? fieldsSubscriptionPromotionalOfferPrices = default, SubscriptionPromotionalOffers_getInstanceInclude[]? include = default, int? limitPrices = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionPromotionalOffers/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionPromotionalOffers != null)
            uriBuilder.AddParameter("fields[subscriptionPromotionalOffers]", string.Join(",", fieldsSubscriptionPromotionalOffers));
        if (fieldsSubscriptionPromotionalOfferPrices != null)
            uriBuilder.AddParameter("fields[subscriptionPromotionalOfferPrices]", string.Join(",", fieldsSubscriptionPromotionalOfferPrices));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitPrices.HasValue)
            uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionPromotionalOfferResponse>(message, log);
    }

    // /v1/subscriptionPromotionalOffers/{id}
    public Task<SubscriptionPromotionalOfferResponse> SubscriptionPromotionalOffers_updateInstance(string id, SubscriptionPromotionalOfferUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionPromotionalOffers/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionPromotionalOfferResponse>(message, log);
    }

    // /v1/subscriptionPromotionalOffers/{id}
    public Task SubscriptionPromotionalOffers_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptionPromotionalOffers/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionPromotionalOffers_prices_getToManyRelatedFieldsSubscriptionPromotionalOfferPrices
    {
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionPromotionalOffers_prices_getToManyRelatedFieldsSubscriptionPricePoints
    {
        customerPrice,
        proceeds,
        proceedsYear2,
        territory,
        equalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SubscriptionPromotionalOffers_prices_getToManyRelatedInclude
    {
        territory,
        subscriptionPricePoint,
    }

    // /v1/subscriptionPromotionalOffers/{id}/prices
    public Task<SubscriptionPromotionalOfferPricesResponse> SubscriptionPromotionalOffers_prices_getToManyRelated(string id, string[]? filterTerritory = default, SubscriptionPromotionalOffers_prices_getToManyRelatedFieldsSubscriptionPromotionalOfferPrices[]? fieldsSubscriptionPromotionalOfferPrices = default, string[]? fieldsTerritories = default, SubscriptionPromotionalOffers_prices_getToManyRelatedFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, int? limit = default, SubscriptionPromotionalOffers_prices_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptionPromotionalOffers/{id}/prices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsSubscriptionPromotionalOfferPrices != null)
            uriBuilder.AddParameter("fields[subscriptionPromotionalOfferPrices]", string.Join(",", fieldsSubscriptionPromotionalOfferPrices));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (fieldsSubscriptionPricePoints != null)
            uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionPromotionalOfferPricesResponse>(message, log);
    }

    // /v1/subscriptions
    public Task<SubscriptionResponse> Subscriptions_createInstance(SubscriptionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsSubscriptionLocalizations
    {
        name,
        locale,
        description,
        state,
        subscription,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsSubscriptionAppStoreReviewScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        subscription,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsSubscriptionIntroductoryOffers
    {
        startDate,
        endDate,
        duration,
        offerMode,
        numberOfPeriods,
        subscription,
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsSubscriptionPromotionalOffers
    {
        name,
        offerCode,
        duration,
        offerMode,
        numberOfPeriods,
        subscription,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsSubscriptionOfferCodes
    {
        name,
        customerEligibilities,
        offerEligibility,
        duration,
        offerMode,
        numberOfPeriods,
        totalNumberOfCodes,
        active,
        subscription,
        oneTimeUseCodes,
        customCodes,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsSubscriptionPrices
    {
        startDate,
        preserved,
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsSubscriptionAvailabilities
    {
        availableInNewTerritories,
        availableTerritories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsWinBackOffers
    {
        referenceName,
        offerId,
        duration,
        offerMode,
        periodCount,
        customerEligibilityPaidSubscriptionDurationInMonths,
        customerEligibilityTimeSinceLastSubscribedInMonths,
        customerEligibilityWaitBetweenOffersInMonths,
        startDate,
        endDate,
        priority,
        promotionIntent,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceFieldsSubscriptionImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        uploadOperations,
        state,
        subscription,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_getInstanceInclude
    {
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    // /v1/subscriptions/{id}
    public Task<SubscriptionResponse> Subscriptions_getInstance(string id, Subscriptions_getInstanceFieldsSubscriptions[]? fieldsSubscriptions = default, Subscriptions_getInstanceFieldsSubscriptionLocalizations[]? fieldsSubscriptionLocalizations = default, Subscriptions_getInstanceFieldsSubscriptionAppStoreReviewScreenshots[]? fieldsSubscriptionAppStoreReviewScreenshots = default, Subscriptions_getInstanceFieldsSubscriptionIntroductoryOffers[]? fieldsSubscriptionIntroductoryOffers = default, Subscriptions_getInstanceFieldsSubscriptionPromotionalOffers[]? fieldsSubscriptionPromotionalOffers = default, Subscriptions_getInstanceFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, Subscriptions_getInstanceFieldsSubscriptionPrices[]? fieldsSubscriptionPrices = default, Subscriptions_getInstanceFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, Subscriptions_getInstanceFieldsSubscriptionAvailabilities[]? fieldsSubscriptionAvailabilities = default, Subscriptions_getInstanceFieldsWinBackOffers[]? fieldsWinBackOffers = default, Subscriptions_getInstanceFieldsSubscriptionImages[]? fieldsSubscriptionImages = default, Subscriptions_getInstanceInclude[]? include = default, int? limitImages = default, int? limitIntroductoryOffers = default, int? limitOfferCodes = default, int? limitPrices = default, int? limitPromotionalOffers = default, int? limitSubscriptionLocalizations = default, int? limitWinBackOffers = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsSubscriptionLocalizations != null)
            uriBuilder.AddParameter("fields[subscriptionLocalizations]", string.Join(",", fieldsSubscriptionLocalizations));
        if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            uriBuilder.AddParameter("fields[subscriptionAppStoreReviewScreenshots]", string.Join(",", fieldsSubscriptionAppStoreReviewScreenshots));
        if (fieldsSubscriptionIntroductoryOffers != null)
            uriBuilder.AddParameter("fields[subscriptionIntroductoryOffers]", string.Join(",", fieldsSubscriptionIntroductoryOffers));
        if (fieldsSubscriptionPromotionalOffers != null)
            uriBuilder.AddParameter("fields[subscriptionPromotionalOffers]", string.Join(",", fieldsSubscriptionPromotionalOffers));
        if (fieldsSubscriptionOfferCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
        if (fieldsSubscriptionPrices != null)
            uriBuilder.AddParameter("fields[subscriptionPrices]", string.Join(",", fieldsSubscriptionPrices));
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsSubscriptionAvailabilities != null)
            uriBuilder.AddParameter("fields[subscriptionAvailabilities]", string.Join(",", fieldsSubscriptionAvailabilities));
        if (fieldsWinBackOffers != null)
            uriBuilder.AddParameter("fields[winBackOffers]", string.Join(",", fieldsWinBackOffers));
        if (fieldsSubscriptionImages != null)
            uriBuilder.AddParameter("fields[subscriptionImages]", string.Join(",", fieldsSubscriptionImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitImages.HasValue)
            uriBuilder.AddParameter("limit[images]", limitImages.Value.ToString());
        if (limitIntroductoryOffers.HasValue)
            uriBuilder.AddParameter("limit[introductoryOffers]", limitIntroductoryOffers.Value.ToString());
        if (limitOfferCodes.HasValue)
            uriBuilder.AddParameter("limit[offerCodes]", limitOfferCodes.Value.ToString());
        if (limitPrices.HasValue)
            uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());
        if (limitPromotionalOffers.HasValue)
            uriBuilder.AddParameter("limit[promotionalOffers]", limitPromotionalOffers.Value.ToString());
        if (limitSubscriptionLocalizations.HasValue)
            uriBuilder.AddParameter("limit[subscriptionLocalizations]", limitSubscriptionLocalizations.Value.ToString());
        if (limitWinBackOffers.HasValue)
            uriBuilder.AddParameter("limit[winBackOffers]", limitWinBackOffers.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionResponse>(message, log);
    }

    // /v1/subscriptions/{id}
    public Task<SubscriptionResponse> Subscriptions_updateInstance(string id, SubscriptionUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionResponse>(message, log);
    }

    // /v1/subscriptions/{id}
    public Task Subscriptions_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_appStoreReviewScreenshot_getToOneRelatedFieldsSubscriptionAppStoreReviewScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        subscription,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_appStoreReviewScreenshot_getToOneRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    // /v1/subscriptions/{id}/appStoreReviewScreenshot
    public Task<SubscriptionAppStoreReviewScreenshotResponse> Subscriptions_appStoreReviewScreenshot_getToOneRelated(string id, Subscriptions_appStoreReviewScreenshot_getToOneRelatedFieldsSubscriptionAppStoreReviewScreenshots[]? fieldsSubscriptionAppStoreReviewScreenshots = default, Subscriptions_appStoreReviewScreenshot_getToOneRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/appStoreReviewScreenshot";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            uriBuilder.AddParameter("fields[subscriptionAppStoreReviewScreenshots]", string.Join(",", fieldsSubscriptionAppStoreReviewScreenshots));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionAppStoreReviewScreenshotResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_images_getToManyRelatedFieldsSubscriptionImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        uploadOperations,
        state,
        subscription,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_images_getToManyRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    // /v1/subscriptions/{id}/images
    public Task<SubscriptionImagesResponse> Subscriptions_images_getToManyRelated(string id, Subscriptions_images_getToManyRelatedFieldsSubscriptionImages[]? fieldsSubscriptionImages = default, Subscriptions_images_getToManyRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/images";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionImages != null)
            uriBuilder.AddParameter("fields[subscriptionImages]", string.Join(",", fieldsSubscriptionImages));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionImagesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_introductoryOffers_getToManyRelatedFieldsSubscriptionIntroductoryOffers
    {
        startDate,
        endDate,
        duration,
        offerMode,
        numberOfPeriods,
        subscription,
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_introductoryOffers_getToManyRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_introductoryOffers_getToManyRelatedFieldsSubscriptionPricePoints
    {
        customerPrice,
        proceeds,
        proceedsYear2,
        territory,
        equalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_introductoryOffers_getToManyRelatedInclude
    {
        subscription,
        territory,
        subscriptionPricePoint,
    }

    // /v1/subscriptions/{id}/introductoryOffers
    public Task<SubscriptionIntroductoryOffersResponse> Subscriptions_introductoryOffers_getToManyRelated(string id, string[]? filterTerritory = default, Subscriptions_introductoryOffers_getToManyRelatedFieldsSubscriptionIntroductoryOffers[]? fieldsSubscriptionIntroductoryOffers = default, Subscriptions_introductoryOffers_getToManyRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, string[]? fieldsTerritories = default, Subscriptions_introductoryOffers_getToManyRelatedFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, int? limit = default, Subscriptions_introductoryOffers_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/introductoryOffers";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsSubscriptionIntroductoryOffers != null)
            uriBuilder.AddParameter("fields[subscriptionIntroductoryOffers]", string.Join(",", fieldsSubscriptionIntroductoryOffers));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (fieldsSubscriptionPricePoints != null)
            uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionIntroductoryOffersResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptionOfferCodes
    {
        name,
        customerEligibilities,
        offerEligibility,
        duration,
        offerMode,
        numberOfPeriods,
        totalNumberOfCodes,
        active,
        subscription,
        oneTimeUseCodes,
        customCodes,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodes
    {
        numberOfCodes,
        createdDate,
        expirationDate,
        active,
        offerCode,
        values,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptionOfferCodeCustomCodes
    {
        customCode,
        numberOfCodes,
        createdDate,
        expirationDate,
        active,
        offerCode,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptionOfferCodePrices
    {
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_offerCodes_getToManyRelatedInclude
    {
        subscription,
        oneTimeUseCodes,
        customCodes,
        prices,
    }

    // /v1/subscriptions/{id}/offerCodes
    public Task<SubscriptionOfferCodesResponse> Subscriptions_offerCodes_getToManyRelated(string id, string[]? filterTerritory = default, Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodes[]? fieldsSubscriptionOfferCodeOneTimeUseCodes = default, Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptionOfferCodeCustomCodes[]? fieldsSubscriptionOfferCodeCustomCodes = default, Subscriptions_offerCodes_getToManyRelatedFieldsSubscriptionOfferCodePrices[]? fieldsSubscriptionOfferCodePrices = default, int? limit = default, Subscriptions_offerCodes_getToManyRelatedInclude[]? include = default, int? limitOneTimeUseCodes = default, int? limitCustomCodes = default, int? limitPrices = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/offerCodes";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsSubscriptionOfferCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodeOneTimeUseCodes]", string.Join(",", fieldsSubscriptionOfferCodeOneTimeUseCodes));
        if (fieldsSubscriptionOfferCodeCustomCodes != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodeCustomCodes]", string.Join(",", fieldsSubscriptionOfferCodeCustomCodes));
        if (fieldsSubscriptionOfferCodePrices != null)
            uriBuilder.AddParameter("fields[subscriptionOfferCodePrices]", string.Join(",", fieldsSubscriptionOfferCodePrices));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitOneTimeUseCodes.HasValue)
            uriBuilder.AddParameter("limit[oneTimeUseCodes]", limitOneTimeUseCodes.Value.ToString());
        if (limitCustomCodes.HasValue)
            uriBuilder.AddParameter("limit[customCodes]", limitCustomCodes.Value.ToString());
        if (limitPrices.HasValue)
            uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionOfferCodesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_pricePoints_getToManyRelatedFieldsSubscriptionPricePoints
    {
        customerPrice,
        proceeds,
        proceedsYear2,
        territory,
        equalizations,
    }

    // /v1/subscriptions/{id}/pricePoints
    public Task<SubscriptionPricePointsResponse> Subscriptions_pricePoints_getToManyRelated(string id, string[]? filterTerritory = default, Subscriptions_pricePoints_getToManyRelatedFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, string[]? fieldsTerritories = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/pricePoints";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsSubscriptionPricePoints != null)
            uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionPricePointsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_prices_getToManyRelatedFieldsSubscriptionPrices
    {
        startDate,
        preserved,
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_prices_getToManyRelatedFieldsSubscriptionPricePoints
    {
        customerPrice,
        proceeds,
        proceedsYear2,
        territory,
        equalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_prices_getToManyRelatedInclude
    {
        territory,
        subscriptionPricePoint,
    }

    // /v1/subscriptions/{id}/prices
    public Task<SubscriptionPricesResponse> Subscriptions_prices_getToManyRelated(string id, string[]? filterSubscriptionPricePoint = default, string[]? filterTerritory = default, Subscriptions_prices_getToManyRelatedFieldsSubscriptionPrices[]? fieldsSubscriptionPrices = default, string[]? fieldsTerritories = default, Subscriptions_prices_getToManyRelatedFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, int? limit = default, Subscriptions_prices_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/prices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterSubscriptionPricePoint != null)
            uriBuilder.AddParameter("filter[subscriptionPricePoint]", string.Join(",", filterSubscriptionPricePoint));
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsSubscriptionPrices != null)
            uriBuilder.AddParameter("fields[subscriptionPrices]", string.Join(",", fieldsSubscriptionPrices));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (fieldsSubscriptionPricePoints != null)
            uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionPricesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_promotedPurchase_getToOneRelatedFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_promotedPurchase_getToOneRelatedFieldsInAppPurchases
    {
        name,
        productId,
        inAppPurchaseType,
        state,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_promotedPurchase_getToOneRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_promotedPurchase_getToOneRelatedFieldsPromotedPurchaseImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        assetType,
        uploadOperations,
        state,
        promotedPurchase,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_promotedPurchase_getToOneRelatedInclude
    {
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    // /v1/subscriptions/{id}/promotedPurchase
    public Task<PromotedPurchaseResponse> Subscriptions_promotedPurchase_getToOneRelated(string id, Subscriptions_promotedPurchase_getToOneRelatedFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, Subscriptions_promotedPurchase_getToOneRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, Subscriptions_promotedPurchase_getToOneRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, Subscriptions_promotedPurchase_getToOneRelatedFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, Subscriptions_promotedPurchase_getToOneRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/promotedPurchase";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsPromotedPurchaseImages != null)
            uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PromotedPurchaseResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_promotionalOffers_getToManyRelatedFieldsSubscriptionPromotionalOffers
    {
        name,
        offerCode,
        duration,
        offerMode,
        numberOfPeriods,
        subscription,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_promotionalOffers_getToManyRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_promotionalOffers_getToManyRelatedFieldsSubscriptionPromotionalOfferPrices
    {
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_promotionalOffers_getToManyRelatedInclude
    {
        subscription,
        prices,
    }

    // /v1/subscriptions/{id}/promotionalOffers
    public Task<SubscriptionPromotionalOffersResponse> Subscriptions_promotionalOffers_getToManyRelated(string id, string[]? filterTerritory = default, Subscriptions_promotionalOffers_getToManyRelatedFieldsSubscriptionPromotionalOffers[]? fieldsSubscriptionPromotionalOffers = default, Subscriptions_promotionalOffers_getToManyRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, Subscriptions_promotionalOffers_getToManyRelatedFieldsSubscriptionPromotionalOfferPrices[]? fieldsSubscriptionPromotionalOfferPrices = default, int? limit = default, Subscriptions_promotionalOffers_getToManyRelatedInclude[]? include = default, int? limitPrices = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/promotionalOffers";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsSubscriptionPromotionalOffers != null)
            uriBuilder.AddParameter("fields[subscriptionPromotionalOffers]", string.Join(",", fieldsSubscriptionPromotionalOffers));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsSubscriptionPromotionalOfferPrices != null)
            uriBuilder.AddParameter("fields[subscriptionPromotionalOfferPrices]", string.Join(",", fieldsSubscriptionPromotionalOfferPrices));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitPrices.HasValue)
            uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionPromotionalOffersResponse>(message, log);
    }

    // /v1/subscriptions/{id}/relationships/introductoryOffers
    public Task<SubscriptionIntroductoryOffersLinkagesResponse> Subscriptions_introductoryOffers_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/relationships/introductoryOffers";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionIntroductoryOffersLinkagesResponse>(message, log);
    }

    public class Subscriptions_introductoryOffers_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "subscriptionIntroductoryOffers";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/subscriptions/{id}/relationships/introductoryOffers
    public Task Subscriptions_introductoryOffers_deleteToManyRelationship(string id, SubscriptionIntroductoryOffersLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/relationships/introductoryOffers";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    // /v1/subscriptions/{id}/relationships/prices
    public Task<SubscriptionPricesLinkagesResponse> Subscriptions_prices_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/relationships/prices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionPricesLinkagesResponse>(message, log);
    }

    public class Subscriptions_prices_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "subscriptionPrices";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/subscriptions/{id}/relationships/prices
    public Task Subscriptions_prices_deleteToManyRelationship(string id, SubscriptionPricesLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/relationships/prices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_subscriptionAvailability_getToOneRelatedFieldsSubscriptionAvailabilities
    {
        availableInNewTerritories,
        availableTerritories,
    }

    // /v1/subscriptions/{id}/subscriptionAvailability
    public Task<SubscriptionAvailabilityResponse> Subscriptions_subscriptionAvailability_getToOneRelated(string id, Subscriptions_subscriptionAvailability_getToOneRelatedFieldsSubscriptionAvailabilities[]? fieldsSubscriptionAvailabilities = default, string[]? fieldsTerritories = default, string[]? include = default, int? limitAvailableTerritories = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/subscriptionAvailability";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionAvailabilities != null)
            uriBuilder.AddParameter("fields[subscriptionAvailabilities]", string.Join(",", fieldsSubscriptionAvailabilities));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAvailableTerritories.HasValue)
            uriBuilder.AddParameter("limit[availableTerritories]", limitAvailableTerritories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionAvailabilityResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_subscriptionLocalizations_getToManyRelatedFieldsSubscriptionLocalizations
    {
        name,
        locale,
        description,
        state,
        subscription,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_subscriptionLocalizations_getToManyRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    // /v1/subscriptions/{id}/subscriptionLocalizations
    public Task<SubscriptionLocalizationsResponse> Subscriptions_subscriptionLocalizations_getToManyRelated(string id, Subscriptions_subscriptionLocalizations_getToManyRelatedFieldsSubscriptionLocalizations[]? fieldsSubscriptionLocalizations = default, Subscriptions_subscriptionLocalizations_getToManyRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/subscriptionLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSubscriptionLocalizations != null)
            uriBuilder.AddParameter("fields[subscriptionLocalizations]", string.Join(",", fieldsSubscriptionLocalizations));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SubscriptionLocalizationsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_winBackOffers_getToManyRelatedFieldsWinBackOffers
    {
        referenceName,
        offerId,
        duration,
        offerMode,
        periodCount,
        customerEligibilityPaidSubscriptionDurationInMonths,
        customerEligibilityTimeSinceLastSubscribedInMonths,
        customerEligibilityWaitBetweenOffersInMonths,
        startDate,
        endDate,
        priority,
        promotionIntent,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Subscriptions_winBackOffers_getToManyRelatedFieldsWinBackOfferPrices
    {
        territory,
        subscriptionPricePoint,
    }

    // /v1/subscriptions/{id}/winBackOffers
    public Task<WinBackOffersResponse> Subscriptions_winBackOffers_getToManyRelated(string id, Subscriptions_winBackOffers_getToManyRelatedFieldsWinBackOffers[]? fieldsWinBackOffers = default, Subscriptions_winBackOffers_getToManyRelatedFieldsWinBackOfferPrices[]? fieldsWinBackOfferPrices = default, int? limit = default, string[]? include = default, int? limitPrices = default, INestedLog? log = null)
    {
        string path = "/v1/subscriptions/{id}/winBackOffers";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsWinBackOffers != null)
            uriBuilder.AddParameter("fields[winBackOffers]", string.Join(",", fieldsWinBackOffers));
        if (fieldsWinBackOfferPrices != null)
            uriBuilder.AddParameter("fields[winBackOfferPrices]", string.Join(",", fieldsWinBackOfferPrices));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitPrices.HasValue)
            uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<WinBackOffersResponse>(message, log);
    }

    // /v1/subscriptionSubmissions
    public Task<SubscriptionSubmissionResponse> SubscriptionSubmissions_createInstance(SubscriptionSubmissionCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/subscriptionSubmissions";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SubscriptionSubmissionResponse>(message, log);
    }

    // /v1/territories
    public Task<TerritoriesResponse> Territories_getCollection(string[]? fieldsTerritories = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/territories";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<TerritoriesResponse>(message, log);
    }

    // /v1/territoryAvailabilities/{id}
    public Task<TerritoryAvailabilityResponse> TerritoryAvailabilities_updateInstance(string id, TerritoryAvailabilityUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/territoryAvailabilities/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<TerritoryAvailabilityResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum UserInvitations_getCollectionFilterRoles
    {
        ADMIN,
        FINANCE,
        ACCOUNT_HOLDER,
        SALES,
        MARKETING,
        APP_MANAGER,
        DEVELOPER,
        ACCESS_TO_REPORTS,
        CUSTOMER_SUPPORT,
        CREATE_APPS,
        CLOUD_MANAGED_DEVELOPER_ID,
        CLOUD_MANAGED_APP_DISTRIBUTION,
        GENERATE_INDIVIDUAL_KEYS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum UserInvitations_getCollectionSort
    {
        email,
        [EnumMember(Value = "-email")]
        emailDescending,
        lastName,
        [EnumMember(Value = "-lastName")]
        lastNameDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum UserInvitations_getCollectionFieldsUserInvitations
    {
        email,
        firstName,
        lastName,
        expirationDate,
        roles,
        allAppsVisible,
        provisioningAllowed,
        visibleApps,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum UserInvitations_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/userInvitations
    public Task<UserInvitationsResponse> UserInvitations_getCollection(string[]? filterEmail = default, UserInvitations_getCollectionFilterRoles[]? filterRoles = default, string[]? filterVisibleApps = default, UserInvitations_getCollectionSort[]? sort = default, UserInvitations_getCollectionFieldsUserInvitations[]? fieldsUserInvitations = default, UserInvitations_getCollectionFieldsApps[]? fieldsApps = default, int? limit = default, string[]? include = default, int? limitVisibleApps = default, INestedLog? log = null)
    {
        string path = "/v1/userInvitations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterEmail != null)
            uriBuilder.AddParameter("filter[email]", string.Join(",", filterEmail));
        if (filterRoles != null)
            uriBuilder.AddParameter("filter[roles]", string.Join(",", filterRoles));
        if (filterVisibleApps != null)
            uriBuilder.AddParameter("filter[visibleApps]", string.Join(",", filterVisibleApps));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsUserInvitations != null)
            uriBuilder.AddParameter("fields[userInvitations]", string.Join(",", fieldsUserInvitations));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitVisibleApps.HasValue)
            uriBuilder.AddParameter("limit[visibleApps]", limitVisibleApps.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<UserInvitationsResponse>(message, log);
    }

    // /v1/userInvitations
    public Task<UserInvitationResponse> UserInvitations_createInstance(UserInvitationCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/userInvitations";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<UserInvitationResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum UserInvitations_getInstanceFieldsUserInvitations
    {
        email,
        firstName,
        lastName,
        expirationDate,
        roles,
        allAppsVisible,
        provisioningAllowed,
        visibleApps,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum UserInvitations_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/userInvitations/{id}
    public Task<UserInvitationResponse> UserInvitations_getInstance(string id, UserInvitations_getInstanceFieldsUserInvitations[]? fieldsUserInvitations = default, UserInvitations_getInstanceFieldsApps[]? fieldsApps = default, string[]? include = default, int? limitVisibleApps = default, INestedLog? log = null)
    {
        string path = "/v1/userInvitations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsUserInvitations != null)
            uriBuilder.AddParameter("fields[userInvitations]", string.Join(",", fieldsUserInvitations));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitVisibleApps.HasValue)
            uriBuilder.AddParameter("limit[visibleApps]", limitVisibleApps.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<UserInvitationResponse>(message, log);
    }

    // /v1/userInvitations/{id}
    public Task UserInvitations_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/userInvitations/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum UserInvitations_visibleApps_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/userInvitations/{id}/visibleApps
    public Task<AppsWithoutIncludesResponse> UserInvitations_visibleApps_getToManyRelated(string id, UserInvitations_visibleApps_getToManyRelatedFieldsApps[]? fieldsApps = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/userInvitations/{id}/visibleApps";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppsWithoutIncludesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Users_getCollectionFilterRoles
    {
        ADMIN,
        FINANCE,
        ACCOUNT_HOLDER,
        SALES,
        MARKETING,
        APP_MANAGER,
        DEVELOPER,
        ACCESS_TO_REPORTS,
        CUSTOMER_SUPPORT,
        CREATE_APPS,
        CLOUD_MANAGED_DEVELOPER_ID,
        CLOUD_MANAGED_APP_DISTRIBUTION,
        GENERATE_INDIVIDUAL_KEYS,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Users_getCollectionSort
    {
        username,
        [EnumMember(Value = "-username")]
        usernameDescending,
        lastName,
        [EnumMember(Value = "-lastName")]
        lastNameDescending,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Users_getCollectionFieldsUsers
    {
        username,
        firstName,
        lastName,
        roles,
        allAppsVisible,
        provisioningAllowed,
        visibleApps,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Users_getCollectionFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/users
    public Task<UsersResponse> Users_getCollection(string[]? filterUsername = default, Users_getCollectionFilterRoles[]? filterRoles = default, string[]? filterVisibleApps = default, Users_getCollectionSort[]? sort = default, Users_getCollectionFieldsUsers[]? fieldsUsers = default, Users_getCollectionFieldsApps[]? fieldsApps = default, int? limit = default, string[]? include = default, int? limitVisibleApps = default, INestedLog? log = null)
    {
        string path = "/v1/users";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterUsername != null)
            uriBuilder.AddParameter("filter[username]", string.Join(",", filterUsername));
        if (filterRoles != null)
            uriBuilder.AddParameter("filter[roles]", string.Join(",", filterRoles));
        if (filterVisibleApps != null)
            uriBuilder.AddParameter("filter[visibleApps]", string.Join(",", filterVisibleApps));
        if (sort != null)
            uriBuilder.AddParameter("sort", string.Join(",", sort));
        if (fieldsUsers != null)
            uriBuilder.AddParameter("fields[users]", string.Join(",", fieldsUsers));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitVisibleApps.HasValue)
            uriBuilder.AddParameter("limit[visibleApps]", limitVisibleApps.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<UsersResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Users_getInstanceFieldsUsers
    {
        username,
        firstName,
        lastName,
        roles,
        allAppsVisible,
        provisioningAllowed,
        visibleApps,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Users_getInstanceFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/users/{id}
    public Task<UserResponse> Users_getInstance(string id, Users_getInstanceFieldsUsers[]? fieldsUsers = default, Users_getInstanceFieldsApps[]? fieldsApps = default, string[]? include = default, int? limitVisibleApps = default, INestedLog? log = null)
    {
        string path = "/v1/users/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsUsers != null)
            uriBuilder.AddParameter("fields[users]", string.Join(",", fieldsUsers));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitVisibleApps.HasValue)
            uriBuilder.AddParameter("limit[visibleApps]", limitVisibleApps.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<UserResponse>(message, log);
    }

    // /v1/users/{id}
    public Task<UserResponse> Users_updateInstance(string id, UserUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/users/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<UserResponse>(message, log);
    }

    // /v1/users/{id}
    public Task Users_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/users/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    // /v1/users/{id}/relationships/visibleApps
    public Task<UserVisibleAppsLinkagesResponse> Users_visibleApps_getToManyRelationship(string id, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/users/{id}/relationships/visibleApps";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<UserVisibleAppsLinkagesResponse>(message, log);
    }

    public class Users_visibleApps_createToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "apps";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/users/{id}/relationships/visibleApps
    public Task Users_visibleApps_createToManyRelationship(string id, UserVisibleAppsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/users/{id}/relationships/visibleApps";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class Users_visibleApps_replaceToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "apps";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/users/{id}/relationships/visibleApps
    public Task Users_visibleApps_replaceToManyRelationship(string id, UserVisibleAppsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/users/{id}/relationships/visibleApps";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    public class Users_visibleApps_deleteToManyRelationshipRequest
    {
        public class Data
        {
            public string @type { get; set; } = "apps";
            public string @id { get; set; } = "";
        }

        public Data[] @data { get; set; } = { };
    }

    // /v1/users/{id}/relationships/visibleApps
    public Task Users_visibleApps_deleteToManyRelationship(string id, UserVisibleAppsLinkagesRequest request, INestedLog? log = null)
    {
        string path = "/v1/users/{id}/relationships/visibleApps";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum Users_visibleApps_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    // /v1/users/{id}/visibleApps
    public Task<AppsWithoutIncludesResponse> Users_visibleApps_getToManyRelated(string id, Users_visibleApps_getToManyRelatedFieldsApps[]? fieldsApps = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v1/users/{id}/visibleApps";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppsWithoutIncludesResponse>(message, log);
    }

    // /v1/winBackOffers
    public Task<WinBackOfferResponse> WinBackOffers_createInstance(WinBackOfferCreateRequest request, INestedLog? log = null)
    {
        string path = "/v1/winBackOffers";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<WinBackOfferResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum WinBackOffers_getInstanceFieldsWinBackOffers
    {
        referenceName,
        offerId,
        duration,
        offerMode,
        periodCount,
        customerEligibilityPaidSubscriptionDurationInMonths,
        customerEligibilityTimeSinceLastSubscribedInMonths,
        customerEligibilityWaitBetweenOffersInMonths,
        startDate,
        endDate,
        priority,
        promotionIntent,
        prices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum WinBackOffers_getInstanceFieldsWinBackOfferPrices
    {
        territory,
        subscriptionPricePoint,
    }

    // /v1/winBackOffers/{id}
    public Task<WinBackOfferResponse> WinBackOffers_getInstance(string id, WinBackOffers_getInstanceFieldsWinBackOffers[]? fieldsWinBackOffers = default, WinBackOffers_getInstanceFieldsWinBackOfferPrices[]? fieldsWinBackOfferPrices = default, string[]? include = default, int? limitPrices = default, INestedLog? log = null)
    {
        string path = "/v1/winBackOffers/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsWinBackOffers != null)
            uriBuilder.AddParameter("fields[winBackOffers]", string.Join(",", fieldsWinBackOffers));
        if (fieldsWinBackOfferPrices != null)
            uriBuilder.AddParameter("fields[winBackOfferPrices]", string.Join(",", fieldsWinBackOfferPrices));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitPrices.HasValue)
            uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<WinBackOfferResponse>(message, log);
    }

    // /v1/winBackOffers/{id}
    public Task<WinBackOfferResponse> WinBackOffers_updateInstance(string id, WinBackOfferUpdateRequest request, INestedLog? log = null)
    {
        string path = "/v1/winBackOffers/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<WinBackOfferResponse>(message, log);
    }

    // /v1/winBackOffers/{id}
    public Task WinBackOffers_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v1/winBackOffers/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum WinBackOffers_prices_getToManyRelatedFieldsWinBackOfferPrices
    {
        territory,
        subscriptionPricePoint,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum WinBackOffers_prices_getToManyRelatedFieldsSubscriptionPricePoints
    {
        customerPrice,
        proceeds,
        proceedsYear2,
        territory,
        equalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum WinBackOffers_prices_getToManyRelatedInclude
    {
        territory,
        subscriptionPricePoint,
    }

    // /v1/winBackOffers/{id}/prices
    public Task<WinBackOfferPricesResponse> WinBackOffers_prices_getToManyRelated(string id, string[]? filterTerritory = default, WinBackOffers_prices_getToManyRelatedFieldsWinBackOfferPrices[]? fieldsWinBackOfferPrices = default, string[]? fieldsTerritories = default, WinBackOffers_prices_getToManyRelatedFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, int? limit = default, WinBackOffers_prices_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v1/winBackOffers/{id}/prices";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsWinBackOfferPrices != null)
            uriBuilder.AddParameter("fields[winBackOfferPrices]", string.Join(",", fieldsWinBackOfferPrices));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (fieldsSubscriptionPricePoints != null)
            uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<WinBackOfferPricesResponse>(message, log);
    }

    // /v2/appAvailabilities
    public Task<AppAvailabilityV2Response> AppAvailabilitiesV2_createInstance(AppAvailabilityV2CreateRequest request, INestedLog? log = null)
    {
        string path = "/v2/appAvailabilities";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppAvailabilityV2Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppAvailabilitiesV2_getInstanceFieldsAppAvailabilities
    {
        availableInNewTerritories,
        territoryAvailabilities,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppAvailabilitiesV2_getInstanceFieldsTerritoryAvailabilities
    {
        available,
        releaseDate,
        preOrderEnabled,
        preOrderPublishDate,
        contentStatuses,
        territory,
    }

    // /v2/appAvailabilities/{id}
    public Task<AppAvailabilityV2Response> AppAvailabilitiesV2_getInstance(string id, AppAvailabilitiesV2_getInstanceFieldsAppAvailabilities[]? fieldsAppAvailabilities = default, AppAvailabilitiesV2_getInstanceFieldsTerritoryAvailabilities[]? fieldsTerritoryAvailabilities = default, string[]? include = default, int? limitTerritoryAvailabilities = default, INestedLog? log = null)
    {
        string path = "/v2/appAvailabilities/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppAvailabilities != null)
            uriBuilder.AddParameter("fields[appAvailabilities]", string.Join(",", fieldsAppAvailabilities));
        if (fieldsTerritoryAvailabilities != null)
            uriBuilder.AddParameter("fields[territoryAvailabilities]", string.Join(",", fieldsTerritoryAvailabilities));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitTerritoryAvailabilities.HasValue)
            uriBuilder.AddParameter("limit[territoryAvailabilities]", limitTerritoryAvailabilities.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppAvailabilityV2Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppAvailabilitiesV2_territoryAvailabilities_getToManyRelatedFieldsTerritoryAvailabilities
    {
        available,
        releaseDate,
        preOrderEnabled,
        preOrderPublishDate,
        contentStatuses,
        territory,
    }

    // /v2/appAvailabilities/{id}/territoryAvailabilities
    public Task<TerritoryAvailabilitiesResponse> AppAvailabilitiesV2_territoryAvailabilities_getToManyRelated(string id, AppAvailabilitiesV2_territoryAvailabilities_getToManyRelatedFieldsTerritoryAvailabilities[]? fieldsTerritoryAvailabilities = default, string[]? fieldsTerritories = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v2/appAvailabilities/{id}/territoryAvailabilities";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsTerritoryAvailabilities != null)
            uriBuilder.AddParameter("fields[territoryAvailabilities]", string.Join(",", fieldsTerritoryAvailabilities));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<TerritoryAvailabilitiesResponse>(message, log);
    }

    // /v2/appStoreVersionExperiments
    public Task<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2_createInstance(AppStoreVersionExperimentV2CreateRequest request, INestedLog? log = null)
    {
        string path = "/v2/appStoreVersionExperiments";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionExperimentV2Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentsV2_getInstanceFieldsAppStoreVersionExperiments
    {
        name,
        platform,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        app,
        latestControlVersion,
        controlVersions,
        appStoreVersionExperimentTreatments,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentsV2_getInstanceFieldsAppStoreVersionExperimentTreatments
    {
        name,
        appIcon,
        appIconName,
        promotedDate,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentsV2_getInstanceInclude
    {
        app,
        latestControlVersion,
        controlVersions,
        appStoreVersionExperimentTreatments,
    }

    // /v2/appStoreVersionExperiments/{id}
    public Task<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2_getInstance(string id, AppStoreVersionExperimentsV2_getInstanceFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, AppStoreVersionExperimentsV2_getInstanceFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, AppStoreVersionExperimentsV2_getInstanceInclude[]? include = default, int? limitAppStoreVersionExperimentTreatments = default, int? limitControlVersions = default, INestedLog? log = null)
    {
        string path = "/v2/appStoreVersionExperiments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAppStoreVersionExperimentTreatments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionExperimentTreatments.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments.Value.ToString());
        if (limitControlVersions.HasValue)
            uriBuilder.AddParameter("limit[controlVersions]", limitControlVersions.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentV2Response>(message, log);
    }

    // /v2/appStoreVersionExperiments/{id}
    public Task<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2_updateInstance(string id, AppStoreVersionExperimentV2UpdateRequest request, INestedLog? log = null)
    {
        string path = "/v2/appStoreVersionExperiments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<AppStoreVersionExperimentV2Response>(message, log);
    }

    // /v2/appStoreVersionExperiments/{id}
    public Task AppStoreVersionExperimentsV2_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v2/appStoreVersionExperiments/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentsV2_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperimentTreatments
    {
        name,
        appIcon,
        appIconName,
        promotedDate,
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentsV2_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperiments
    {
        name,
        trafficProportion,
        state,
        reviewRequired,
        startDate,
        endDate,
        appStoreVersion,
        appStoreVersionExperimentTreatments,
        platform,
        app,
        latestControlVersion,
        controlVersions,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentsV2_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations
    {
        locale,
        appStoreVersionExperimentTreatment,
        appScreenshotSets,
        appPreviewSets,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppStoreVersionExperimentsV2_appStoreVersionExperimentTreatments_getToManyRelatedInclude
    {
        appStoreVersionExperiment,
        appStoreVersionExperimentV2,
        appStoreVersionExperimentTreatmentLocalizations,
    }

    // /v2/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments
    public Task<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperimentsV2_appStoreVersionExperimentTreatments_getToManyRelated(string id, AppStoreVersionExperimentsV2_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, AppStoreVersionExperimentsV2_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, AppStoreVersionExperimentsV2_appStoreVersionExperimentTreatments_getToManyRelatedFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, int? limit = default, AppStoreVersionExperimentsV2_appStoreVersionExperimentTreatments_getToManyRelatedInclude[]? include = default, int? limitAppStoreVersionExperimentTreatmentLocalizations = default, INestedLog? log = null)
    {
        string path = "/v2/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppStoreVersionExperimentTreatments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
        if (fieldsAppStoreVersionExperiments != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
        if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAppStoreVersionExperimentTreatmentLocalizations.HasValue)
            uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatmentLocalizations]", limitAppStoreVersionExperimentTreatmentLocalizations.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppStoreVersionExperimentTreatmentsResponse>(message, log);
    }

    // /v2/inAppPurchases
    public Task<InAppPurchaseV2Response> InAppPurchasesV2_createInstance(InAppPurchaseV2CreateRequest request, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseV2Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceFieldsInAppPurchases
    {
        name,
        productId,
        inAppPurchaseType,
        state,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceFieldsInAppPurchaseLocalizations
    {
        name,
        locale,
        description,
        state,
        inAppPurchaseV2,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceFieldsInAppPurchasePricePoints
    {
        customerPrice,
        proceeds,
        territory,
        equalizations,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceFieldsInAppPurchaseContents
    {
        fileName,
        fileSize,
        url,
        lastModifiedDate,
        inAppPurchaseV2,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceFieldsInAppPurchaseAppStoreReviewScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        inAppPurchaseV2,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceFieldsInAppPurchasePriceSchedules
    {
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceFieldsInAppPurchaseAvailabilities
    {
        availableInNewTerritories,
        availableTerritories,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceFieldsInAppPurchaseImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        uploadOperations,
        state,
        inAppPurchase,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_getInstanceInclude
    {
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    // /v2/inAppPurchases/{id}
    public Task<InAppPurchaseV2Response> InAppPurchasesV2_getInstance(string id, InAppPurchasesV2_getInstanceFieldsInAppPurchases[]? fieldsInAppPurchases = default, InAppPurchasesV2_getInstanceFieldsInAppPurchaseLocalizations[]? fieldsInAppPurchaseLocalizations = default, InAppPurchasesV2_getInstanceFieldsInAppPurchasePricePoints[]? fieldsInAppPurchasePricePoints = default, InAppPurchasesV2_getInstanceFieldsInAppPurchaseContents[]? fieldsInAppPurchaseContents = default, InAppPurchasesV2_getInstanceFieldsInAppPurchaseAppStoreReviewScreenshots[]? fieldsInAppPurchaseAppStoreReviewScreenshots = default, InAppPurchasesV2_getInstanceFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, InAppPurchasesV2_getInstanceFieldsInAppPurchasePriceSchedules[]? fieldsInAppPurchasePriceSchedules = default, InAppPurchasesV2_getInstanceFieldsInAppPurchaseAvailabilities[]? fieldsInAppPurchaseAvailabilities = default, InAppPurchasesV2_getInstanceFieldsInAppPurchaseImages[]? fieldsInAppPurchaseImages = default, InAppPurchasesV2_getInstanceInclude[]? include = default, int? limitImages = default, int? limitInAppPurchaseLocalizations = default, int? limitPricePoints = default, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (fieldsInAppPurchaseLocalizations != null)
            uriBuilder.AddParameter("fields[inAppPurchaseLocalizations]", string.Join(",", fieldsInAppPurchaseLocalizations));
        if (fieldsInAppPurchasePricePoints != null)
            uriBuilder.AddParameter("fields[inAppPurchasePricePoints]", string.Join(",", fieldsInAppPurchasePricePoints));
        if (fieldsInAppPurchaseContents != null)
            uriBuilder.AddParameter("fields[inAppPurchaseContents]", string.Join(",", fieldsInAppPurchaseContents));
        if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            uriBuilder.AddParameter("fields[inAppPurchaseAppStoreReviewScreenshots]", string.Join(",", fieldsInAppPurchaseAppStoreReviewScreenshots));
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsInAppPurchasePriceSchedules != null)
            uriBuilder.AddParameter("fields[inAppPurchasePriceSchedules]", string.Join(",", fieldsInAppPurchasePriceSchedules));
        if (fieldsInAppPurchaseAvailabilities != null)
            uriBuilder.AddParameter("fields[inAppPurchaseAvailabilities]", string.Join(",", fieldsInAppPurchaseAvailabilities));
        if (fieldsInAppPurchaseImages != null)
            uriBuilder.AddParameter("fields[inAppPurchaseImages]", string.Join(",", fieldsInAppPurchaseImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitImages.HasValue)
            uriBuilder.AddParameter("limit[images]", limitImages.Value.ToString());
        if (limitInAppPurchaseLocalizations.HasValue)
            uriBuilder.AddParameter("limit[inAppPurchaseLocalizations]", limitInAppPurchaseLocalizations.Value.ToString());
        if (limitPricePoints.HasValue)
            uriBuilder.AddParameter("limit[pricePoints]", limitPricePoints.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseV2Response>(message, log);
    }

    // /v2/inAppPurchases/{id}
    public Task<InAppPurchaseV2Response> InAppPurchasesV2_updateInstance(string id, InAppPurchaseV2UpdateRequest request, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<InAppPurchaseV2Response>(message, log);
    }

    // /v2/inAppPurchases/{id}
    public Task InAppPurchasesV2_deleteInstance(string id, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Delete, uriBuilder.uri);
        return SendAsync(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_appStoreReviewScreenshot_getToOneRelatedFieldsInAppPurchaseAppStoreReviewScreenshots
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        imageAsset,
        assetToken,
        assetType,
        uploadOperations,
        assetDeliveryState,
        inAppPurchaseV2,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_appStoreReviewScreenshot_getToOneRelatedFieldsInAppPurchases
    {
        name,
        productId,
        inAppPurchaseType,
        state,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    // /v2/inAppPurchases/{id}/appStoreReviewScreenshot
    public Task<InAppPurchaseAppStoreReviewScreenshotResponse> InAppPurchasesV2_appStoreReviewScreenshot_getToOneRelated(string id, InAppPurchasesV2_appStoreReviewScreenshot_getToOneRelatedFieldsInAppPurchaseAppStoreReviewScreenshots[]? fieldsInAppPurchaseAppStoreReviewScreenshots = default, InAppPurchasesV2_appStoreReviewScreenshot_getToOneRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}/appStoreReviewScreenshot";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            uriBuilder.AddParameter("fields[inAppPurchaseAppStoreReviewScreenshots]", string.Join(",", fieldsInAppPurchaseAppStoreReviewScreenshots));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseAppStoreReviewScreenshotResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_content_getToOneRelatedFieldsInAppPurchaseContents
    {
        fileName,
        fileSize,
        url,
        lastModifiedDate,
        inAppPurchaseV2,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_content_getToOneRelatedFieldsInAppPurchases
    {
        name,
        productId,
        inAppPurchaseType,
        state,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    // /v2/inAppPurchases/{id}/content
    public Task<InAppPurchaseContentResponse> InAppPurchasesV2_content_getToOneRelated(string id, InAppPurchasesV2_content_getToOneRelatedFieldsInAppPurchaseContents[]? fieldsInAppPurchaseContents = default, InAppPurchasesV2_content_getToOneRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}/content";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseContents != null)
            uriBuilder.AddParameter("fields[inAppPurchaseContents]", string.Join(",", fieldsInAppPurchaseContents));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseContentResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_iapPriceSchedule_getToOneRelatedFieldsInAppPurchasePriceSchedules
    {
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_iapPriceSchedule_getToOneRelatedFieldsInAppPurchasePrices
    {
        startDate,
        endDate,
        manual,
        inAppPurchasePricePoint,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_iapPriceSchedule_getToOneRelatedInclude
    {
        baseTerritory,
        manualPrices,
        automaticPrices,
    }

    // /v2/inAppPurchases/{id}/iapPriceSchedule
    public Task<InAppPurchasePriceScheduleResponse> InAppPurchasesV2_iapPriceSchedule_getToOneRelated(string id, InAppPurchasesV2_iapPriceSchedule_getToOneRelatedFieldsInAppPurchasePriceSchedules[]? fieldsInAppPurchasePriceSchedules = default, string[]? fieldsTerritories = default, InAppPurchasesV2_iapPriceSchedule_getToOneRelatedFieldsInAppPurchasePrices[]? fieldsInAppPurchasePrices = default, InAppPurchasesV2_iapPriceSchedule_getToOneRelatedInclude[]? include = default, int? limitManualPrices = default, int? limitAutomaticPrices = default, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}/iapPriceSchedule";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchasePriceSchedules != null)
            uriBuilder.AddParameter("fields[inAppPurchasePriceSchedules]", string.Join(",", fieldsInAppPurchasePriceSchedules));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (fieldsInAppPurchasePrices != null)
            uriBuilder.AddParameter("fields[inAppPurchasePrices]", string.Join(",", fieldsInAppPurchasePrices));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitManualPrices.HasValue)
            uriBuilder.AddParameter("limit[manualPrices]", limitManualPrices.Value.ToString());
        if (limitAutomaticPrices.HasValue)
            uriBuilder.AddParameter("limit[automaticPrices]", limitAutomaticPrices.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchasePriceScheduleResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_images_getToManyRelatedFieldsInAppPurchaseImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        uploadOperations,
        state,
        inAppPurchase,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_images_getToManyRelatedFieldsInAppPurchases
    {
        name,
        productId,
        inAppPurchaseType,
        state,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    // /v2/inAppPurchases/{id}/images
    public Task<InAppPurchaseImagesResponse> InAppPurchasesV2_images_getToManyRelated(string id, InAppPurchasesV2_images_getToManyRelatedFieldsInAppPurchaseImages[]? fieldsInAppPurchaseImages = default, InAppPurchasesV2_images_getToManyRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}/images";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseImages != null)
            uriBuilder.AddParameter("fields[inAppPurchaseImages]", string.Join(",", fieldsInAppPurchaseImages));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseImagesResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_inAppPurchaseAvailability_getToOneRelatedFieldsInAppPurchaseAvailabilities
    {
        availableInNewTerritories,
        availableTerritories,
    }

    // /v2/inAppPurchases/{id}/inAppPurchaseAvailability
    public Task<InAppPurchaseAvailabilityResponse> InAppPurchasesV2_inAppPurchaseAvailability_getToOneRelated(string id, InAppPurchasesV2_inAppPurchaseAvailability_getToOneRelatedFieldsInAppPurchaseAvailabilities[]? fieldsInAppPurchaseAvailabilities = default, string[]? fieldsTerritories = default, string[]? include = default, int? limitAvailableTerritories = default, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}/inAppPurchaseAvailability";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseAvailabilities != null)
            uriBuilder.AddParameter("fields[inAppPurchaseAvailabilities]", string.Join(",", fieldsInAppPurchaseAvailabilities));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));
        if (limitAvailableTerritories.HasValue)
            uriBuilder.AddParameter("limit[availableTerritories]", limitAvailableTerritories.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseAvailabilityResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_inAppPurchaseLocalizations_getToManyRelatedFieldsInAppPurchaseLocalizations
    {
        name,
        locale,
        description,
        state,
        inAppPurchaseV2,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_inAppPurchaseLocalizations_getToManyRelatedFieldsInAppPurchases
    {
        name,
        productId,
        inAppPurchaseType,
        state,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    // /v2/inAppPurchases/{id}/inAppPurchaseLocalizations
    public Task<InAppPurchaseLocalizationsResponse> InAppPurchasesV2_inAppPurchaseLocalizations_getToManyRelated(string id, InAppPurchasesV2_inAppPurchaseLocalizations_getToManyRelatedFieldsInAppPurchaseLocalizations[]? fieldsInAppPurchaseLocalizations = default, InAppPurchasesV2_inAppPurchaseLocalizations_getToManyRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}/inAppPurchaseLocalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsInAppPurchaseLocalizations != null)
            uriBuilder.AddParameter("fields[inAppPurchaseLocalizations]", string.Join(",", fieldsInAppPurchaseLocalizations));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchaseLocalizationsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_pricePoints_getToManyRelatedFieldsInAppPurchasePricePoints
    {
        customerPrice,
        proceeds,
        territory,
        equalizations,
    }

    // /v2/inAppPurchases/{id}/pricePoints
    public Task<InAppPurchasePricePointsResponse> InAppPurchasesV2_pricePoints_getToManyRelated(string id, string[]? filterTerritory = default, InAppPurchasesV2_pricePoints_getToManyRelatedFieldsInAppPurchasePricePoints[]? fieldsInAppPurchasePricePoints = default, string[]? fieldsTerritories = default, int? limit = default, string[]? include = default, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}/pricePoints";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsInAppPurchasePricePoints != null)
            uriBuilder.AddParameter("fields[inAppPurchasePricePoints]", string.Join(",", fieldsInAppPurchasePricePoints));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<InAppPurchasePricePointsResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_promotedPurchase_getToOneRelatedFieldsPromotedPurchases
    {
        visibleForAllUsers,
        enabled,
        state,
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_promotedPurchase_getToOneRelatedFieldsInAppPurchases
    {
        name,
        productId,
        inAppPurchaseType,
        state,
        reviewNote,
        familySharable,
        contentHosting,
        inAppPurchaseLocalizations,
        pricePoints,
        content,
        appStoreReviewScreenshot,
        promotedPurchase,
        iapPriceSchedule,
        inAppPurchaseAvailability,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_promotedPurchase_getToOneRelatedFieldsSubscriptions
    {
        name,
        productId,
        familySharable,
        state,
        subscriptionPeriod,
        reviewNote,
        groupLevel,
        subscriptionLocalizations,
        appStoreReviewScreenshot,
        group,
        introductoryOffers,
        promotionalOffers,
        offerCodes,
        prices,
        pricePoints,
        promotedPurchase,
        subscriptionAvailability,
        winBackOffers,
        images,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_promotedPurchase_getToOneRelatedFieldsPromotedPurchaseImages
    {
        fileSize,
        fileName,
        sourceFileChecksum,
        assetToken,
        imageAsset,
        assetType,
        uploadOperations,
        state,
        promotedPurchase,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum InAppPurchasesV2_promotedPurchase_getToOneRelatedInclude
    {
        inAppPurchaseV2,
        subscription,
        promotionImages,
    }

    // /v2/inAppPurchases/{id}/promotedPurchase
    public Task<PromotedPurchaseResponse> InAppPurchasesV2_promotedPurchase_getToOneRelated(string id, InAppPurchasesV2_promotedPurchase_getToOneRelatedFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, InAppPurchasesV2_promotedPurchase_getToOneRelatedFieldsInAppPurchases[]? fieldsInAppPurchases = default, InAppPurchasesV2_promotedPurchase_getToOneRelatedFieldsSubscriptions[]? fieldsSubscriptions = default, InAppPurchasesV2_promotedPurchase_getToOneRelatedFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, InAppPurchasesV2_promotedPurchase_getToOneRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v2/inAppPurchases/{id}/promotedPurchase";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsPromotedPurchases != null)
            uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
        if (fieldsInAppPurchases != null)
            uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
        if (fieldsSubscriptions != null)
            uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
        if (fieldsPromotedPurchaseImages != null)
            uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<PromotedPurchaseResponse>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SandboxTestersV2_getCollectionFieldsSandboxTesters
    {
        firstName,
        lastName,
        acAccountName,
        territory,
        applePayCompatible,
        interruptPurchases,
        subscriptionRenewalRate,
    }

    // /v2/sandboxTesters
    public Task<SandboxTestersV2Response> SandboxTestersV2_getCollection(SandboxTestersV2_getCollectionFieldsSandboxTesters[]? fieldsSandboxTesters = default, int? limit = default, INestedLog? log = null)
    {
        string path = "/v2/sandboxTesters";
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsSandboxTesters != null)
            uriBuilder.AddParameter("fields[sandboxTesters]", string.Join(",", fieldsSandboxTesters));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<SandboxTestersV2Response>(message, log);
    }

    // /v2/sandboxTesters/{id}
    public Task<SandboxTesterV2Response> SandboxTestersV2_updateInstance(string id, SandboxTesterV2UpdateRequest request, INestedLog? log = null)
    {
        string path = "/v2/sandboxTesters/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Patch, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SandboxTesterV2Response>(message, log);
    }

    // /v2/sandboxTestersClearPurchaseHistoryRequest
    public Task<SandboxTestersClearPurchaseHistoryRequestV2Response> SandboxTestersClearPurchaseHistoryRequestV2_createInstance(SandboxTestersClearPurchaseHistoryRequestV2CreateRequest request, INestedLog? log = null)
    {
        string path = "/v2/sandboxTestersClearPurchaseHistoryRequest";
        var uriBuilder = new UriBuilder(m_BaseUri, path);

        var message = new HttpRequestMessage(HttpMethod.Post, uriBuilder.uri);
        message.Content = Serialize(request);
        return SendAsync<SandboxTestersClearPurchaseHistoryRequestV2Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPricePointsV3_getInstanceFieldsAppPricePoints
    {
        customerPrice,
        proceeds,
        app,
        equalizations,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPricePointsV3_getInstanceInclude
    {
        app,
        territory,
    }

    // /v3/appPricePoints/{id}
    public Task<AppPricePointV3Response> AppPricePointsV3_getInstance(string id, AppPricePointsV3_getInstanceFieldsAppPricePoints[]? fieldsAppPricePoints = default, AppPricePointsV3_getInstanceInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v3/appPricePoints/{id}";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (fieldsAppPricePoints != null)
            uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPricePointV3Response>(message, log);
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPricePointsV3_equalizations_getToManyRelatedFieldsAppPricePoints
    {
        customerPrice,
        proceeds,
        app,
        equalizations,
        territory,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPricePointsV3_equalizations_getToManyRelatedFieldsApps
    {
        name,
        bundleId,
        sku,
        primaryLocale,
        isOrEverWasMadeForKids,
        subscriptionStatusUrl,
        subscriptionStatusUrlVersion,
        subscriptionStatusUrlForSandbox,
        subscriptionStatusUrlVersionForSandbox,
        contentRightsDeclaration,
        streamlinedPurchasingEnabled,
        appEncryptionDeclarations,
        ciProduct,
        betaTesters,
        betaGroups,
        appStoreVersions,
        preReleaseVersions,
        betaAppLocalizations,
        builds,
        betaLicenseAgreement,
        betaAppReviewDetail,
        appInfos,
        appClips,
        appPricePoints,
        endUserLicenseAgreement,
        appPriceSchedule,
        appAvailabilityV2,
        inAppPurchases,
        subscriptionGroups,
        gameCenterEnabledVersions,
        perfPowerMetrics,
        appCustomProductPages,
        inAppPurchasesV2,
        promotedPurchases,
        appEvents,
        reviewSubmissions,
        subscriptionGracePeriod,
        customerReviews,
        gameCenterDetail,
        appStoreVersionExperimentsV2,
        alternativeDistributionKey,
        analyticsReportRequests,
        marketplaceSearchDetail,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AppPricePointsV3_equalizations_getToManyRelatedInclude
    {
        app,
        territory,
    }

    // /v3/appPricePoints/{id}/equalizations
    public Task<AppPricePointsV3Response> AppPricePointsV3_equalizations_getToManyRelated(string id, string[]? filterTerritory = default, AppPricePointsV3_equalizations_getToManyRelatedFieldsAppPricePoints[]? fieldsAppPricePoints = default, AppPricePointsV3_equalizations_getToManyRelatedFieldsApps[]? fieldsApps = default, string[]? fieldsTerritories = default, int? limit = default, AppPricePointsV3_equalizations_getToManyRelatedInclude[]? include = default, INestedLog? log = null)
    {
        string path = "/v3/appPricePoints/{id}/equalizations";
        path = path.Replace("{id}", id.ToString());
        var uriBuilder = new UriBuilder(m_BaseUri, path);
        if (filterTerritory != null)
            uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
        if (fieldsAppPricePoints != null)
            uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
        if (fieldsApps != null)
            uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
        if (fieldsTerritories != null)
            uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
        if (limit.HasValue)
            uriBuilder.AddParameter("limit", limit.Value.ToString());
        if (include != null)
            uriBuilder.AddParameter("include", string.Join(",", include));

        var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
        return SendAsync<AppPricePointsV3Response>(message, log);
    }

}

